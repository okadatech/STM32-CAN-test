
F303K8t6_CAN_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000378c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800396c  0800396c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800396c  0800396c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800396c  0800396c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08003980  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003980  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e464  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001be9  00000000  00000000  0002e4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  00030090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000710  00000000  00000000  00030858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017d96  00000000  00000000  00030f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007cc7  00000000  00000000  00048cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000816f5  00000000  00000000  000509c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d20ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f54  00000000  00000000  000d2138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038fc 	.word	0x080038fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080038fc 	.word	0x080038fc

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 ffc5 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 fff6 	bl	80031d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 ffdd 	bl	80011d2 <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 ffa5 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	2000002c 	.word	0x2000002c

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	2000002c 	.word	0x2000002c

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_Delay+0x40>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d8f7      	bhi.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000004 	.word	0x20000004

080002d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d101      	bne.n	80002ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
 80002e8:	e0ed      	b.n	80004c6 <HAL_CAN_Init+0x1ee>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d102      	bne.n	80002fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f002 ff90 	bl	800321c <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f022 0202 	bic.w	r2, r2, #2
 800030a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800030c:	f7ff ffb6 	bl	800027c <HAL_GetTick>
 8000310:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000312:	e012      	b.n	800033a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000314:	f7ff ffb2 	bl	800027c <HAL_GetTick>
 8000318:	4602      	mov	r2, r0
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	1ad3      	subs	r3, r2, r3
 800031e:	2b0a      	cmp	r3, #10
 8000320:	d90b      	bls.n	800033a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000326:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2205      	movs	r2, #5
 8000332:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000336:	2301      	movs	r3, #1
 8000338:	e0c5      	b.n	80004c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f003 0302 	and.w	r3, r3, #2
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1e5      	bne.n	8000314 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f042 0201 	orr.w	r2, r2, #1
 8000356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000358:	f7ff ff90 	bl	800027c <HAL_GetTick>
 800035c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800035e:	e012      	b.n	8000386 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000360:	f7ff ff8c 	bl	800027c <HAL_GetTick>
 8000364:	4602      	mov	r2, r0
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	1ad3      	subs	r3, r2, r3
 800036a:	2b0a      	cmp	r3, #10
 800036c:	d90b      	bls.n	8000386 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000372:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2205      	movs	r2, #5
 800037e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000382:	2301      	movs	r3, #1
 8000384:	e09f      	b.n	80004c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	f003 0301 	and.w	r3, r3, #1
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0e5      	beq.n	8000360 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	7e1b      	ldrb	r3, [r3, #24]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d108      	bne.n	80003ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	e007      	b.n	80003be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	7e5b      	ldrb	r3, [r3, #25]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d108      	bne.n	80003d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	e007      	b.n	80003e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	7e9b      	ldrb	r3, [r3, #26]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d108      	bne.n	8000402 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f042 0220 	orr.w	r2, r2, #32
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	e007      	b.n	8000412 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f022 0220 	bic.w	r2, r2, #32
 8000410:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	7edb      	ldrb	r3, [r3, #27]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d108      	bne.n	800042c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f022 0210 	bic.w	r2, r2, #16
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	e007      	b.n	800043c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f042 0210 	orr.w	r2, r2, #16
 800043a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	7f1b      	ldrb	r3, [r3, #28]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d108      	bne.n	8000456 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f042 0208 	orr.w	r2, r2, #8
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	e007      	b.n	8000466 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f022 0208 	bic.w	r2, r2, #8
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	7f5b      	ldrb	r3, [r3, #29]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d108      	bne.n	8000480 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f042 0204 	orr.w	r2, r2, #4
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	e007      	b.n	8000490 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f022 0204 	bic.w	r2, r2, #4
 800048e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	431a      	orrs	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	691b      	ldr	r3, [r3, #16]
 800049e:	431a      	orrs	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	ea42 0103 	orr.w	r1, r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	1e5a      	subs	r2, r3, #1
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	430a      	orrs	r2, r1
 80004b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2200      	movs	r2, #0
 80004ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2201      	movs	r2, #1
 80004c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80004c4:	2300      	movs	r3, #0
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b087      	sub	sp, #28
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004e4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80004e6:	7cfb      	ldrb	r3, [r7, #19]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d003      	beq.n	80004f4 <HAL_CAN_ConfigFilter+0x26>
 80004ec:	7cfb      	ldrb	r3, [r7, #19]
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	f040 80aa 	bne.w	8000648 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004fa:	f043 0201 	orr.w	r2, r3, #1
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f003 031f 	and.w	r3, r3, #31
 800050c:	2201      	movs	r2, #1
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	43db      	mvns	r3, r3
 800051e:	401a      	ands	r2, r3
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d123      	bne.n	8000576 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	43db      	mvns	r3, r3
 8000538:	401a      	ands	r2, r3
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800054c:	683a      	ldr	r2, [r7, #0]
 800054e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000550:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	3248      	adds	r2, #72	; 0x48
 8000556:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800056a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800056c:	6979      	ldr	r1, [r7, #20]
 800056e:	3348      	adds	r3, #72	; 0x48
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	440b      	add	r3, r1
 8000574:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d122      	bne.n	80005c4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	431a      	orrs	r2, r3
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800059e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	3248      	adds	r2, #72	; 0x48
 80005a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005ba:	6979      	ldr	r1, [r7, #20]
 80005bc:	3348      	adds	r3, #72	; 0x48
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	440b      	add	r3, r1
 80005c2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d109      	bne.n	80005e0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	43db      	mvns	r3, r3
 80005d6:	401a      	ands	r2, r3
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80005de:	e007      	b.n	80005f0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	431a      	orrs	r2, r3
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d109      	bne.n	800060c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	43db      	mvns	r3, r3
 8000602:	401a      	ands	r2, r3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800060a:	e007      	b.n	800061c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	431a      	orrs	r2, r3
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	6a1b      	ldr	r3, [r3, #32]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d107      	bne.n	8000634 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	431a      	orrs	r2, r3
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800063a:	f023 0201 	bic.w	r2, r3, #1
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000644:	2300      	movs	r3, #0
 8000646:	e006      	b.n	8000656 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000654:	2301      	movs	r3, #1
  }
}
 8000656:	4618      	mov	r0, r3
 8000658:	371c      	adds	r7, #28
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b01      	cmp	r3, #1
 8000674:	d12e      	bne.n	80006d4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2202      	movs	r2, #2
 800067a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f022 0201 	bic.w	r2, r2, #1
 800068c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800068e:	f7ff fdf5 	bl	800027c <HAL_GetTick>
 8000692:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000694:	e012      	b.n	80006bc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000696:	f7ff fdf1 	bl	800027c <HAL_GetTick>
 800069a:	4602      	mov	r2, r0
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	2b0a      	cmp	r3, #10
 80006a2:	d90b      	bls.n	80006bc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2205      	movs	r2, #5
 80006b4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e012      	b.n	80006e2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1e5      	bne.n	8000696 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80006d0:	2300      	movs	r3, #0
 80006d2:	e006      	b.n	80006e2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80006e0:	2301      	movs	r3, #1
  }
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b089      	sub	sp, #36	; 0x24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000708:	7ffb      	ldrb	r3, [r7, #31]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d003      	beq.n	8000716 <HAL_CAN_AddTxMessage+0x2c>
 800070e:	7ffb      	ldrb	r3, [r7, #31]
 8000710:	2b02      	cmp	r3, #2
 8000712:	f040 80b8 	bne.w	8000886 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d10a      	bne.n	8000736 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000726:	2b00      	cmp	r3, #0
 8000728:	d105      	bne.n	8000736 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000730:	2b00      	cmp	r3, #0
 8000732:	f000 80a0 	beq.w	8000876 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	0e1b      	lsrs	r3, r3, #24
 800073a:	f003 0303 	and.w	r3, r3, #3
 800073e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d907      	bls.n	8000756 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e09e      	b.n	8000894 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000756:	2201      	movs	r2, #1
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	409a      	lsls	r2, r3
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10d      	bne.n	8000784 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000772:	68f9      	ldr	r1, [r7, #12]
 8000774:	6809      	ldr	r1, [r1, #0]
 8000776:	431a      	orrs	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	3318      	adds	r3, #24
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	440b      	add	r3, r1
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	e00f      	b.n	80007a4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800078e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000794:	68f9      	ldr	r1, [r7, #12]
 8000796:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000798:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3318      	adds	r3, #24
 800079e:	011b      	lsls	r3, r3, #4
 80007a0:	440b      	add	r3, r1
 80007a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	6819      	ldr	r1, [r3, #0]
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	691a      	ldr	r2, [r3, #16]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	3318      	adds	r3, #24
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	440b      	add	r3, r1
 80007b4:	3304      	adds	r3, #4
 80007b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	7d1b      	ldrb	r3, [r3, #20]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d111      	bne.n	80007e4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3318      	adds	r3, #24
 80007c8:	011b      	lsls	r3, r3, #4
 80007ca:	4413      	add	r3, r2
 80007cc:	3304      	adds	r3, #4
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	6811      	ldr	r1, [r2, #0]
 80007d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3318      	adds	r3, #24
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	440b      	add	r3, r1
 80007e0:	3304      	adds	r3, #4
 80007e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3307      	adds	r3, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	061a      	lsls	r2, r3, #24
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3306      	adds	r3, #6
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	041b      	lsls	r3, r3, #16
 80007f4:	431a      	orrs	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3305      	adds	r3, #5
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	4313      	orrs	r3, r2
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	3204      	adds	r2, #4
 8000804:	7812      	ldrb	r2, [r2, #0]
 8000806:	4610      	mov	r0, r2
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	6811      	ldr	r1, [r2, #0]
 800080c:	ea43 0200 	orr.w	r2, r3, r0
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	440b      	add	r3, r1
 8000816:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800081a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3303      	adds	r3, #3
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	061a      	lsls	r2, r3, #24
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3302      	adds	r3, #2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	041b      	lsls	r3, r3, #16
 800082c:	431a      	orrs	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3301      	adds	r3, #1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	4313      	orrs	r3, r2
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	4610      	mov	r0, r2
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	6811      	ldr	r1, [r2, #0]
 8000842:	ea43 0200 	orr.w	r2, r3, r0
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	011b      	lsls	r3, r3, #4
 800084a:	440b      	add	r3, r1
 800084c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000850:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3318      	adds	r3, #24
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	4413      	add	r3, r2
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	6811      	ldr	r1, [r2, #0]
 8000864:	f043 0201 	orr.w	r2, r3, #1
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3318      	adds	r3, #24
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	440b      	add	r3, r1
 8000870:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e00e      	b.n	8000894 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e006      	b.n	8000894 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
  }
}
 8000894:	4618      	mov	r0, r3
 8000896:	3724      	adds	r7, #36	; 0x24
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008b2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80008b4:	7afb      	ldrb	r3, [r7, #11]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d002      	beq.n	80008c0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80008ba:	7afb      	ldrb	r3, [r7, #11]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d11d      	bne.n	80008fc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3301      	adds	r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3301      	adds	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80008fc:	68fb      	ldr	r3, [r7, #12]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800090a:	b480      	push	{r7}
 800090c:	b087      	sub	sp, #28
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800091e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000920:	7dfb      	ldrb	r3, [r7, #23]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d003      	beq.n	800092e <HAL_CAN_GetRxMessage+0x24>
 8000926:	7dfb      	ldrb	r3, [r7, #23]
 8000928:	2b02      	cmp	r3, #2
 800092a:	f040 80f4 	bne.w	8000b16 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10e      	bne.n	8000952 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	f003 0303 	and.w	r3, r3, #3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d116      	bne.n	8000970 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e0e8      	b.n	8000b24 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000964:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e0d9      	b.n	8000b24 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	331b      	adds	r3, #27
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	4413      	add	r3, r2
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 0204 	and.w	r2, r3, #4
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10c      	bne.n	80009a8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	331b      	adds	r3, #27
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	4413      	add	r3, r2
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	0d5b      	lsrs	r3, r3, #21
 800099e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	e00b      	b.n	80009c0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	331b      	adds	r3, #27
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	4413      	add	r3, r2
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	331b      	adds	r3, #27
 80009c8:	011b      	lsls	r3, r3, #4
 80009ca:	4413      	add	r3, r2
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	085b      	lsrs	r3, r3, #1
 80009d0:	f003 0201 	and.w	r2, r3, #1
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	331b      	adds	r3, #27
 80009e0:	011b      	lsls	r3, r3, #4
 80009e2:	4413      	add	r3, r2
 80009e4:	3304      	adds	r3, #4
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 020f 	and.w	r2, r3, #15
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	331b      	adds	r3, #27
 80009f8:	011b      	lsls	r3, r3, #4
 80009fa:	4413      	add	r3, r2
 80009fc:	3304      	adds	r3, #4
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	331b      	adds	r3, #27
 8000a10:	011b      	lsls	r3, r3, #4
 8000a12:	4413      	add	r3, r2
 8000a14:	3304      	adds	r3, #4
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	0c1b      	lsrs	r3, r3, #16
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	4413      	add	r3, r2
 8000a2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	4413      	add	r3, r2
 8000a40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	0a1a      	lsrs	r2, r3, #8
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	4413      	add	r3, r2
 8000a5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	0c1a      	lsrs	r2, r3, #16
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	3302      	adds	r3, #2
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	011b      	lsls	r3, r3, #4
 8000a72:	4413      	add	r3, r2
 8000a74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	0e1a      	lsrs	r2, r3, #24
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	3303      	adds	r3, #3
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	011b      	lsls	r3, r3, #4
 8000a8c:	4413      	add	r3, r2
 8000a8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	3304      	adds	r3, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	4413      	add	r3, r2
 8000aa6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	0a1a      	lsrs	r2, r3, #8
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	3305      	adds	r3, #5
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	4413      	add	r3, r2
 8000ac0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	0c1a      	lsrs	r2, r3, #16
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	3306      	adds	r3, #6
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	4413      	add	r3, r2
 8000ada:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	0e1a      	lsrs	r2, r3, #24
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	3307      	adds	r3, #7
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d108      	bne.n	8000b02 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	68da      	ldr	r2, [r3, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f042 0220 	orr.w	r2, r2, #32
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	e007      	b.n	8000b12 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	691a      	ldr	r2, [r3, #16]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f042 0220 	orr.w	r2, r2, #32
 8000b10:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e006      	b.n	8000b24 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
  }
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b40:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d002      	beq.n	8000b4e <HAL_CAN_ActivateNotification+0x1e>
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d109      	bne.n	8000b62 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6959      	ldr	r1, [r3, #20]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e006      	b.n	8000b70 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
  }
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d07c      	beq.n	8000cbc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d023      	beq.n	8000c14 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 f97d 	bl	8000ede <HAL_CAN_TxMailbox0CompleteCallback>
 8000be4:	e016      	b.n	8000c14 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf8:	e00c      	b.n	8000c14 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d004      	beq.n	8000c0e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c0c:	e002      	b.n	8000c14 <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 f983 	bl	8000f1a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d024      	beq.n	8000c68 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f95d 	bl	8000ef2 <HAL_CAN_TxMailbox1CompleteCallback>
 8000c38:	e016      	b.n	8000c68 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d004      	beq.n	8000c4e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4c:	e00c      	b.n	8000c68 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d004      	beq.n	8000c62 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	e002      	b.n	8000c68 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f000 f963 	bl	8000f2e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d024      	beq.n	8000cbc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 f93d 	bl	8000f06 <HAL_CAN_TxMailbox2CompleteCallback>
 8000c8c:	e016      	b.n	8000cbc <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d004      	beq.n	8000ca2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca0:	e00c      	b.n	8000cbc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d004      	beq.n	8000cb6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cb4:	e002      	b.n	8000cbc <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 f943 	bl	8000f42 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00c      	beq.n	8000ce0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f003 0310 	and.w	r3, r3, #16
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d007      	beq.n	8000ce0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2210      	movs	r2, #16
 8000cde:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00b      	beq.n	8000d02 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d006      	beq.n	8000d02 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2208      	movs	r2, #8
 8000cfa:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f92a 	bl	8000f56 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d009      	beq.n	8000d20 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f002 f8a4 	bl	8002e68 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00c      	beq.n	8000d44 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d007      	beq.n	8000d44 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2210      	movs	r2, #16
 8000d42:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00b      	beq.n	8000d66 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 f90c 	bl	8000f7e <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d009      	beq.n	8000d84 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f8f3 	bl	8000f6a <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00b      	beq.n	8000da6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d006      	beq.n	8000da6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 f8f6 	bl	8000f92 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d00b      	beq.n	8000dc8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d006      	beq.n	8000dc8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f8ef 	bl	8000fa6 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d075      	beq.n	8000ebe <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d06c      	beq.n	8000eb6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d008      	beq.n	8000df8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d008      	beq.n	8000e14 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d008      	beq.n	8000e30 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d03d      	beq.n	8000eb6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d038      	beq.n	8000eb6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e4a:	2b30      	cmp	r3, #48	; 0x30
 8000e4c:	d017      	beq.n	8000e7e <HAL_CAN_IRQHandler+0x302>
 8000e4e:	2b30      	cmp	r3, #48	; 0x30
 8000e50:	d804      	bhi.n	8000e5c <HAL_CAN_IRQHandler+0x2e0>
 8000e52:	2b10      	cmp	r3, #16
 8000e54:	d009      	beq.n	8000e6a <HAL_CAN_IRQHandler+0x2ee>
 8000e56:	2b20      	cmp	r3, #32
 8000e58:	d00c      	beq.n	8000e74 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000e5a:	e024      	b.n	8000ea6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000e5c:	2b50      	cmp	r3, #80	; 0x50
 8000e5e:	d018      	beq.n	8000e92 <HAL_CAN_IRQHandler+0x316>
 8000e60:	2b60      	cmp	r3, #96	; 0x60
 8000e62:	d01b      	beq.n	8000e9c <HAL_CAN_IRQHandler+0x320>
 8000e64:	2b40      	cmp	r3, #64	; 0x40
 8000e66:	d00f      	beq.n	8000e88 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000e68:	e01d      	b.n	8000ea6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e72:	e018      	b.n	8000ea6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e7c:	e013      	b.n	8000ea6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e86:	e00e      	b.n	8000ea6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e90:	e009      	b.n	8000ea6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e9a:	e004      	b.n	8000ea6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ea4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	699a      	ldr	r2, [r3, #24]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000eb4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2204      	movs	r2, #4
 8000ebc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d008      	beq.n	8000ed6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f872 	bl	8000fba <HAL_CAN_ErrorCallback>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <NVIC_EnableIRQ+0x30>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	da0b      	bge.n	8001094 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <NVIC_SetPriority+0x4c>)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 030f 	and.w	r3, r3, #15
 8001088:	3b04      	subs	r3, #4
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001092:	e009      	b.n	80010a8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <NVIC_SetPriority+0x50>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	e000e100 	.word	0xe000e100

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff2d 	bl	8000fd0 <NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff42 	bl	8001018 <NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff8e 	bl	80010bc <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff35 	bl	8001034 <NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffa2 	bl	8001124 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001202:	e14e      	b.n	80014a2 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8140 	beq.w	800149c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x40>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b12      	cmp	r3, #18
 800122a:	d123      	bne.n	8001274 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	6939      	ldr	r1, [r7, #16]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d00b      	beq.n	80012c8 <HAL_GPIO_Init+0xdc>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d007      	beq.n	80012c8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012bc:	2b11      	cmp	r3, #17
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b12      	cmp	r3, #18
 80012c6:	d130      	bne.n	800132a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fe:	2201      	movs	r2, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f003 0201 	and.w	r2, r3, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 809a 	beq.w	800149c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001368:	4b55      	ldr	r3, [pc, #340]	; (80014c0 <HAL_GPIO_Init+0x2d4>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a54      	ldr	r2, [pc, #336]	; (80014c0 <HAL_GPIO_Init+0x2d4>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b52      	ldr	r3, [pc, #328]	; (80014c0 <HAL_GPIO_Init+0x2d4>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001380:	4a50      	ldr	r2, [pc, #320]	; (80014c4 <HAL_GPIO_Init+0x2d8>)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013aa:	d013      	beq.n	80013d4 <HAL_GPIO_Init+0x1e8>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a46      	ldr	r2, [pc, #280]	; (80014c8 <HAL_GPIO_Init+0x2dc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d00d      	beq.n	80013d0 <HAL_GPIO_Init+0x1e4>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a45      	ldr	r2, [pc, #276]	; (80014cc <HAL_GPIO_Init+0x2e0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d007      	beq.n	80013cc <HAL_GPIO_Init+0x1e0>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a44      	ldr	r2, [pc, #272]	; (80014d0 <HAL_GPIO_Init+0x2e4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_GPIO_Init+0x1dc>
 80013c4:	2303      	movs	r3, #3
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x1ea>
 80013c8:	2305      	movs	r3, #5
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x1ea>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x1ea>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x1ea>
 80013d4:	2300      	movs	r3, #0
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4093      	lsls	r3, r2
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013e6:	4937      	ldr	r1, [pc, #220]	; (80014c4 <HAL_GPIO_Init+0x2d8>)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f4:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001418:	4a2e      	ldr	r2, [pc, #184]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001442:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001496:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f47f aea9 	bne.w	8001204 <HAL_GPIO_Init+0x18>
  }
}
 80014b2:	bf00      	nop
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000800 	.word	0x48000800
 80014d0:	48000c00 	.word	0x48000c00
 80014d4:	40010400 	.word	0x40010400

080014d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
 80014e4:	4613      	mov	r3, r2
 80014e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e8:	787b      	ldrb	r3, [r7, #1]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	405a      	eors	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	615a      	str	r2, [r3, #20]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001532:	af00      	add	r7, sp, #0
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	f000 beda 	b.w	80022fa <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 816e 	beq.w	8001832 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001556:	4bb5      	ldr	r3, [pc, #724]	; (800182c <HAL_RCC_OscConfig+0x300>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b04      	cmp	r3, #4
 8001560:	d00c      	beq.n	800157c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001562:	4bb2      	ldr	r3, [pc, #712]	; (800182c <HAL_RCC_OscConfig+0x300>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b08      	cmp	r3, #8
 800156c:	d15a      	bne.n	8001624 <HAL_RCC_OscConfig+0xf8>
 800156e:	4baf      	ldr	r3, [pc, #700]	; (800182c <HAL_RCC_OscConfig+0x300>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157a:	d153      	bne.n	8001624 <HAL_RCC_OscConfig+0xf8>
 800157c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001580:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001588:	fa93 f3a3 	rbit	r3, r3
 800158c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001590:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d102      	bne.n	80015ae <HAL_RCC_OscConfig+0x82>
 80015a8:	4ba0      	ldr	r3, [pc, #640]	; (800182c <HAL_RCC_OscConfig+0x300>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e015      	b.n	80015da <HAL_RCC_OscConfig+0xae>
 80015ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80015c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015ca:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015d6:	4b95      	ldr	r3, [pc, #596]	; (800182c <HAL_RCC_OscConfig+0x300>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015de:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80015e2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80015e6:	fa92 f2a2 	rbit	r2, r2
 80015ea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80015ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015f2:	fab2 f282 	clz	r2, r2
 80015f6:	b252      	sxtb	r2, r2
 80015f8:	f042 0220 	orr.w	r2, r2, #32
 80015fc:	b252      	sxtb	r2, r2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f002 021f 	and.w	r2, r2, #31
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 810f 	beq.w	8001830 <HAL_RCC_OscConfig+0x304>
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f040 8109 	bne.w	8001830 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	f000 be6b 	b.w	80022fa <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x112>
 8001630:	4b7e      	ldr	r3, [pc, #504]	; (800182c <HAL_RCC_OscConfig+0x300>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a7d      	ldr	r2, [pc, #500]	; (800182c <HAL_RCC_OscConfig+0x300>)
 8001636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	e030      	b.n	80016a0 <HAL_RCC_OscConfig+0x174>
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10c      	bne.n	8001662 <HAL_RCC_OscConfig+0x136>
 8001648:	4b78      	ldr	r3, [pc, #480]	; (800182c <HAL_RCC_OscConfig+0x300>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a77      	ldr	r2, [pc, #476]	; (800182c <HAL_RCC_OscConfig+0x300>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b75      	ldr	r3, [pc, #468]	; (800182c <HAL_RCC_OscConfig+0x300>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a74      	ldr	r2, [pc, #464]	; (800182c <HAL_RCC_OscConfig+0x300>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	e01e      	b.n	80016a0 <HAL_RCC_OscConfig+0x174>
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x15c>
 800166e:	4b6f      	ldr	r3, [pc, #444]	; (800182c <HAL_RCC_OscConfig+0x300>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6e      	ldr	r2, [pc, #440]	; (800182c <HAL_RCC_OscConfig+0x300>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b6c      	ldr	r3, [pc, #432]	; (800182c <HAL_RCC_OscConfig+0x300>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6b      	ldr	r2, [pc, #428]	; (800182c <HAL_RCC_OscConfig+0x300>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0x174>
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <HAL_RCC_OscConfig+0x300>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a67      	ldr	r2, [pc, #412]	; (800182c <HAL_RCC_OscConfig+0x300>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b65      	ldr	r3, [pc, #404]	; (800182c <HAL_RCC_OscConfig+0x300>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a64      	ldr	r2, [pc, #400]	; (800182c <HAL_RCC_OscConfig+0x300>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016a0:	4b62      	ldr	r3, [pc, #392]	; (800182c <HAL_RCC_OscConfig+0x300>)
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	f023 020f 	bic.w	r2, r3, #15
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	495f      	ldr	r1, [pc, #380]	; (800182c <HAL_RCC_OscConfig+0x300>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d05a      	beq.n	8001774 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7fe fddd 	bl	800027c <HAL_GetTick>
 80016c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	e00a      	b.n	80016de <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c8:	f7fe fdd8 	bl	800027c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	d902      	bls.n	80016de <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	f000 be0e 	b.w	80022fa <HAL_RCC_OscConfig+0xdce>
 80016de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80016f2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	095b      	lsrs	r3, r3, #5
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d102      	bne.n	8001710 <HAL_RCC_OscConfig+0x1e4>
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <HAL_RCC_OscConfig+0x300>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	e015      	b.n	800173c <HAL_RCC_OscConfig+0x210>
 8001710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001714:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001728:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800172c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001738:	4b3c      	ldr	r3, [pc, #240]	; (800182c <HAL_RCC_OscConfig+0x300>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001740:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001744:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001748:	fa92 f2a2 	rbit	r2, r2
 800174c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001750:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001754:	fab2 f282 	clz	r2, r2
 8001758:	b252      	sxtb	r2, r2
 800175a:	f042 0220 	orr.w	r2, r2, #32
 800175e:	b252      	sxtb	r2, r2
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f002 021f 	and.w	r2, r2, #31
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0aa      	beq.n	80016c8 <HAL_RCC_OscConfig+0x19c>
 8001772:	e05e      	b.n	8001832 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7fe fd82 	bl	800027c <HAL_GetTick>
 8001778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177e:	f7fe fd7d 	bl	800027c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d902      	bls.n	8001794 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	f000 bdb3 	b.w	80022fa <HAL_RCC_OscConfig+0xdce>
 8001794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001798:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80017a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d102      	bne.n	80017c6 <HAL_RCC_OscConfig+0x29a>
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_RCC_OscConfig+0x300>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x2c6>
 80017c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80017da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_RCC_OscConfig+0x300>)
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80017fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80017fe:	fa92 f2a2 	rbit	r2, r2
 8001802:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001806:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800180a:	fab2 f282 	clz	r2, r2
 800180e:	b252      	sxtb	r2, r2
 8001810:	f042 0220 	orr.w	r2, r2, #32
 8001814:	b252      	sxtb	r2, r2
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1aa      	bne.n	800177e <HAL_RCC_OscConfig+0x252>
 8001828:	e003      	b.n	8001832 <HAL_RCC_OscConfig+0x306>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8170 	beq.w	8001b22 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001842:	4bd0      	ldr	r3, [pc, #832]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800184e:	4bcd      	ldr	r3, [pc, #820]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d16d      	bne.n	8001936 <HAL_RCC_OscConfig+0x40a>
 800185a:	4bca      	ldr	r3, [pc, #808]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d167      	bne.n	8001936 <HAL_RCC_OscConfig+0x40a>
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001878:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d102      	bne.n	8001896 <HAL_RCC_OscConfig+0x36a>
 8001890:	4bbc      	ldr	r3, [pc, #752]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	e013      	b.n	80018be <HAL_RCC_OscConfig+0x392>
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80018ae:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80018ba:	4bb2      	ldr	r3, [pc, #712]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	2202      	movs	r2, #2
 80018c0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80018c4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80018c8:	fa92 f2a2 	rbit	r2, r2
 80018cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80018d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018d4:	fab2 f282 	clz	r2, r2
 80018d8:	b252      	sxtb	r2, r2
 80018da:	f042 0220 	orr.w	r2, r2, #32
 80018de:	b252      	sxtb	r2, r2
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	f002 021f 	and.w	r2, r2, #31
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_RCC_OscConfig+0x3d6>
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d002      	beq.n	8001902 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	f000 bcfc 	b.w	80022fa <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	4ba0      	ldr	r3, [pc, #640]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6959      	ldr	r1, [r3, #20]
 8001910:	23f8      	movs	r3, #248	; 0xf8
 8001912:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001922:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	4995      	ldr	r1, [pc, #596]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001934:	e0f5      	b.n	8001b22 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8085 	beq.w	8001a4c <HAL_RCC_OscConfig+0x520>
 8001942:	2301      	movs	r3, #1
 8001944:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001954:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001960:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	461a      	mov	r2, r3
 8001968:	2301      	movs	r3, #1
 800196a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7fe fc86 	bl	800027c <HAL_GetTick>
 8001970:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001976:	f7fe fc81 	bl	800027c <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d902      	bls.n	800198c <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	f000 bcb7 	b.w	80022fa <HAL_RCC_OscConfig+0xdce>
 800198c:	2302      	movs	r3, #2
 800198e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800199e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	095b      	lsrs	r3, r3, #5
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d102      	bne.n	80019bc <HAL_RCC_OscConfig+0x490>
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	e013      	b.n	80019e4 <HAL_RCC_OscConfig+0x4b8>
 80019bc:	2302      	movs	r3, #2
 80019be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80019ce:	2302      	movs	r3, #2
 80019d0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019d4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019e0:	4b68      	ldr	r3, [pc, #416]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2202      	movs	r2, #2
 80019e6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80019ea:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80019ee:	fa92 f2a2 	rbit	r2, r2
 80019f2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80019f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019fa:	fab2 f282 	clz	r2, r2
 80019fe:	b252      	sxtb	r2, r2
 8001a00:	f042 0220 	orr.w	r2, r2, #32
 8001a04:	b252      	sxtb	r2, r2
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	f002 021f 	and.w	r2, r2, #31
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0ae      	beq.n	8001976 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6959      	ldr	r1, [r3, #20]
 8001a26:	23f8      	movs	r3, #248	; 0xf8
 8001a28:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001a38:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	494f      	ldr	r1, [pc, #316]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
 8001a4a:	e06a      	b.n	8001b22 <HAL_RCC_OscConfig+0x5f6>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001a5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	461a      	mov	r2, r3
 8001a72:	2300      	movs	r3, #0
 8001a74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7fe fc01 	bl	800027c <HAL_GetTick>
 8001a7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a80:	f7fe fbfc 	bl	800027c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d902      	bls.n	8001a96 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	f000 bc32 	b.w	80022fa <HAL_RCC_OscConfig+0xdce>
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001aa8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d102      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x59a>
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	e013      	b.n	8001aee <HAL_RCC_OscConfig+0x5c2>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001ad8:	2302      	movs	r3, #2
 8001ada:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ade:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x658>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	2202      	movs	r2, #2
 8001af0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001af4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001af8:	fa92 f2a2 	rbit	r2, r2
 8001afc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001b00:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b04:	fab2 f282 	clz	r2, r2
 8001b08:	b252      	sxtb	r2, r2
 8001b0a:	f042 0220 	orr.w	r2, r2, #32
 8001b0e:	b252      	sxtb	r2, r2
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	f002 021f 	and.w	r2, r2, #31
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1ae      	bne.n	8001a80 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80d8 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d067      	beq.n	8001c0c <HAL_RCC_OscConfig+0x6e0>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001b4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_OscConfig+0x65c>)
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2301      	movs	r3, #1
 8001b62:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7fe fb8a 	bl	800027c <HAL_GetTick>
 8001b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6c:	e00e      	b.n	8001b8c <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7fe fb85 	bl	800027c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d906      	bls.n	8001b8c <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e3bb      	b.n	80022fa <HAL_RCC_OscConfig+0xdce>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	10908120 	.word	0x10908120
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001bc8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	4ba5      	ldr	r3, [pc, #660]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	6019      	str	r1, [r3, #0]
 8001bd6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f1a3 	rbit	r1, r3
 8001be0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001be4:	6019      	str	r1, [r3, #0]
  return(result);
 8001be6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bf6:	b25b      	sxtb	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	2101      	movs	r1, #1
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0b1      	beq.n	8001b6e <HAL_RCC_OscConfig+0x642>
 8001c0a:	e06a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x7b6>
 8001c0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fa93 f2a3 	rbit	r2, r3
 8001c1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c22:	601a      	str	r2, [r3, #0]
  return(result);
 8001c24:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c28:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b8c      	ldr	r3, [pc, #560]	; (8001e64 <HAL_RCC_OscConfig+0x938>)
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	461a      	mov	r2, r3
 8001c38:	2300      	movs	r3, #0
 8001c3a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7fe fb1e 	bl	800027c <HAL_GetTick>
 8001c40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	e009      	b.n	8001c5a <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c46:	f7fe fb19 	bl	800027c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e34f      	b.n	80022fa <HAL_RCC_OscConfig+0xdce>
 8001c5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c5e:	2202      	movs	r2, #2
 8001c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f2a3 	rbit	r2, r3
 8001c6c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c76:	2202      	movs	r2, #2
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c8e:	2202      	movs	r2, #2
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ca0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca2:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001caa:	2102      	movs	r1, #2
 8001cac:	6019      	str	r1, [r3, #0]
 8001cae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fa93 f1a3 	rbit	r1, r3
 8001cb8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001cbc:	6019      	str	r1, [r3, #0]
  return(result);
 8001cbe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1b1      	bne.n	8001c46 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8159 	beq.w	8001fa4 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf8:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d112      	bne.n	8001d2a <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	4a55      	ldr	r2, [pc, #340]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	61d3      	str	r3, [r2, #28]
 8001d10:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <HAL_RCC_OscConfig+0x93c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d11a      	bne.n	8001d6c <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d36:	4b4c      	ldr	r3, [pc, #304]	; (8001e68 <HAL_RCC_OscConfig+0x93c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a4b      	ldr	r2, [pc, #300]	; (8001e68 <HAL_RCC_OscConfig+0x93c>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7fe fa9b 	bl	800027c <HAL_GetTick>
 8001d46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	e009      	b.n	8001d60 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4c:	f7fe fa96 	bl	800027c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b64      	cmp	r3, #100	; 0x64
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e2cc      	b.n	80022fa <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <HAL_RCC_OscConfig+0x93c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0ef      	beq.n	8001d4c <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d106      	bne.n	8001d84 <HAL_RCC_OscConfig+0x858>
 8001d76:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a39      	ldr	r2, [pc, #228]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	e02f      	b.n	8001de4 <HAL_RCC_OscConfig+0x8b8>
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x87c>
 8001d8e:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a33      	ldr	r2, [pc, #204]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6213      	str	r3, [r2, #32]
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001da0:	f023 0304 	bic.w	r3, r3, #4
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	e01d      	b.n	8001de4 <HAL_RCC_OscConfig+0x8b8>
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x8a0>
 8001db2:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a2a      	ldr	r2, [pc, #168]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0x8b8>
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d06b      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7fe fa45 	bl	800027c <HAL_GetTick>
 8001df2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7fe fa40 	bl	800027c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e274      	b.n	80022fa <HAL_RCC_OscConfig+0xdce>
 8001e10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e14:	2202      	movs	r2, #2
 8001e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e3e:	601a      	str	r2, [r3, #0]
  return(result);
 8001e40:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d108      	bne.n	8001e6c <HAL_RCC_OscConfig+0x940>
 8001e5a:	4b01      	ldr	r3, [pc, #4]	; (8001e60 <HAL_RCC_OscConfig+0x934>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	e013      	b.n	8001e88 <HAL_RCC_OscConfig+0x95c>
 8001e60:	40021000 	.word	0x40021000
 8001e64:	10908120 	.word	0x10908120
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e70:	2202      	movs	r2, #2
 8001e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	fa93 f2a3 	rbit	r2, r3
 8001e7e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	4bbb      	ldr	r3, [pc, #748]	; (8002174 <HAL_RCC_OscConfig+0xc48>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	6011      	str	r1, [r2, #0]
 8001e90:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	fa92 f1a2 	rbit	r1, r2
 8001e9a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e9e:	6011      	str	r1, [r2, #0]
  return(result);
 8001ea0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	fab2 f282 	clz	r2, r2
 8001eaa:	b252      	sxtb	r2, r2
 8001eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb0:	b252      	sxtb	r2, r2
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f002 021f 	and.w	r2, r2, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d099      	beq.n	8001df8 <HAL_RCC_OscConfig+0x8cc>
 8001ec4:	e064      	b.n	8001f90 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe f9d9 	bl	800027c <HAL_GetTick>
 8001eca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7fe f9d4 	bl	800027c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e208      	b.n	80022fa <HAL_RCC_OscConfig+0xdce>
 8001ee8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eec:	2202      	movs	r2, #2
 8001eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f04:	2202      	movs	r2, #2
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f16:	601a      	str	r2, [r3, #0]
  return(result);
 8001f18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_OscConfig+0xa0c>
 8001f32:	4b90      	ldr	r3, [pc, #576]	; (8002174 <HAL_RCC_OscConfig+0xc48>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	e00d      	b.n	8001f54 <HAL_RCC_OscConfig+0xa28>
 8001f38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	4b88      	ldr	r3, [pc, #544]	; (8002174 <HAL_RCC_OscConfig+0xc48>)
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f58:	2102      	movs	r1, #2
 8001f5a:	6011      	str	r1, [r2, #0]
 8001f5c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	fa92 f1a2 	rbit	r1, r2
 8001f66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f6a:	6011      	str	r1, [r2, #0]
  return(result);
 8001f6c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	fab2 f282 	clz	r2, r2
 8001f76:	b252      	sxtb	r2, r2
 8001f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f7c:	b252      	sxtb	r2, r2
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f002 021f 	and.w	r2, r2, #31
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d19f      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f90:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f98:	4b76      	ldr	r3, [pc, #472]	; (8002174 <HAL_RCC_OscConfig+0xc48>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	4a75      	ldr	r2, [pc, #468]	; (8002174 <HAL_RCC_OscConfig+0xc48>)
 8001f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 81a4 	beq.w	80022f8 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb0:	4b70      	ldr	r3, [pc, #448]	; (8002174 <HAL_RCC_OscConfig+0xc48>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	f000 819b 	beq.w	80022f4 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	f040 8113 	bne.w	80021f0 <HAL_RCC_OscConfig+0xcc4>
 8001fca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001fce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fe2:	601a      	str	r2, [r3, #0]
  return(result);
 8001fe4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fe8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ff2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7fe f93d 	bl	800027c <HAL_GetTick>
 8002002:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002006:	e009      	b.n	800201c <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002008:	f7fe f938 	bl	800027c <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e16e      	b.n	80022fa <HAL_RCC_OscConfig+0xdce>
 800201c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	fa93 f2a3 	rbit	r2, r3
 8002030:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002034:	601a      	str	r2, [r3, #0]
  return(result);
 8002036:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800203a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d102      	bne.n	8002056 <HAL_RCC_OscConfig+0xb2a>
 8002050:	4b48      	ldr	r3, [pc, #288]	; (8002174 <HAL_RCC_OscConfig+0xc48>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	e01b      	b.n	800208e <HAL_RCC_OscConfig+0xb62>
 8002056:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800205a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800205e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <HAL_RCC_OscConfig+0xc48>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002092:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002096:	6011      	str	r1, [r2, #0]
 8002098:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	fa92 f1a2 	rbit	r1, r2
 80020a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020a6:	6011      	str	r1, [r2, #0]
  return(result);
 80020a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b252      	sxtb	r2, r2
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	b252      	sxtb	r2, r2
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	f002 021f 	and.w	r2, r2, #31
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f202 	lsl.w	r2, r1, r2
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d19d      	bne.n	8002008 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_RCC_OscConfig+0xc48>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	4924      	ldr	r1, [pc, #144]	; (8002174 <HAL_RCC_OscConfig+0xc48>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
 80020e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002100:	601a      	str	r2, [r3, #0]
  return(result);
 8002102:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002106:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002110:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	461a      	mov	r2, r3
 8002118:	2301      	movs	r3, #1
 800211a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe f8ae 	bl	800027c <HAL_GetTick>
 8002120:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002124:	e009      	b.n	800213a <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002126:	f7fe f8a9 	bl	800027c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e0df      	b.n	80022fa <HAL_RCC_OscConfig+0xdce>
 800213a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800213e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	fa93 f2a3 	rbit	r2, r3
 800214e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002152:	601a      	str	r2, [r3, #0]
  return(result);
 8002154:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002158:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d104      	bne.n	8002178 <HAL_RCC_OscConfig+0xc4c>
 800216e:	4b01      	ldr	r3, [pc, #4]	; (8002174 <HAL_RCC_OscConfig+0xc48>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xc84>
 8002174:	40021000 	.word	0x40021000
 8002178:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800217c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002196:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	fa93 f2a3 	rbit	r2, r3
 80021a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	4b55      	ldr	r3, [pc, #340]	; (8002304 <HAL_RCC_OscConfig+0xdd8>)
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80021b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021b8:	6011      	str	r1, [r2, #0]
 80021ba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	fa92 f1a2 	rbit	r1, r2
 80021c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021c8:	6011      	str	r1, [r2, #0]
  return(result);
 80021ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	fab2 f282 	clz	r2, r2
 80021d4:	b252      	sxtb	r2, r2
 80021d6:	f042 0220 	orr.w	r2, r2, #32
 80021da:	b252      	sxtb	r2, r2
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	f002 021f 	and.w	r2, r2, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d09b      	beq.n	8002126 <HAL_RCC_OscConfig+0xbfa>
 80021ee:	e083      	b.n	80022f8 <HAL_RCC_OscConfig+0xdcc>
 80021f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	fa93 f2a3 	rbit	r2, r3
 8002204:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002208:	601a      	str	r2, [r3, #0]
  return(result);
 800220a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800220e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002218:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	461a      	mov	r2, r3
 8002220:	2300      	movs	r3, #0
 8002222:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe f82a 	bl	800027c <HAL_GetTick>
 8002228:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222c:	e009      	b.n	8002242 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222e:	f7fe f825 	bl	800027c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e05b      	b.n	80022fa <HAL_RCC_OscConfig+0xdce>
 8002242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002246:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800224a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	fa93 f2a3 	rbit	r2, r3
 8002256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800225a:	601a      	str	r2, [r3, #0]
  return(result);
 800225c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002260:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d102      	bne.n	800227c <HAL_RCC_OscConfig+0xd50>
 8002276:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_RCC_OscConfig+0xdd8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	e01b      	b.n	80022b4 <HAL_RCC_OscConfig+0xd88>
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f107 0320 	add.w	r3, r7, #32
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f107 0318 	add.w	r3, r7, #24
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_RCC_OscConfig+0xdd8>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	f107 0214 	add.w	r2, r7, #20
 80022b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022bc:	6011      	str	r1, [r2, #0]
 80022be:	f107 0214 	add.w	r2, r7, #20
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	fa92 f1a2 	rbit	r1, r2
 80022c8:	f107 0210 	add.w	r2, r7, #16
 80022cc:	6011      	str	r1, [r2, #0]
  return(result);
 80022ce:	f107 0210 	add.w	r2, r7, #16
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b252      	sxtb	r2, r2
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	b252      	sxtb	r2, r2
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f002 021f 	and.w	r2, r2, #31
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d19d      	bne.n	800222e <HAL_RCC_OscConfig+0xd02>
 80022f2:	e001      	b.n	80022f8 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000

08002308 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b09e      	sub	sp, #120	; 0x78
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e164      	b.n	80025ea <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b92      	ldr	r3, [pc, #584]	; (800256c <HAL_RCC_ClockConfig+0x264>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d910      	bls.n	8002350 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b8f      	ldr	r3, [pc, #572]	; (800256c <HAL_RCC_ClockConfig+0x264>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 0207 	bic.w	r2, r3, #7
 8002336:	498d      	ldr	r1, [pc, #564]	; (800256c <HAL_RCC_ClockConfig+0x264>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b8b      	ldr	r3, [pc, #556]	; (800256c <HAL_RCC_ClockConfig+0x264>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e14c      	b.n	80025ea <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235c:	4b84      	ldr	r3, [pc, #528]	; (8002570 <HAL_RCC_ClockConfig+0x268>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4981      	ldr	r1, [pc, #516]	; (8002570 <HAL_RCC_ClockConfig+0x268>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80df 	beq.w	800253a <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d13d      	bne.n	8002400 <HAL_RCC_ClockConfig+0xf8>
 8002384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002388:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d102      	bne.n	80023ae <HAL_RCC_ClockConfig+0xa6>
 80023a8:	4b71      	ldr	r3, [pc, #452]	; (8002570 <HAL_RCC_ClockConfig+0x268>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	e00f      	b.n	80023ce <HAL_RCC_ClockConfig+0xc6>
 80023ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	667b      	str	r3, [r7, #100]	; 0x64
 80023bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c0:	663b      	str	r3, [r7, #96]	; 0x60
 80023c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023ca:	4b69      	ldr	r3, [pc, #420]	; (8002570 <HAL_RCC_ClockConfig+0x268>)
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80023d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023d6:	fa92 f2a2 	rbit	r2, r2
 80023da:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80023dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023de:	fab2 f282 	clz	r2, r2
 80023e2:	b252      	sxtb	r2, r2
 80023e4:	f042 0220 	orr.w	r2, r2, #32
 80023e8:	b252      	sxtb	r2, r2
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f002 021f 	and.w	r2, r2, #31
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d17d      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0f4      	b.n	80025ea <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d13d      	bne.n	8002484 <HAL_RCC_ClockConfig+0x17c>
 8002408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800240c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d102      	bne.n	8002432 <HAL_RCC_ClockConfig+0x12a>
 800242c:	4b50      	ldr	r3, [pc, #320]	; (8002570 <HAL_RCC_ClockConfig+0x268>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	e00f      	b.n	8002452 <HAL_RCC_ClockConfig+0x14a>
 8002432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002436:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	647b      	str	r3, [r7, #68]	; 0x44
 8002440:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002444:	643b      	str	r3, [r7, #64]	; 0x40
 8002446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800244e:	4b48      	ldr	r3, [pc, #288]	; (8002570 <HAL_RCC_ClockConfig+0x268>)
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002456:	63ba      	str	r2, [r7, #56]	; 0x38
 8002458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800245a:	fa92 f2a2 	rbit	r2, r2
 800245e:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002462:	fab2 f282 	clz	r2, r2
 8002466:	b252      	sxtb	r2, r2
 8002468:	f042 0220 	orr.w	r2, r2, #32
 800246c:	b252      	sxtb	r2, r2
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f002 021f 	and.w	r2, r2, #31
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f202 	lsl.w	r2, r1, r2
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d13b      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b2      	b.n	80025ea <HAL_RCC_ClockConfig+0x2e2>
 8002484:	2302      	movs	r3, #2
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_RCC_ClockConfig+0x1a4>
 80024a6:	4b32      	ldr	r3, [pc, #200]	; (8002570 <HAL_RCC_ClockConfig+0x268>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	e00d      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1c0>
 80024ac:	2302      	movs	r3, #2
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
 80024b8:	2302      	movs	r3, #2
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_RCC_ClockConfig+0x268>)
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	2202      	movs	r2, #2
 80024ca:	61ba      	str	r2, [r7, #24]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	fa92 f2a2 	rbit	r2, r2
 80024d2:	617a      	str	r2, [r7, #20]
  return(result);
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	fab2 f282 	clz	r2, r2
 80024da:	b252      	sxtb	r2, r2
 80024dc:	f042 0220 	orr.w	r2, r2, #32
 80024e0:	b252      	sxtb	r2, r2
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	f002 021f 	and.w	r2, r2, #31
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f202 	lsl.w	r2, r1, r2
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e078      	b.n	80025ea <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCC_ClockConfig+0x268>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 0203 	bic.w	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	491a      	ldr	r1, [pc, #104]	; (8002570 <HAL_RCC_ClockConfig+0x268>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800250a:	f7fd feb7 	bl	800027c <HAL_GetTick>
 800250e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002510:	e00a      	b.n	8002528 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002512:	f7fd feb3 	bl	800027c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e060      	b.n	80025ea <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_RCC_ClockConfig+0x268>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 020c 	and.w	r2, r3, #12
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	429a      	cmp	r2, r3
 8002538:	d1eb      	bne.n	8002512 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_RCC_ClockConfig+0x264>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d215      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_RCC_ClockConfig+0x264>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 0207 	bic.w	r2, r3, #7
 8002550:	4906      	ldr	r1, [pc, #24]	; (800256c <HAL_RCC_ClockConfig+0x264>)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <HAL_RCC_ClockConfig+0x264>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d006      	beq.n	8002574 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e03f      	b.n	80025ea <HAL_RCC_ClockConfig+0x2e2>
 800256a:	bf00      	nop
 800256c:	40022000 	.word	0x40022000
 8002570:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_RCC_ClockConfig+0x2ec>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4919      	ldr	r1, [pc, #100]	; (80025f4 <HAL_RCC_ClockConfig+0x2ec>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_RCC_ClockConfig+0x2ec>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4911      	ldr	r1, [pc, #68]	; (80025f4 <HAL_RCC_ClockConfig+0x2ec>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025b2:	f000 f825 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025b6:	4601      	mov	r1, r0
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_RCC_ClockConfig+0x2ec>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025c0:	23f0      	movs	r3, #240	; 0xf0
 80025c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <HAL_RCC_ClockConfig+0x2f0>)
 80025d8:	5cd3      	ldrb	r3, [r2, r3]
 80025da:	fa21 f303 	lsr.w	r3, r1, r3
 80025de:	4a07      	ldr	r2, [pc, #28]	; (80025fc <HAL_RCC_ClockConfig+0x2f4>)
 80025e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fd fe06 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3778      	adds	r7, #120	; 0x78
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08003954 	.word	0x08003954
 80025fc:	20000008 	.word	0x20000008

08002600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b08b      	sub	sp, #44	; 0x2c
 8002604:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b04      	cmp	r3, #4
 8002628:	d002      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x30>
 800262a:	2b08      	cmp	r3, #8
 800262c:	d003      	beq.n	8002636 <HAL_RCC_GetSysClockFreq+0x36>
 800262e:	e03c      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002630:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002632:	623b      	str	r3, [r7, #32]
      break;
 8002634:	e03c      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800263c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002640:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	607b      	str	r3, [r7, #4]
  return(result);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
 8002654:	4a1c      	ldr	r2, [pc, #112]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800265a:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	f003 020f 	and.w	r2, r3, #15
 8002662:	230f      	movs	r3, #15
 8002664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	60fb      	str	r3, [r7, #12]
  return(result);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002688:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
 8002698:	e004      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	623b      	str	r3, [r7, #32]
      break;
 80026a8:	e002      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026ac:	623b      	str	r3, [r7, #32]
      break;
 80026ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b0:	6a3b      	ldr	r3, [r7, #32]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	372c      	adds	r7, #44	; 0x2c
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	007a1200 	.word	0x007a1200
 80026c8:	08003934 	.word	0x08003934
 80026cc:	08003944 	.word	0x08003944
 80026d0:	003d0900 	.word	0x003d0900

080026d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000008 	.word	0x20000008

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026f2:	f7ff ffef 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 80026f6:	4601      	mov	r1, r0
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002700:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002704:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	603b      	str	r3, [r7, #0]
  return(result);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <HAL_RCC_GetPCLK1Freq+0x40>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	08003964 	.word	0x08003964

08002730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002736:	f7ff ffcd 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 800273a:	4601      	mov	r1, r0
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002744:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002748:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	603b      	str	r3, [r7, #0]
  return(result);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <HAL_RCC_GetPCLK2Freq+0x40>)
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	08003964 	.word	0x08003964

08002774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e043      	b.n	800280e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fd92 	bl	80032c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	; 0x24
 80027a4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f8b9 	bl	8002930 <UART_SetConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e022      	b.n	800280e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fa13 	bl	8002bfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027f4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fa9a 	bl	8002d40 <UART_CheckIdleState>
 800280c:	4603      	mov	r3, r0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b088      	sub	sp, #32
 800281a:	af02      	add	r7, sp, #8
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b20      	cmp	r3, #32
 8002834:	d177      	bne.n	8002926 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_UART_Transmit+0x2c>
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e070      	b.n	8002928 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_UART_Transmit+0x3e>
 8002850:	2302      	movs	r3, #2
 8002852:	e069      	b.n	8002928 <HAL_UART_Transmit+0x112>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2221      	movs	r2, #33	; 0x21
 8002866:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800286a:	f7fd fd07 	bl	800027c <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002880:	e034      	b.n	80028ec <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2200      	movs	r2, #0
 800289c:	2180      	movs	r1, #128	; 0x80
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fa97 	bl	8002dd2 <UART_WaitOnFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e03c      	b.n	8002928 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b6:	d111      	bne.n	80028dc <HAL_UART_Transmit+0xc6>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10d      	bne.n	80028dc <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	881a      	ldrh	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d0:	b292      	uxth	r2, r2
 80028d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	3302      	adds	r3, #2
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	e007      	b.n	80028ec <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	60ba      	str	r2, [r7, #8]
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	b292      	uxth	r2, r2
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1c4      	bne.n	8002882 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2200      	movs	r2, #0
 8002900:	2140      	movs	r1, #64	; 0x40
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fa65 	bl	8002dd2 <UART_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e00a      	b.n	8002928 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800293c:	2310      	movs	r3, #16
 800293e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002940:	2300      	movs	r3, #0
 8002942:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002944:	2300      	movs	r3, #0
 8002946:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b9f      	ldr	r3, [pc, #636]	; (8002be8 <UART_SetConfig+0x2b8>)
 800296c:	4013      	ands	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	68f9      	ldr	r1, [r7, #12]
 8002974:	430b      	orrs	r3, r1
 8002976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a8e      	ldr	r2, [pc, #568]	; (8002bec <UART_SetConfig+0x2bc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d121      	bne.n	80029fc <UART_SetConfig+0xcc>
 80029b8:	4b8d      	ldr	r3, [pc, #564]	; (8002bf0 <UART_SetConfig+0x2c0>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d817      	bhi.n	80029f4 <UART_SetConfig+0xc4>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <UART_SetConfig+0x9c>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029e9 	.word	0x080029e9
 80029d4:	080029ef 	.word	0x080029ef
 80029d8:	080029e3 	.word	0x080029e3
 80029dc:	2300      	movs	r3, #0
 80029de:	75fb      	strb	r3, [r7, #23]
 80029e0:	e01e      	b.n	8002a20 <UART_SetConfig+0xf0>
 80029e2:	2302      	movs	r3, #2
 80029e4:	75fb      	strb	r3, [r7, #23]
 80029e6:	e01b      	b.n	8002a20 <UART_SetConfig+0xf0>
 80029e8:	2304      	movs	r3, #4
 80029ea:	75fb      	strb	r3, [r7, #23]
 80029ec:	e018      	b.n	8002a20 <UART_SetConfig+0xf0>
 80029ee:	2308      	movs	r3, #8
 80029f0:	75fb      	strb	r3, [r7, #23]
 80029f2:	e015      	b.n	8002a20 <UART_SetConfig+0xf0>
 80029f4:	2310      	movs	r3, #16
 80029f6:	75fb      	strb	r3, [r7, #23]
 80029f8:	bf00      	nop
 80029fa:	e011      	b.n	8002a20 <UART_SetConfig+0xf0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a7c      	ldr	r2, [pc, #496]	; (8002bf4 <UART_SetConfig+0x2c4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d102      	bne.n	8002a0c <UART_SetConfig+0xdc>
 8002a06:	2300      	movs	r3, #0
 8002a08:	75fb      	strb	r3, [r7, #23]
 8002a0a:	e009      	b.n	8002a20 <UART_SetConfig+0xf0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a79      	ldr	r2, [pc, #484]	; (8002bf8 <UART_SetConfig+0x2c8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d102      	bne.n	8002a1c <UART_SetConfig+0xec>
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]
 8002a1a:	e001      	b.n	8002a20 <UART_SetConfig+0xf0>
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a28:	d16f      	bne.n	8002b0a <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d857      	bhi.n	8002ae0 <UART_SetConfig+0x1b0>
 8002a30:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <UART_SetConfig+0x108>)
 8002a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a36:	bf00      	nop
 8002a38:	08002a5d 	.word	0x08002a5d
 8002a3c:	08002a79 	.word	0x08002a79
 8002a40:	08002a95 	.word	0x08002a95
 8002a44:	08002ae1 	.word	0x08002ae1
 8002a48:	08002aaf 	.word	0x08002aaf
 8002a4c:	08002ae1 	.word	0x08002ae1
 8002a50:	08002ae1 	.word	0x08002ae1
 8002a54:	08002ae1 	.word	0x08002ae1
 8002a58:	08002acb 	.word	0x08002acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a5c:	f7ff fe46 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8002a60:	4603      	mov	r3, r0
 8002a62:	005a      	lsls	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	441a      	add	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	82bb      	strh	r3, [r7, #20]
        break;
 8002a76:	e036      	b.n	8002ae6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a78:	f7ff fe5a 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	005a      	lsls	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	441a      	add	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	82bb      	strh	r3, [r7, #20]
        break;
 8002a92:	e028      	b.n	8002ae6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002a9e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6852      	ldr	r2, [r2, #4]
 8002aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aaa:	82bb      	strh	r3, [r7, #20]
        break;
 8002aac:	e01b      	b.n	8002ae6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002aae:	f7ff fda7 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	005a      	lsls	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	441a      	add	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	82bb      	strh	r3, [r7, #20]
        break;
 8002ac8:	e00d      	b.n	8002ae6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	82bb      	strh	r3, [r7, #20]
        break;
 8002ade:	e002      	b.n	8002ae6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ae4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002ae6:	8abb      	ldrh	r3, [r7, #20]
 8002ae8:	f023 030f 	bic.w	r3, r3, #15
 8002aec:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aee:	8abb      	ldrh	r3, [r7, #20]
 8002af0:	105b      	asrs	r3, r3, #1
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	897b      	ldrh	r3, [r7, #10]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	897a      	ldrh	r2, [r7, #10]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	e069      	b.n	8002bde <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d863      	bhi.n	8002bd8 <UART_SetConfig+0x2a8>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <UART_SetConfig+0x1e8>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b3d 	.word	0x08002b3d
 8002b1c:	08002b5d 	.word	0x08002b5d
 8002b20:	08002b7d 	.word	0x08002b7d
 8002b24:	08002bd9 	.word	0x08002bd9
 8002b28:	08002b9d 	.word	0x08002b9d
 8002b2c:	08002bd9 	.word	0x08002bd9
 8002b30:	08002bd9 	.word	0x08002bd9
 8002b34:	08002bd9 	.word	0x08002bd9
 8002b38:	08002bbd 	.word	0x08002bbd
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b3c:	f7ff fdd6 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	441a      	add	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60da      	str	r2, [r3, #12]
        break;
 8002b5a:	e040      	b.n	8002bde <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b5c:	f7ff fde8 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	441a      	add	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60da      	str	r2, [r3, #12]
        break;
 8002b7a:	e030      	b.n	8002bde <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002b86:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6852      	ldr	r2, [r2, #4]
 8002b8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60da      	str	r2, [r3, #12]
        break;
 8002b9a:	e020      	b.n	8002bde <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b9c:	f7ff fd30 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	441a      	add	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60da      	str	r2, [r3, #12]
        break;
 8002bba:	e010      	b.n	8002bde <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60da      	str	r2, [r3, #12]
        break;
 8002bd6:	e002      	b.n	8002bde <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	74fb      	strb	r3, [r7, #19]
        break;
 8002bdc:	bf00      	nop
    }
  }

  return ret;
 8002bde:	7cfb      	ldrb	r3, [r7, #19]

}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	efff69f3 	.word	0xefff69f3
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40004400 	.word	0x40004400
 8002bf8:	40004800 	.word	0x40004800

08002bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01a      	beq.n	8002d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cfa:	d10a      	bne.n	8002d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	605a      	str	r2, [r3, #4]
  }
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d52:	f7fd fa93 	bl	800027c <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d10e      	bne.n	8002d84 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f82c 	bl	8002dd2 <UART_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e022      	b.n	8002dca <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d10e      	bne.n	8002db0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f816 	bl	8002dd2 <UART_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e00c      	b.n	8002dca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	4613      	mov	r3, r2
 8002de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de2:	e02c      	b.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d028      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <UART_WaitOnFlagUntilTimeout+0x30>
 8002df2:	f7fd fa43 	bl	800027c <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d21d      	bcs.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e00f      	b.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4013      	ands	r3, r2
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d0c3      	beq.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t               RxData[8];
uint32_t              TxMailbox;
uint8_t cnt;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Get RX message */
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002e72:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8002e74:	2100      	movs	r1, #0
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd fd47 	bl	800090a <HAL_CAN_GetRxMessage>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8002e82:	f000 f99f 	bl	80031c4 <Error_Handler>
  }
  xprintf(" id=%x [0]=%d [1]=%d [2]=%d\r\n",RxHeader.StdId,RxData[0],RxData[1],RxData[2]);
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8002e88:	6819      	ldr	r1, [r3, #0]
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002e92:	785b      	ldrb	r3, [r3, #1]
 8002e94:	4618      	mov	r0, r3
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002e98:	789b      	ldrb	r3, [r3, #2]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002ea0:	f000 fcc4 	bl	800382c <xprintf>
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	2000006c 	.word	0x2000006c
 8002eb0:	200000fc 	.word	0x200000fc
 8002eb4:	08003914 	.word	0x08003914

08002eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ebc:	f7fd f984 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ec0:	f000 f868 	bl	8002f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ec4:	f000 f934 	bl	8003130 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002ec8:	f000 f902 	bl	80030d0 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8002ecc:	f000 f8a4 	bl	8003018 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  init_xprintf(&huart2);
 8002ed0:	4829      	ldr	r0, [pc, #164]	; (8002f78 <main+0xc0>)
 8002ed2:	f000 fac7 	bl	8003464 <init_xprintf>
  HAL_CAN_Start(&hcan);
 8002ed6:	4829      	ldr	r0, [pc, #164]	; (8002f7c <main+0xc4>)
 8002ed8:	f7fd fbc3 	bl	8000662 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002edc:	2102      	movs	r1, #2
 8002ede:	4827      	ldr	r0, [pc, #156]	; (8002f7c <main+0xc4>)
 8002ee0:	f7fd fe26 	bl	8000b30 <HAL_CAN_ActivateNotification>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <main+0x36>
   {

     Error_Handler();
 8002eea:	f000 f96b 	bl	80031c4 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8002eee:	2108      	movs	r1, #8
 8002ef0:	4823      	ldr	r0, [pc, #140]	; (8002f80 <main+0xc8>)
 8002ef2:	f7fe fb09 	bl	8001508 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(100);
 8002ef6:	2064      	movs	r0, #100	; 0x64
 8002ef8:	f7fd f9cc 	bl	8000294 <HAL_Delay>

	  	  TxHeader.StdId = 0x123;
 8002efc:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <main+0xcc>)
 8002efe:	f240 1223 	movw	r2, #291	; 0x123
 8002f02:	601a      	str	r2, [r3, #0]
	  	  TxHeader.RTR = CAN_RTR_DATA;
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <main+0xcc>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
	  	  TxHeader.IDE = CAN_ID_STD;
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <main+0xcc>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
	  	  TxHeader.DLC = 3;
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <main+0xcc>)
 8002f12:	2203      	movs	r2, #3
 8002f14:	611a      	str	r2, [r3, #16]
	  	  TxHeader.TransmitGlobalTime = DISABLE;
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <main+0xcc>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	751a      	strb	r2, [r3, #20]
	  	  TxData[0] = 100;
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <main+0xd0>)
 8002f1e:	2264      	movs	r2, #100	; 0x64
 8002f20:	701a      	strb	r2, [r3, #0]
	  	  TxData[1] = 200;
 8002f22:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <main+0xd0>)
 8002f24:	22c8      	movs	r2, #200	; 0xc8
 8002f26:	705a      	strb	r2, [r3, #1]
	  	  TxData[2] = cnt;
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <main+0xd4>)
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <main+0xd0>)
 8002f2e:	709a      	strb	r2, [r3, #2]

	  	  /* Request transmission */
	  	  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8002f30:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <main+0xd8>)
 8002f32:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <main+0xd0>)
 8002f34:	4913      	ldr	r1, [pc, #76]	; (8002f84 <main+0xcc>)
 8002f36:	4811      	ldr	r0, [pc, #68]	; (8002f7c <main+0xc4>)
 8002f38:	f7fd fbd7 	bl	80006ea <HAL_CAN_AddTxMessage>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <main+0x8e>
	  	  {
	  	    /* Transmission request Error */
	  	    Error_Handler();
 8002f42:	f000 f93f 	bl	80031c4 <Error_Handler>
	  	  }
	  	  HAL_Delay(10);
 8002f46:	200a      	movs	r0, #10
 8002f48:	f7fd f9a4 	bl	8000294 <HAL_Delay>
	  	  while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) {}
 8002f4c:	bf00      	nop
 8002f4e:	480b      	ldr	r0, [pc, #44]	; (8002f7c <main+0xc4>)
 8002f50:	f7fd fca6 	bl	80008a0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d1f9      	bne.n	8002f4e <main+0x96>

	  	   if(cnt>250){
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <main+0xd4>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2bfa      	cmp	r3, #250	; 0xfa
 8002f60:	d903      	bls.n	8002f6a <main+0xb2>
	  		   cnt=0;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <main+0xd4>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e7c1      	b.n	8002eee <main+0x36>
	  	   }
	  	   else{
	  		   cnt++;
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <main+0xd4>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <main+0xd4>)
 8002f74:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8002f76:	e7ba      	b.n	8002eee <main+0x36>
 8002f78:	20000074 	.word	0x20000074
 8002f7c:	20000034 	.word	0x20000034
 8002f80:	48000400 	.word	0x48000400
 8002f84:	200000e4 	.word	0x200000e4
 8002f88:	20000060 	.word	0x20000060
 8002f8c:	20000030 	.word	0x20000030
 8002f90:	20000068 	.word	0x20000068

08002f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b090      	sub	sp, #64	; 0x40
 8002f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f9a:	f107 0318 	add.w	r3, r7, #24
 8002f9e:	2228      	movs	r2, #40	; 0x28
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fca2 	bl	80038ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002fca:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fd0:	f107 0318 	add.w	r3, r7, #24
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe faa9 	bl	800152c <HAL_RCC_OscConfig>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002fe0:	f000 f8f0 	bl	80031c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fe4:	230f      	movs	r3, #15
 8002fe6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff f982 	bl	8002308 <HAL_RCC_ClockConfig>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800300a:	f000 f8db 	bl	80031c4 <Error_Handler>
  }
}
 800300e:	bf00      	nop
 8003010:	3740      	adds	r7, #64	; 0x40
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <MX_CAN_Init+0xb0>)
 8003020:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <MX_CAN_Init+0xb4>)
 8003022:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8003024:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <MX_CAN_Init+0xb0>)
 8003026:	2202      	movs	r2, #2
 8003028:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <MX_CAN_Init+0xb0>)
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003030:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <MX_CAN_Init+0xb0>)
 8003032:	2200      	movs	r2, #0
 8003034:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <MX_CAN_Init+0xb0>)
 8003038:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800303c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <MX_CAN_Init+0xb0>)
 8003040:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8003044:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <MX_CAN_Init+0xb0>)
 8003048:	2200      	movs	r2, #0
 800304a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800304c:	4b1e      	ldr	r3, [pc, #120]	; (80030c8 <MX_CAN_Init+0xb0>)
 800304e:	2200      	movs	r2, #0
 8003050:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <MX_CAN_Init+0xb0>)
 8003054:	2200      	movs	r2, #0
 8003056:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003058:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <MX_CAN_Init+0xb0>)
 800305a:	2200      	movs	r2, #0
 800305c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <MX_CAN_Init+0xb0>)
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003064:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <MX_CAN_Init+0xb0>)
 8003066:	2200      	movs	r2, #0
 8003068:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800306a:	4817      	ldr	r0, [pc, #92]	; (80030c8 <MX_CAN_Init+0xb0>)
 800306c:	f7fd f934 	bl	80002d8 <HAL_CAN_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8003076:	f000 f8a5 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef  sFilterConfig;
  	sFilterConfig.FilterBank = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800307e:	2301      	movs	r3, #1
 8003080:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x456<<5;
 8003086:	f648 23c0 	movw	r3, #35520	; 0x8ac0
 800308a:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x456<<5;
 800308c:	f648 23c0 	movw	r3, #35520	; 0x8ac0
 8003090:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x456<<5;
 8003092:	f648 23c0 	movw	r3, #35520	; 0x8ac0
 8003096:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x456<<5;
 8003098:	f648 23c0 	movw	r3, #35520	; 0x8ac0
 800309c:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80030a2:	2301      	movs	r3, #1
 80030a4:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24

   if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80030aa:	463b      	mov	r3, r7
 80030ac:	4619      	mov	r1, r3
 80030ae:	4806      	ldr	r0, [pc, #24]	; (80030c8 <MX_CAN_Init+0xb0>)
 80030b0:	f7fd fa0d 	bl	80004ce <HAL_CAN_ConfigFilter>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_CAN_Init+0xa6>
   {
 	  Error_Handler();
 80030ba:	f000 f883 	bl	80031c4 <Error_Handler>
   }
  /* USER CODE END CAN_Init 2 */

}
 80030be:	bf00      	nop
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000034 	.word	0x20000034
 80030cc:	40006400 	.word	0x40006400

080030d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <MX_USART2_UART_Init+0x58>)
 80030d6:	4a15      	ldr	r2, [pc, #84]	; (800312c <MX_USART2_UART_Init+0x5c>)
 80030d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <MX_USART2_UART_Init+0x58>)
 80030dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <MX_USART2_UART_Init+0x58>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <MX_USART2_UART_Init+0x58>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <MX_USART2_UART_Init+0x58>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <MX_USART2_UART_Init+0x58>)
 80030f6:	220c      	movs	r2, #12
 80030f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <MX_USART2_UART_Init+0x58>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <MX_USART2_UART_Init+0x58>)
 8003102:	2200      	movs	r2, #0
 8003104:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <MX_USART2_UART_Init+0x58>)
 8003108:	2200      	movs	r2, #0
 800310a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <MX_USART2_UART_Init+0x58>)
 800310e:	2200      	movs	r2, #0
 8003110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003112:	4805      	ldr	r0, [pc, #20]	; (8003128 <MX_USART2_UART_Init+0x58>)
 8003114:	f7ff fb2e 	bl	8002774 <HAL_UART_Init>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800311e:	f000 f851 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000074 	.word	0x20000074
 800312c:	40004400 	.word	0x40004400

08003130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003136:	f107 030c 	add.w	r3, r7, #12
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	60da      	str	r2, [r3, #12]
 8003144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <MX_GPIO_Init+0x8c>)
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	4a1c      	ldr	r2, [pc, #112]	; (80031bc <MX_GPIO_Init+0x8c>)
 800314c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003150:	6153      	str	r3, [r2, #20]
 8003152:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <MX_GPIO_Init+0x8c>)
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800315e:	4b17      	ldr	r3, [pc, #92]	; (80031bc <MX_GPIO_Init+0x8c>)
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	4a16      	ldr	r2, [pc, #88]	; (80031bc <MX_GPIO_Init+0x8c>)
 8003164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003168:	6153      	str	r3, [r2, #20]
 800316a:	4b14      	ldr	r3, [pc, #80]	; (80031bc <MX_GPIO_Init+0x8c>)
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003176:	4b11      	ldr	r3, [pc, #68]	; (80031bc <MX_GPIO_Init+0x8c>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4a10      	ldr	r2, [pc, #64]	; (80031bc <MX_GPIO_Init+0x8c>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003180:	6153      	str	r3, [r2, #20]
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <MX_GPIO_Init+0x8c>)
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800318e:	2200      	movs	r2, #0
 8003190:	2108      	movs	r1, #8
 8003192:	480b      	ldr	r0, [pc, #44]	; (80031c0 <MX_GPIO_Init+0x90>)
 8003194:	f7fe f9a0 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003198:	2308      	movs	r3, #8
 800319a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319c:	2301      	movs	r3, #1
 800319e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	4619      	mov	r1, r3
 80031ae:	4804      	ldr	r0, [pc, #16]	; (80031c0 <MX_GPIO_Init+0x90>)
 80031b0:	f7fe f81c 	bl	80011ec <HAL_GPIO_Init>

}
 80031b4:	bf00      	nop
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	48000400 	.word	0x48000400

080031c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031da:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_MspInit+0x44>)
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <HAL_MspInit+0x44>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6193      	str	r3, [r2, #24]
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <HAL_MspInit+0x44>)
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <HAL_MspInit+0x44>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	4a08      	ldr	r2, [pc, #32]	; (8003218 <HAL_MspInit+0x44>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	61d3      	str	r3, [r2, #28]
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_MspInit+0x44>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000

0800321c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a20      	ldr	r2, [pc, #128]	; (80032bc <HAL_CAN_MspInit+0xa0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d139      	bne.n	80032b2 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_CAN_MspInit+0xa4>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4a1f      	ldr	r2, [pc, #124]	; (80032c0 <HAL_CAN_MspInit+0xa4>)
 8003244:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003248:	61d3      	str	r3, [r2, #28]
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_CAN_MspInit+0xa4>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_CAN_MspInit+0xa4>)
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <HAL_CAN_MspInit+0xa4>)
 800325c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003260:	6153      	str	r3, [r2, #20]
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <HAL_CAN_MspInit+0xa4>)
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800326e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800327c:	2303      	movs	r3, #3
 800327e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8003280:	2309      	movs	r3, #9
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	4619      	mov	r1, r3
 800328a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800328e:	f7fd ffad 	bl	80011ec <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 1, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2101      	movs	r1, #1
 8003296:	2014      	movs	r0, #20
 8003298:	f7fd ff71 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800329c:	2014      	movs	r0, #20
 800329e:	f7fd ff8a 	bl	80011b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 2, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2102      	movs	r1, #2
 80032a6:	2015      	movs	r0, #21
 80032a8:	f7fd ff69 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80032ac:	2015      	movs	r0, #21
 80032ae:	f7fd ff82 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80032b2:	bf00      	nop
 80032b4:	3728      	adds	r7, #40	; 0x28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40006400 	.word	0x40006400
 80032c0:	40021000 	.word	0x40021000

080032c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_UART_MspInit+0x80>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d129      	bne.n	800333a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032e6:	4b18      	ldr	r3, [pc, #96]	; (8003348 <HAL_UART_MspInit+0x84>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4a17      	ldr	r2, [pc, #92]	; (8003348 <HAL_UART_MspInit+0x84>)
 80032ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f0:	61d3      	str	r3, [r2, #28]
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_UART_MspInit+0x84>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_UART_MspInit+0x84>)
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	4a11      	ldr	r2, [pc, #68]	; (8003348 <HAL_UART_MspInit+0x84>)
 8003304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003308:	6153      	str	r3, [r2, #20]
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_UART_MspInit+0x84>)
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003316:	f248 0304 	movw	r3, #32772	; 0x8004
 800331a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	2302      	movs	r3, #2
 800331e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003324:	2303      	movs	r3, #3
 8003326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003328:	2307      	movs	r3, #7
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4619      	mov	r1, r3
 8003332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003336:	f7fd ff59 	bl	80011ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800333a:	bf00      	nop
 800333c:	3728      	adds	r7, #40	; 0x28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40004400 	.word	0x40004400
 8003348:	40021000 	.word	0x40021000

0800334c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335e:	e7fe      	b.n	800335e <HardFault_Handler+0x4>

08003360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <MemManage_Handler+0x4>

08003366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <BusFault_Handler+0x4>

0800336c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <UsageFault_Handler+0x4>

08003372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a0:	f7fc ff58 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80033ac:	4802      	ldr	r0, [pc, #8]	; (80033b8 <CAN_RX0_IRQHandler+0x10>)
 80033ae:	f7fd fbe5 	bl	8000b7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000034 	.word	0x20000034

080033bc <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80033c0:	4802      	ldr	r0, [pc, #8]	; (80033cc <CAN_RX1_IRQHandler+0x10>)
 80033c2:	f7fd fbdb 	bl	8000b7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000034 	.word	0x20000034

080033d0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033d4:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <SystemInit+0x84>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <SystemInit+0x84>)
 80033dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80033e4:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <SystemInit+0x88>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <SystemInit+0x88>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <SystemInit+0x88>)
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	4918      	ldr	r1, [pc, #96]	; (8003458 <SystemInit+0x88>)
 80033f6:	4b19      	ldr	r3, [pc, #100]	; (800345c <SystemInit+0x8c>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033fc:	4b16      	ldr	r3, [pc, #88]	; (8003458 <SystemInit+0x88>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a15      	ldr	r2, [pc, #84]	; (8003458 <SystemInit+0x88>)
 8003402:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800340c:	4b12      	ldr	r3, [pc, #72]	; (8003458 <SystemInit+0x88>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a11      	ldr	r2, [pc, #68]	; (8003458 <SystemInit+0x88>)
 8003412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003416:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <SystemInit+0x88>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <SystemInit+0x88>)
 800341e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003422:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <SystemInit+0x88>)
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <SystemInit+0x88>)
 800342a:	f023 030f 	bic.w	r3, r3, #15
 800342e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <SystemInit+0x88>)
 8003432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003434:	4908      	ldr	r1, [pc, #32]	; (8003458 <SystemInit+0x88>)
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <SystemInit+0x90>)
 8003438:	4013      	ands	r3, r2
 800343a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <SystemInit+0x88>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <SystemInit+0x84>)
 8003444:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003448:	609a      	str	r2, [r3, #8]
#endif
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00
 8003458:	40021000 	.word	0x40021000
 800345c:	f87fc00c 	.word	0xf87fc00c
 8003460:	ff00fccc 	.word	0xff00fccc

08003464 <init_xprintf>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/


void init_xprintf(UART_HandleTypeDef *handler){
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	huart_xprintf = handler;
 800346c:	4a05      	ldr	r2, [pc, #20]	; (8003484 <init_xprintf+0x20>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6013      	str	r3, [r2, #0]
	xdev_out(uart_putc);
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <init_xprintf+0x24>)
 8003474:	4a05      	ldr	r2, [pc, #20]	; (800348c <init_xprintf+0x28>)
 8003476:	601a      	str	r2, [r3, #0]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	2000005c 	.word	0x2000005c
 8003488:	2000011c 	.word	0x2000011c
 800348c:	08003491 	.word	0x08003491

08003490 <uart_putc>:
	    HAL_UART_Receive(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
void uart_putc(uint8_t c)
	{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
	 char buf[1];
	 buf[0] = c;
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	733b      	strb	r3, [r7, #12]
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <uart_putc+0x28>)
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	f107 010c 	add.w	r1, r7, #12
 80034a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034aa:	2201      	movs	r2, #1
 80034ac:	f7ff f9b3 	bl	8002816 <HAL_UART_Transmit>
	}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	2000005c 	.word	0x2000005c

080034bc <xputc>:
	        uart_putc(*str++);
	    }
	}

void xputc (char c)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	2b0a      	cmp	r3, #10
 80034ca:	d102      	bne.n	80034d2 <xputc+0x16>
 80034cc:	200d      	movs	r0, #13
 80034ce:	f7ff fff5 	bl	80034bc <xputc>

	if (outptr) {
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <xputc+0x48>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <xputc+0x48>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	4908      	ldr	r1, [pc, #32]	; (8003504 <xputc+0x48>)
 80034e2:	600a      	str	r2, [r1, #0]
 80034e4:	79fa      	ldrb	r2, [r7, #7]
 80034e6:	701a      	strb	r2, [r3, #0]
		return;
 80034e8:	e008      	b.n	80034fc <xputc+0x40>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <xputc+0x4c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <xputc+0x40>
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <xputc+0x4c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	79fa      	ldrb	r2, [r7, #7]
 80034f8:	4610      	mov	r0, r2
 80034fa:	4798      	blx	r3
}
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000028 	.word	0x20000028
 8003508:	2000011c 	.word	0x2000011c

0800350c <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	while (*str)
 8003514:	e006      	b.n	8003524 <xputs+0x18>
		xputc(*str++);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ffcc 	bl	80034bc <xputc>
	while (*str)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f4      	bne.n	8003516 <xputs+0xa>
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08e      	sub	sp, #56	; 0x38
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	77fb      	strb	r3, [r7, #31]
		if (!c) break;				/* End of format? */
 8003548:	7ffb      	ldrb	r3, [r7, #31]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8167 	beq.w	800381e <xvprintf+0x2ea>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8003550:	7ffb      	ldrb	r3, [r7, #31]
 8003552:	2b25      	cmp	r3, #37	; 0x25
 8003554:	d004      	beq.n	8003560 <xvprintf+0x2c>
			xputc(c); continue;
 8003556:	7ffb      	ldrb	r3, [r7, #31]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ffaf 	bl	80034bc <xputc>
 800355e:	e15d      	b.n	800381c <xvprintf+0x2e8>
		}
		f = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	77fb      	strb	r3, [r7, #31]
		if (c == '0') {				/* Flag: '0' padded */
 800356e:	7ffb      	ldrb	r3, [r7, #31]
 8003570:	2b30      	cmp	r3, #48	; 0x30
 8003572:	d107      	bne.n	8003584 <xvprintf+0x50>
			f = 1; c = *fmt++;
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e009      	b.n	8003598 <xvprintf+0x64>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8003584:	7ffb      	ldrb	r3, [r7, #31]
 8003586:	2b2d      	cmp	r3, #45	; 0x2d
 8003588:	d106      	bne.n	8003598 <xvprintf+0x64>
				f = 2; c = *fmt++;
 800358a:	2302      	movs	r3, #2
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	77fb      	strb	r3, [r7, #31]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8003598:	2300      	movs	r3, #0
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
 800359c:	e00e      	b.n	80035bc <xvprintf+0x88>
			w = w * 10 + c - '0';
 800359e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	461a      	mov	r2, r3
 80035aa:	7ffb      	ldrb	r3, [r7, #31]
 80035ac:	4413      	add	r3, r2
 80035ae:	3b30      	subs	r3, #48	; 0x30
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	7ffb      	ldrb	r3, [r7, #31]
 80035be:	2b2f      	cmp	r3, #47	; 0x2f
 80035c0:	d902      	bls.n	80035c8 <xvprintf+0x94>
 80035c2:	7ffb      	ldrb	r3, [r7, #31]
 80035c4:	2b39      	cmp	r3, #57	; 0x39
 80035c6:	d9ea      	bls.n	800359e <xvprintf+0x6a>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80035c8:	7ffb      	ldrb	r3, [r7, #31]
 80035ca:	2b6c      	cmp	r3, #108	; 0x6c
 80035cc:	d002      	beq.n	80035d4 <xvprintf+0xa0>
 80035ce:	7ffb      	ldrb	r3, [r7, #31]
 80035d0:	2b4c      	cmp	r3, #76	; 0x4c
 80035d2:	d108      	bne.n	80035e6 <xvprintf+0xb2>
			f |= 4; c = *fmt++;
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	f043 0304 	orr.w	r3, r3, #4
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	77fb      	strb	r3, [r7, #31]
		}
		if (!c) break;				/* End of format? */
 80035e6:	7ffb      	ldrb	r3, [r7, #31]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 811a 	beq.w	8003822 <xvprintf+0x2ee>
		d = c;
 80035ee:	7ffb      	ldrb	r3, [r7, #31]
 80035f0:	77bb      	strb	r3, [r7, #30]
		if (d >= 'a') d -= 0x20;
 80035f2:	7fbb      	ldrb	r3, [r7, #30]
 80035f4:	2b60      	cmp	r3, #96	; 0x60
 80035f6:	d902      	bls.n	80035fe <xvprintf+0xca>
 80035f8:	7fbb      	ldrb	r3, [r7, #30]
 80035fa:	3b20      	subs	r3, #32
 80035fc:	77bb      	strb	r3, [r7, #30]
		switch (d) {				/* Type is... */
 80035fe:	7fbb      	ldrb	r3, [r7, #30]
 8003600:	3b42      	subs	r3, #66	; 0x42
 8003602:	2b16      	cmp	r3, #22
 8003604:	d873      	bhi.n	80036ee <xvprintf+0x1ba>
 8003606:	a201      	add	r2, pc, #4	; (adr r2, 800360c <xvprintf+0xd8>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	080036d7 	.word	0x080036d7
 8003610:	080036c5 	.word	0x080036c5
 8003614:	080036e3 	.word	0x080036e3
 8003618:	080036ef 	.word	0x080036ef
 800361c:	080036ef 	.word	0x080036ef
 8003620:	080036ef 	.word	0x080036ef
 8003624:	080036ef 	.word	0x080036ef
 8003628:	080036ef 	.word	0x080036ef
 800362c:	080036ef 	.word	0x080036ef
 8003630:	080036ef 	.word	0x080036ef
 8003634:	080036ef 	.word	0x080036ef
 8003638:	080036ef 	.word	0x080036ef
 800363c:	080036ef 	.word	0x080036ef
 8003640:	080036dd 	.word	0x080036dd
 8003644:	080036ef 	.word	0x080036ef
 8003648:	080036ef 	.word	0x080036ef
 800364c:	080036ef 	.word	0x080036ef
 8003650:	08003669 	.word	0x08003669
 8003654:	080036ef 	.word	0x080036ef
 8003658:	080036e3 	.word	0x080036e3
 800365c:	080036ef 	.word	0x080036ef
 8003660:	080036ef 	.word	0x080036ef
 8003664:	080036e9 	.word	0x080036e9
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	1d1a      	adds	r2, r3, #4
 800366c:	603a      	str	r2, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 8003672:	2300      	movs	r3, #0
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003676:	e002      	b.n	800367e <xvprintf+0x14a>
 8003678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367a:	3301      	adds	r3, #1
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	4413      	add	r3, r2
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f6      	bne.n	8003678 <xvprintf+0x144>
			while (!(f & 2) && j++ < w) xputc(' ');
 800368a:	e002      	b.n	8003692 <xvprintf+0x15e>
 800368c:	2020      	movs	r0, #32
 800368e:	f7ff ff15 	bl	80034bc <xputc>
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <xvprintf+0x174>
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d8f1      	bhi.n	800368c <xvprintf+0x158>
			xputs(p);
 80036a8:	69b8      	ldr	r0, [r7, #24]
 80036aa:	f7ff ff2f 	bl	800350c <xputs>
			while (j++ < w) xputc(' ');
 80036ae:	e002      	b.n	80036b6 <xvprintf+0x182>
 80036b0:	2020      	movs	r0, #32
 80036b2:	f7ff ff03 	bl	80034bc <xputc>
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036be:	429a      	cmp	r2, r3
 80036c0:	d8f6      	bhi.n	80036b0 <xvprintf+0x17c>
			continue;
 80036c2:	e0ab      	b.n	800381c <xvprintf+0x2e8>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	603a      	str	r2, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fef4 	bl	80034bc <xputc>
 80036d4:	e0a2      	b.n	800381c <xvprintf+0x2e8>
		case 'B' :					/* Binary */
			r = 2; break;
 80036d6:	2302      	movs	r3, #2
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
 80036da:	e00d      	b.n	80036f8 <xvprintf+0x1c4>
		case 'O' :					/* Octal */
			r = 8; break;
 80036dc:	2308      	movs	r3, #8
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
 80036e0:	e00a      	b.n	80036f8 <xvprintf+0x1c4>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80036e2:	230a      	movs	r3, #10
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
 80036e6:	e007      	b.n	80036f8 <xvprintf+0x1c4>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80036e8:	2310      	movs	r3, #16
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
 80036ec:	e004      	b.n	80036f8 <xvprintf+0x1c4>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 80036ee:	7ffb      	ldrb	r3, [r7, #31]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fee3 	bl	80034bc <xputc>
 80036f6:	e091      	b.n	800381c <xvprintf+0x2e8>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d004      	beq.n	800370c <xvprintf+0x1d8>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	1d1a      	adds	r2, r3, #4
 8003706:	603a      	str	r2, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	e00b      	b.n	8003724 <xvprintf+0x1f0>
 800370c:	7fbb      	ldrb	r3, [r7, #30]
 800370e:	2b44      	cmp	r3, #68	; 0x44
 8003710:	d104      	bne.n	800371c <xvprintf+0x1e8>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	1d1a      	adds	r2, r3, #4
 8003716:	603a      	str	r2, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	e003      	b.n	8003724 <xvprintf+0x1f0>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	1d1a      	adds	r2, r3, #4
 8003720:	603a      	str	r2, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 8003726:	7fbb      	ldrb	r3, [r7, #30]
 8003728:	2b44      	cmp	r3, #68	; 0x44
 800372a:	d109      	bne.n	8003740 <xvprintf+0x20c>
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	2b00      	cmp	r3, #0
 8003730:	da06      	bge.n	8003740 <xvprintf+0x20c>
			v = 0 - v;
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	425b      	negs	r3, r3
 8003736:	623b      	str	r3, [r7, #32]
			f |= 8;
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	f043 0308 	orr.w	r3, r3, #8
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003748:	fbb3 f2f2 	udiv	r2, r3, r2
 800374c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800374e:	fb01 f202 	mul.w	r2, r1, r2
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	77bb      	strb	r3, [r7, #30]
 8003756:	6a3a      	ldr	r2, [r7, #32]
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8003760:	7fbb      	ldrb	r3, [r7, #30]
 8003762:	2b09      	cmp	r3, #9
 8003764:	d908      	bls.n	8003778 <xvprintf+0x244>
 8003766:	7ffb      	ldrb	r3, [r7, #31]
 8003768:	2b78      	cmp	r3, #120	; 0x78
 800376a:	d101      	bne.n	8003770 <xvprintf+0x23c>
 800376c:	2227      	movs	r2, #39	; 0x27
 800376e:	e000      	b.n	8003772 <xvprintf+0x23e>
 8003770:	2207      	movs	r2, #7
 8003772:	7fbb      	ldrb	r3, [r7, #30]
 8003774:	4413      	add	r3, r2
 8003776:	77bb      	strb	r3, [r7, #30]
			s[i++] = d + '0';
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	633a      	str	r2, [r7, #48]	; 0x30
 800377e:	7fba      	ldrb	r2, [r7, #30]
 8003780:	3230      	adds	r2, #48	; 0x30
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003788:	440b      	add	r3, r1
 800378a:	f803 2c30 	strb.w	r2, [r3, #-48]
		} while (v && i < sizeof(s));
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <xvprintf+0x266>
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	2b0f      	cmp	r3, #15
 8003798:	d9d4      	bls.n	8003744 <xvprintf+0x210>
		if (f & 8) s[i++] = '-';
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <xvprintf+0x282>
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	633a      	str	r2, [r7, #48]	; 0x30
 80037aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037ae:	4413      	add	r3, r2
 80037b0:	222d      	movs	r2, #45	; 0x2d
 80037b2:	f803 2c30 	strb.w	r2, [r3, #-48]
		j = i; d = (f & 1) ? '0' : ' ';
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <xvprintf+0x294>
 80037c4:	2330      	movs	r3, #48	; 0x30
 80037c6:	e000      	b.n	80037ca <xvprintf+0x296>
 80037c8:	2320      	movs	r3, #32
 80037ca:	77bb      	strb	r3, [r7, #30]
		while (!(f & 2) && j++ < w) xputc(d);
 80037cc:	e003      	b.n	80037d6 <xvprintf+0x2a2>
 80037ce:	7fbb      	ldrb	r3, [r7, #30]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fe73 	bl	80034bc <xputc>
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d105      	bne.n	80037ec <xvprintf+0x2b8>
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d8f0      	bhi.n	80037ce <xvprintf+0x29a>
		do xputc(s[--i]); while(i);
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	3b01      	subs	r3, #1
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
 80037f2:	f107 0208 	add.w	r2, r7, #8
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	4413      	add	r3, r2
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fe5d 	bl	80034bc <xputc>
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f1      	bne.n	80037ec <xvprintf+0x2b8>
		while (j++ < w) xputc(' ');
 8003808:	e002      	b.n	8003810 <xvprintf+0x2dc>
 800380a:	2020      	movs	r0, #32
 800380c:	f7ff fe56 	bl	80034bc <xputc>
 8003810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003818:	429a      	cmp	r2, r3
 800381a:	d8f6      	bhi.n	800380a <xvprintf+0x2d6>
		c = *fmt++;					/* Get a char */
 800381c:	e68f      	b.n	800353e <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <xvprintf+0x2f0>
		if (!c) break;				/* End of format? */
 8003822:	bf00      	nop
	}
}
 8003824:	bf00      	nop
 8003826:	3738      	adds	r7, #56	; 0x38
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 800382c:	b40f      	push	{r0, r1, r2, r3}
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	6938      	ldr	r0, [r7, #16]
 800383e:	f7ff fe79 	bl	8003534 <xvprintf>
	va_end(arp);
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800384c:	b004      	add	sp, #16
 800384e:	4770      	bx	lr

08003850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003888 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003854:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003856:	e003      	b.n	8003860 <LoopCopyDataInit>

08003858 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800385a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800385c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800385e:	3104      	adds	r1, #4

08003860 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003860:	480b      	ldr	r0, [pc, #44]	; (8003890 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003864:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003866:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003868:	d3f6      	bcc.n	8003858 <CopyDataInit>
	ldr	r2, =_sbss
 800386a:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <LoopForever+0x12>)
	b	LoopFillZerobss
 800386c:	e002      	b.n	8003874 <LoopFillZerobss>

0800386e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800386e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003870:	f842 3b04 	str.w	r3, [r2], #4

08003874 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <LoopForever+0x16>)
	cmp	r2, r3
 8003876:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003878:	d3f9      	bcc.n	800386e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800387a:	f7ff fda9 	bl	80033d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800387e:	f000 f811 	bl	80038a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003882:	f7ff fb19 	bl	8002eb8 <main>

08003886 <LoopForever>:

LoopForever:
    b LoopForever
 8003886:	e7fe      	b.n	8003886 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003888:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800388c:	08003974 	.word	0x08003974
	ldr	r0, =_sdata
 8003890:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003894:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003898:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800389c:	20000120 	.word	0x20000120

080038a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038a0:	e7fe      	b.n	80038a0 <ADC1_2_IRQHandler>
	...

080038a4 <__libc_init_array>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	4e0d      	ldr	r6, [pc, #52]	; (80038dc <__libc_init_array+0x38>)
 80038a8:	4c0d      	ldr	r4, [pc, #52]	; (80038e0 <__libc_init_array+0x3c>)
 80038aa:	1ba4      	subs	r4, r4, r6
 80038ac:	10a4      	asrs	r4, r4, #2
 80038ae:	2500      	movs	r5, #0
 80038b0:	42a5      	cmp	r5, r4
 80038b2:	d109      	bne.n	80038c8 <__libc_init_array+0x24>
 80038b4:	4e0b      	ldr	r6, [pc, #44]	; (80038e4 <__libc_init_array+0x40>)
 80038b6:	4c0c      	ldr	r4, [pc, #48]	; (80038e8 <__libc_init_array+0x44>)
 80038b8:	f000 f820 	bl	80038fc <_init>
 80038bc:	1ba4      	subs	r4, r4, r6
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	2500      	movs	r5, #0
 80038c2:	42a5      	cmp	r5, r4
 80038c4:	d105      	bne.n	80038d2 <__libc_init_array+0x2e>
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038cc:	4798      	blx	r3
 80038ce:	3501      	adds	r5, #1
 80038d0:	e7ee      	b.n	80038b0 <__libc_init_array+0xc>
 80038d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038d6:	4798      	blx	r3
 80038d8:	3501      	adds	r5, #1
 80038da:	e7f2      	b.n	80038c2 <__libc_init_array+0x1e>
 80038dc:	0800396c 	.word	0x0800396c
 80038e0:	0800396c 	.word	0x0800396c
 80038e4:	0800396c 	.word	0x0800396c
 80038e8:	08003970 	.word	0x08003970

080038ec <memset>:
 80038ec:	4402      	add	r2, r0
 80038ee:	4603      	mov	r3, r0
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d100      	bne.n	80038f6 <memset+0xa>
 80038f4:	4770      	bx	lr
 80038f6:	f803 1b01 	strb.w	r1, [r3], #1
 80038fa:	e7f9      	b.n	80038f0 <memset+0x4>

080038fc <_init>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	bf00      	nop
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr

08003908 <_fini>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr
