
G431_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007560  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007738  08007738  00017738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007830  08007830  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007838  08007838  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000000c  0800784c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  0800784c  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c0e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a4c  00000000  00000000  00038c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001750  00000000  00000000  0003b698  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001608  00000000  00000000  0003cde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002131f  00000000  00000000  0003e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010bfd  00000000  00000000  0005f70f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e06dd  00000000  00000000  0007030c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001509e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c0  00000000  00000000  00150a64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007720 	.word	0x08007720

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007720 	.word	0x08007720

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800051e:	2300      	movs	r3, #0
 8000520:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000522:	2003      	movs	r0, #3
 8000524:	f001 fb0a 	bl	8001b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000528:	2000      	movs	r0, #0
 800052a:	f000 f80d 	bl	8000548 <HAL_InitTick>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000534:	2301      	movs	r3, #1
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	e001      	b.n	800053e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800053a:	f006 fcab 	bl	8006e94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800053e:	79fb      	ldrb	r3, [r7, #7]

}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000554:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <HAL_InitTick+0x68>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d022      	beq.n	80005a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <HAL_InitTick+0x6c>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <HAL_InitTick+0x68>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000568:	fbb1 f3f3 	udiv	r3, r1, r3
 800056c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000570:	4618      	mov	r0, r3
 8000572:	f001 fb16 	bl	8001ba2 <HAL_SYSTICK_Config>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10f      	bne.n	800059c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b0f      	cmp	r3, #15
 8000580:	d809      	bhi.n	8000596 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000582:	2200      	movs	r2, #0
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	f04f 30ff 	mov.w	r0, #4294967295
 800058a:	f001 fae2 	bl	8001b52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <HAL_InitTick+0x70>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	e007      	b.n	80005a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	73fb      	strb	r3, [r7, #15]
 800059a:	e004      	b.n	80005a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	e001      	b.n	80005a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000000 	.word	0x20000000

080005bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x1c>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_IncTick+0x20>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4413      	add	r3, r2
 80005ca:	4a03      	ldr	r2, [pc, #12]	; (80005d8 <HAL_IncTick+0x1c>)
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000080 	.word	0x20000080
 80005dc:	20000004 	.word	0x20000004

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000080 	.word	0x20000080

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff ffee 	bl	80005e0 <HAL_GetTick>
 8000604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000610:	d004      	beq.n	800061c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_Delay+0x40>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800061c:	bf00      	nop
 800061e:	f7ff ffdf 	bl	80005e0 <HAL_GetTick>
 8000622:	4602      	mov	r2, r0
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	429a      	cmp	r2, r3
 800062c:	d8f7      	bhi.n	800061e <HAL_Delay+0x26>
  {
  }
}
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000004 	.word	0x20000004

0800063c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	431a      	orrs	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	609a      	str	r2, [r3, #8]
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	431a      	orrs	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	609a      	str	r2, [r3, #8]
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000698:	4618      	mov	r0, r3
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80006a4:	b490      	push	{r4, r7}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	461a      	mov	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4413      	add	r3, r2
 80006be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80006c0:	6822      	ldr	r2, [r4, #0]
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <LL_ADC_SetOffset+0x40>)
 80006c4:	4013      	ands	r3, r2
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	430a      	orrs	r2, r1
 80006d0:	4313      	orrs	r3, r2
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc90      	pop	{r4, r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	03fff000 	.word	0x03fff000

080006e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80006e8:	b490      	push	{r4, r7}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3360      	adds	r3, #96	; 0x60
 80006f6:	461a      	mov	r2, r3
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000700:	6823      	ldr	r3, [r4, #0]
 8000702:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bc90      	pop	{r4, r7}
 800070e:	4770      	bx	lr

08000710 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000710:	b490      	push	{r4, r7}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3360      	adds	r3, #96	; 0x60
 8000720:	461a      	mov	r2, r3
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800072a:	6823      	ldr	r3, [r4, #0]
 800072c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4313      	orrs	r3, r2
 8000734:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bc90      	pop	{r4, r7}
 800073e:	4770      	bx	lr

08000740 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000740:	b490      	push	{r4, r7}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3360      	adds	r3, #96	; 0x60
 8000750:	461a      	mov	r2, r3
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800075a:	6823      	ldr	r3, [r4, #0]
 800075c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4313      	orrs	r3, r2
 8000764:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bc90      	pop	{r4, r7}
 800076e:	4770      	bx	lr

08000770 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000770:	b490      	push	{r4, r7}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3360      	adds	r3, #96	; 0x60
 8000780:	461a      	mov	r2, r3
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800078a:	6823      	ldr	r3, [r4, #0]
 800078c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4313      	orrs	r3, r2
 8000794:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bc90      	pop	{r4, r7}
 800079e:	4770      	bx	lr

080007a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	615a      	str	r2, [r3, #20]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80007da:	2301      	movs	r3, #1
 80007dc:	e000      	b.n	80007e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80007de:	2300      	movs	r3, #0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80007ec:	b490      	push	{r4, r7}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3330      	adds	r3, #48	; 0x30
 80007fc:	461a      	mov	r2, r3
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	f003 030c 	and.w	r3, r3, #12
 8000808:	4413      	add	r3, r2
 800080a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800080c:	6822      	ldr	r2, [r4, #0]
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	f003 031f 	and.w	r3, r3, #31
 8000814:	211f      	movs	r1, #31
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	401a      	ands	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	0e9b      	lsrs	r3, r3, #26
 8000822:	f003 011f 	and.w	r1, r3, #31
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	f003 031f 	and.w	r3, r3, #31
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	4313      	orrs	r3, r2
 8000832:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bc90      	pop	{r4, r7}
 800083c:	4770      	bx	lr

0800083e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800083e:	b490      	push	{r4, r7}
 8000840:	b084      	sub	sp, #16
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3314      	adds	r3, #20
 800084e:	461a      	mov	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	0e5b      	lsrs	r3, r3, #25
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	4413      	add	r3, r2
 800085c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800085e:	6822      	ldr	r2, [r4, #0]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	0d1b      	lsrs	r3, r3, #20
 8000864:	f003 031f 	and.w	r3, r3, #31
 8000868:	2107      	movs	r1, #7
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	401a      	ands	r2, r3
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	0d1b      	lsrs	r3, r3, #20
 8000876:	f003 031f 	and.w	r3, r3, #31
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	4313      	orrs	r3, r2
 8000882:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bc90      	pop	{r4, r7}
 800088c:	4770      	bx	lr
	...

08000890 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80008a8:	43db      	mvns	r3, r3
 80008aa:	401a      	ands	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0318 	and.w	r3, r3, #24
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80008b4:	40d9      	lsrs	r1, r3
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	400b      	ands	r3, r1
 80008ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80008be:	431a      	orrs	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	0007ffff 	.word	0x0007ffff

080008d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f003 031f 	and.w	r3, r3, #31
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000904:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	6093      	str	r3, [r2, #8]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800092c:	d101      	bne.n	8000932 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800092e:	2301      	movs	r3, #1
 8000930:	e000      	b.n	8000934 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000950:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000954:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800097c:	d101      	bne.n	8000982 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800097e:	2301      	movs	r3, #1
 8000980:	e000      	b.n	8000984 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80009a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009a4:	f043 0201 	orr.w	r2, r3, #1
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d101      	bne.n	80009d0 <LL_ADC_IsEnabled+0x18>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e000      	b.n	80009d2 <LL_ADC_IsEnabled+0x1a>
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80009ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009f2:	f043 0204 	orr.w	r2, r3, #4
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d101      	bne.n	8000a1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	2b08      	cmp	r3, #8
 8000a3e:	d101      	bne.n	8000a44 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e16b      	b.n	8000d46 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d109      	bne.n	8000a90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f006 fa2d 	bl	8006edc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff3f 	bl	8000918 <LL_ADC_IsDeepPowerDownEnabled>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d004      	beq.n	8000aaa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff25 	bl	80008f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff5a 	bl	8000968 <LL_ADC_IsInternalRegulatorEnabled>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d113      	bne.n	8000ae2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff3e 	bl	8000940 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ac4:	4ba2      	ldr	r3, [pc, #648]	; (8000d50 <HAL_ADC_Init+0x2fc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	099b      	lsrs	r3, r3, #6
 8000aca:	4aa2      	ldr	r2, [pc, #648]	; (8000d54 <HAL_ADC_Init+0x300>)
 8000acc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad0:	099b      	lsrs	r3, r3, #6
 8000ad2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ad4:	e002      	b.n	8000adc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1f9      	bne.n	8000ad6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff3e 	bl	8000968 <LL_ADC_IsInternalRegulatorEnabled>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d10d      	bne.n	8000b0e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af6:	f043 0210 	orr.w	r2, r3, #16
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	f043 0201 	orr.w	r2, r3, #1
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff77 	bl	8000a06 <LL_ADC_REG_IsConversionOngoing>
 8000b18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 8106 	bne.w	8000d34 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f040 8102 	bne.w	8000d34 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b38:	f043 0202 	orr.w	r2, r3, #2
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff37 	bl	80009b8 <LL_ADC_IsEnabled>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d111      	bne.n	8000b74 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b54:	f7ff ff30 	bl	80009b8 <LL_ADC_IsEnabled>
 8000b58:	4604      	mov	r4, r0
 8000b5a:	487f      	ldr	r0, [pc, #508]	; (8000d58 <HAL_ADC_Init+0x304>)
 8000b5c:	f7ff ff2c 	bl	80009b8 <LL_ADC_IsEnabled>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4323      	orrs	r3, r4
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d105      	bne.n	8000b74 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	487b      	ldr	r0, [pc, #492]	; (8000d5c <HAL_ADC_Init+0x308>)
 8000b70:	f7ff fd64 	bl	800063c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7f5b      	ldrb	r3, [r3, #29]
 8000b78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b7e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000b84:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000b8a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b92:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b94:	4313      	orrs	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d106      	bne.n	8000bb0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	045b      	lsls	r3, r3, #17
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d009      	beq.n	8000bcc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	4b63      	ldr	r3, [pc, #396]	; (8000d60 <HAL_ADC_Init+0x30c>)
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	6812      	ldr	r2, [r2, #0]
 8000bda:	69b9      	ldr	r1, [r7, #24]
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff03 	bl	8000a06 <LL_ADC_REG_IsConversionOngoing>
 8000c00:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff10 	bl	8000a2c <LL_ADC_INJ_IsConversionOngoing>
 8000c0c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d16d      	bne.n	8000cf0 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d16a      	bne.n	8000cf0 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c1e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c26:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c36:	f023 0302 	bic.w	r3, r3, #2
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	6812      	ldr	r2, [r2, #0]
 8000c3e:	69b9      	ldr	r1, [r7, #24]
 8000c40:	430b      	orrs	r3, r1
 8000c42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d017      	beq.n	8000c7c <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000c64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	6911      	ldr	r1, [r2, #16]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	430b      	orrs	r3, r1
 8000c76:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000c7a:	e013      	b.n	8000ca4 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	691a      	ldr	r2, [r3, #16]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ca0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d118      	bne.n	8000ce0 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000cb8:	f023 0304 	bic.w	r3, r3, #4
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000cc4:	4311      	orrs	r1, r2
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000cca:	4311      	orrs	r1, r2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f042 0201 	orr.w	r2, r2, #1
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	e007      	b.n	8000cf0 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	691a      	ldr	r2, [r3, #16]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d10c      	bne.n	8000d12 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f023 010f 	bic.w	r1, r3, #15
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a1b      	ldr	r3, [r3, #32]
 8000d06:	1e5a      	subs	r2, r3, #1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000d10:	e007      	b.n	8000d22 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 020f 	bic.w	r2, r2, #15
 8000d20:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d26:	f023 0303 	bic.w	r3, r3, #3
 8000d2a:	f043 0201 	orr.w	r2, r3, #1
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	65da      	str	r2, [r3, #92]	; 0x5c
 8000d32:	e007      	b.n	8000d44 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d38:	f043 0210 	orr.w	r2, r3, #16
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	053e2d63 	.word	0x053e2d63
 8000d58:	50000100 	.word	0x50000100
 8000d5c:	50000300 	.word	0x50000300
 8000d60:	fff04007 	.word	0xfff04007

08000d64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000d70:	4851      	ldr	r0, [pc, #324]	; (8000eb8 <HAL_ADC_Start_DMA+0x154>)
 8000d72:	f7ff fdb1 	bl	80008d8 <LL_ADC_GetMultimode>
 8000d76:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe42 	bl	8000a06 <LL_ADC_REG_IsConversionOngoing>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d101      	bne.n	8000d98 <HAL_ADC_Start_DMA+0x34>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e08a      	b.n	8000eae <HAL_ADC_Start_DMA+0x14a>
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	d002      	beq.n	8000db2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	2b09      	cmp	r3, #9
 8000db0:	d173      	bne.n	8000e9a <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f000 fc0c 	bl	80015d0 <ADC_Enable>
 8000db8:	4603      	mov	r3, r0
 8000dba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000dbc:	7dfb      	ldrb	r3, [r7, #23]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d166      	bne.n	8000e90 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000dca:	f023 0301 	bic.w	r3, r3, #1
 8000dce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a38      	ldr	r2, [pc, #224]	; (8000ebc <HAL_ADC_Start_DMA+0x158>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d002      	beq.n	8000de6 <HAL_ADC_Start_DMA+0x82>
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	e001      	b.n	8000dea <HAL_ADC_Start_DMA+0x86>
 8000de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d002      	beq.n	8000df8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d105      	bne.n	8000e04 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dfc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e14:	f023 0206 	bic.w	r2, r3, #6
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	661a      	str	r2, [r3, #96]	; 0x60
 8000e1c:	e002      	b.n	8000e24 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2200      	movs	r2, #0
 8000e22:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e28:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <HAL_ADC_Start_DMA+0x15c>)
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e30:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <HAL_ADC_Start_DMA+0x160>)
 8000e32:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e38:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <HAL_ADC_Start_DMA+0x164>)
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	221c      	movs	r2, #28
 8000e42:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0210 	orr.w	r2, r2, #16
 8000e5a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0201 	orr.w	r2, r2, #1
 8000e6a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3340      	adds	r3, #64	; 0x40
 8000e76:	4619      	mov	r1, r3
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f000 ff46 	bl	8001d0c <HAL_DMA_Start_IT>
 8000e80:	4603      	mov	r3, r0
 8000e82:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fda8 	bl	80009de <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8000e8e:	e00d      	b.n	8000eac <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8000e98:	e008      	b.n	8000eac <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000ea6:	e001      	b.n	8000eac <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	50000300 	.word	0x50000300
 8000ebc:	50000100 	.word	0x50000100
 8000ec0:	08001685 	.word	0x08001685
 8000ec4:	0800175d 	.word	0x0800175d
 8000ec8:	08001779 	.word	0x08001779

08000ecc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0a6      	sub	sp, #152	; 0x98
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d101      	bne.n	8000f2a <HAL_ADC_ConfigChannel+0x22>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e348      	b.n	80015bc <HAL_ADC_ConfigChannel+0x6b4>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fd65 	bl	8000a06 <LL_ADC_REG_IsConversionOngoing>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f040 832d 	bne.w	800159e <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6818      	ldr	r0, [r3, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	6859      	ldr	r1, [r3, #4]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	f7ff fc4b 	bl	80007ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fd53 	bl	8000a06 <LL_ADC_REG_IsConversionOngoing>
 8000f60:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fd5f 	bl	8000a2c <LL_ADC_INJ_IsConversionOngoing>
 8000f6e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f040 817b 	bne.w	8001272 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f040 8176 	bne.w	8001272 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f8e:	d10f      	bne.n	8000fb0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fc4f 	bl	800083e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fbf9 	bl	80007a0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000fae:	e00e      	b.n	8000fce <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	6819      	ldr	r1, [r3, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f7ff fc3e 	bl	800083e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fbe9 	bl	80007a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d022      	beq.n	8001036 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	6919      	ldr	r1, [r3, #16]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001000:	f7ff fb50 	bl	80006a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	6919      	ldr	r1, [r3, #16]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	461a      	mov	r2, r3
 8001012:	f7ff fb95 	bl	8000740 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	6919      	ldr	r1, [r3, #16]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	7f1b      	ldrb	r3, [r3, #28]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d102      	bne.n	800102c <HAL_ADC_ConfigChannel+0x124>
 8001026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800102a:	e000      	b.n	800102e <HAL_ADC_ConfigChannel+0x126>
 800102c:	2300      	movs	r3, #0
 800102e:	461a      	mov	r2, r3
 8001030:	f7ff fb9e 	bl	8000770 <LL_ADC_SetOffsetSaturation>
 8001034:	e11d      	b.n	8001272 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fb53 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10a      	bne.n	8001062 <HAL_ADC_ConfigChannel+0x15a>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fb48 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	0e9b      	lsrs	r3, r3, #26
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	e012      	b.n	8001088 <HAL_ADC_ConfigChannel+0x180>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fb3d 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800107e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001090:	2b00      	cmp	r3, #0
 8001092:	d105      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x198>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	0e9b      	lsrs	r3, r3, #26
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	e00a      	b.n	80010b6 <HAL_ADC_ConfigChannel+0x1ae>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010a8:	fa93 f3a3 	rbit	r3, r3
 80010ac:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80010ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d106      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fb24 	bl	8000710 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fb0a 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10a      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x1ec>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2101      	movs	r1, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff faff 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	0e9b      	lsrs	r3, r3, #26
 80010ee:	f003 021f 	and.w	r2, r3, #31
 80010f2:	e010      	b.n	8001116 <HAL_ADC_ConfigChannel+0x20e>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2101      	movs	r1, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff faf4 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800110c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800110e:	fab3 f383 	clz	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800111e:	2b00      	cmp	r3, #0
 8001120:	d105      	bne.n	800112e <HAL_ADC_ConfigChannel+0x226>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	0e9b      	lsrs	r3, r3, #26
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	e00a      	b.n	8001144 <HAL_ADC_ConfigChannel+0x23c>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800113c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800113e:	fab3 f383 	clz	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	429a      	cmp	r2, r3
 8001146:	d106      	bne.n	8001156 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	2101      	movs	r1, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fadd 	bl	8000710 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2102      	movs	r1, #2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fac3 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10a      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x27a>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2102      	movs	r1, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fab8 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	0e9b      	lsrs	r3, r3, #26
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	e010      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x29c>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2102      	movs	r1, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff faad 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001194:	fa93 f3a3 	rbit	r3, r3
 8001198:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800119a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800119c:	fab3 f383 	clz	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x2b4>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	0e9b      	lsrs	r3, r3, #26
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	e00a      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x2ca>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80011ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d106      	bne.n	80011e4 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	2102      	movs	r1, #2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fa96 	bl	8000710 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2103      	movs	r1, #3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fa7c 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10a      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x308>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2103      	movs	r1, #3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fa71 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	0e9b      	lsrs	r3, r3, #26
 800120a:	f003 021f 	and.w	r2, r3, #31
 800120e:	e010      	b.n	8001232 <HAL_ADC_ConfigChannel+0x32a>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2103      	movs	r1, #3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fa66 	bl	80006e8 <LL_ADC_GetOffsetChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <HAL_ADC_ConfigChannel+0x342>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	0e9b      	lsrs	r3, r3, #26
 8001244:	f003 031f 	and.w	r3, r3, #31
 8001248:	e00a      	b.n	8001260 <HAL_ADC_ConfigChannel+0x358>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	429a      	cmp	r2, r3
 8001262:	d106      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	2103      	movs	r1, #3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fa4f 	bl	8000710 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fb9e 	bl	80009b8 <LL_ADC_IsEnabled>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 810c 	bne.w	800149c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6819      	ldr	r1, [r3, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	461a      	mov	r2, r3
 8001292:	f7ff fafd 	bl	8000890 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	4aab      	ldr	r2, [pc, #684]	; (8001548 <HAL_ADC_ConfigChannel+0x640>)
 800129c:	4293      	cmp	r3, r2
 800129e:	f040 80fd 	bne.w	800149c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10b      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x3c2>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0e9b      	lsrs	r3, r3, #26
 80012b8:	3301      	adds	r3, #1
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	2b09      	cmp	r3, #9
 80012c0:	bf94      	ite	ls
 80012c2:	2301      	movls	r3, #1
 80012c4:	2300      	movhi	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	e012      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x3e8>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80012d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012da:	fab3 f383 	clz	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	3301      	adds	r3, #1
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	2b09      	cmp	r3, #9
 80012e8:	bf94      	ite	ls
 80012ea:	2301      	movls	r3, #1
 80012ec:	2300      	movhi	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d064      	beq.n	80013be <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d107      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x408>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	0e9b      	lsrs	r3, r3, #26
 8001306:	3301      	adds	r3, #1
 8001308:	069b      	lsls	r3, r3, #26
 800130a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800130e:	e00e      	b.n	800132e <HAL_ADC_ConfigChannel+0x426>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800131e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001320:	fab3 f383 	clz	r3, r3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	3301      	adds	r3, #1
 8001328:	069b      	lsls	r3, r3, #26
 800132a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_ADC_ConfigChannel+0x446>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	0e9b      	lsrs	r3, r3, #26
 8001340:	3301      	adds	r3, #1
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	2101      	movs	r1, #1
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	e010      	b.n	8001370 <HAL_ADC_ConfigChannel+0x468>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135e:	fab3 f383 	clz	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	3301      	adds	r3, #1
 8001366:	f003 031f 	and.w	r3, r3, #31
 800136a:	2101      	movs	r1, #1
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	ea42 0103 	orr.w	r1, r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10a      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x48e>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0e9b      	lsrs	r3, r3, #26
 8001386:	3301      	adds	r3, #1
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	051b      	lsls	r3, r3, #20
 8001394:	e011      	b.n	80013ba <HAL_ADC_ConfigChannel+0x4b2>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	fab3 f383 	clz	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	3301      	adds	r3, #1
 80013ae:	f003 021f 	and.w	r2, r3, #31
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013ba:	430b      	orrs	r3, r1
 80013bc:	e069      	b.n	8001492 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d107      	bne.n	80013da <HAL_ADC_ConfigChannel+0x4d2>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0e9b      	lsrs	r3, r3, #26
 80013d0:	3301      	adds	r3, #1
 80013d2:	069b      	lsls	r3, r3, #26
 80013d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013d8:	e00e      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x4f0>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	fa93 f3a3 	rbit	r3, r3
 80013e6:	61fb      	str	r3, [r7, #28]
  return result;
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	fab3 f383 	clz	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	3301      	adds	r3, #1
 80013f2:	069b      	lsls	r3, r3, #26
 80013f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x510>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0e9b      	lsrs	r3, r3, #26
 800140a:	3301      	adds	r3, #1
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	e010      	b.n	800143a <HAL_ADC_ConfigChannel+0x532>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	617b      	str	r3, [r7, #20]
  return result;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3301      	adds	r3, #1
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	ea42 0103 	orr.w	r1, r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10d      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x55e>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0e9b      	lsrs	r3, r3, #26
 8001450:	3301      	adds	r3, #1
 8001452:	f003 021f 	and.w	r2, r3, #31
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	3b1e      	subs	r3, #30
 800145e:	051b      	lsls	r3, r3, #20
 8001460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001464:	e014      	b.n	8001490 <HAL_ADC_ConfigChannel+0x588>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	60fb      	str	r3, [r7, #12]
  return result;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	fab3 f383 	clz	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	3301      	adds	r3, #1
 800147e:	f003 021f 	and.w	r2, r3, #31
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	3b1e      	subs	r3, #30
 800148a:	051b      	lsls	r3, r3, #20
 800148c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001490:	430b      	orrs	r3, r1
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	6892      	ldr	r2, [r2, #8]
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff f9d1 	bl	800083e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_ADC_ConfigChannel+0x644>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8083 	beq.w	80015b0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014aa:	4829      	ldr	r0, [pc, #164]	; (8001550 <HAL_ADC_ConfigChannel+0x648>)
 80014ac:	f7ff f8ec 	bl	8000688 <LL_ADC_GetCommonPathInternalCh>
 80014b0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a26      	ldr	r2, [pc, #152]	; (8001554 <HAL_ADC_ConfigChannel+0x64c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d004      	beq.n	80014c8 <HAL_ADC_ConfigChannel+0x5c0>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a25      	ldr	r2, [pc, #148]	; (8001558 <HAL_ADC_ConfigChannel+0x650>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d126      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d120      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014dc:	d168      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014e6:	4619      	mov	r1, r3
 80014e8:	4819      	ldr	r0, [pc, #100]	; (8001550 <HAL_ADC_ConfigChannel+0x648>)
 80014ea:	f7ff f8ba 	bl	8000662 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_ADC_ConfigChannel+0x654>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	099b      	lsrs	r3, r3, #6
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_ADC_ConfigChannel+0x658>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	099a      	lsrs	r2, r3, #6
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001506:	e002      	b.n	800150e <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3b01      	subs	r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f9      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001514:	e04c      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_ADC_ConfigChannel+0x65c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d125      	bne.n	800156c <HAL_ADC_ConfigChannel+0x664>
 8001520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d11f      	bne.n	800156c <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_ADC_ConfigChannel+0x660>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d03c      	beq.n	80015b0 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800153a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800153e:	4619      	mov	r1, r3
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <HAL_ADC_ConfigChannel+0x648>)
 8001542:	f7ff f88e 	bl	8000662 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001546:	e033      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x6a8>
 8001548:	407f0000 	.word	0x407f0000
 800154c:	80080000 	.word	0x80080000
 8001550:	50000300 	.word	0x50000300
 8001554:	c3210000 	.word	0xc3210000
 8001558:	90c00010 	.word	0x90c00010
 800155c:	20000008 	.word	0x20000008
 8001560:	053e2d63 	.word	0x053e2d63
 8001564:	c7520000 	.word	0xc7520000
 8001568:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <HAL_ADC_ConfigChannel+0x6bc>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d11c      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800157a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d116      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <HAL_ADC_ConfigChannel+0x6c0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d011      	beq.n	80015b0 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800158c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001590:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <HAL_ADC_ConfigChannel+0x6c4>)
 8001598:	f7ff f863 	bl	8000662 <LL_ADC_SetCommonPathInternalCh>
 800159c:	e008      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a2:	f043 0220 	orr.w	r2, r3, #32
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80015b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3798      	adds	r7, #152	; 0x98
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	cb840000 	.word	0xcb840000
 80015c8:	50000100 	.word	0x50000100
 80015cc:	50000300 	.word	0x50000300

080015d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff f9eb 	bl	80009b8 <LL_ADC_IsEnabled>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d146      	bne.n	8001676 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <ADC_Enable+0xb0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00d      	beq.n	8001612 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e032      	b.n	8001678 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f9ba 	bl	8000990 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800161c:	f7fe ffe0 	bl	80005e0 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001622:	e021      	b.n	8001668 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff f9c5 	bl	80009b8 <LL_ADC_IsEnabled>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d104      	bne.n	800163e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff f9a9 	bl	8000990 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800163e:	f7fe ffcf 	bl	80005e0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d90d      	bls.n	8001668 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	f043 0210 	orr.w	r2, r3, #16
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e007      	b.n	8001678 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b01      	cmp	r3, #1
 8001674:	d1d6      	bne.n	8001624 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	8000003f 	.word	0x8000003f

08001684 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001696:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800169a:	2b00      	cmp	r3, #0
 800169c:	d14b      	bne.n	8001736 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d021      	beq.n	80016fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff f882 	bl	80007c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d032      	beq.n	800172e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d12b      	bne.n	800172e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d11f      	bne.n	800172e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	f043 0201 	orr.w	r2, r3, #1
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80016fa:	e018      	b.n	800172e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d111      	bne.n	800172e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	f043 0201 	orr.w	r2, r3, #1
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff fbcc 	bl	8000ecc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001734:	e00e      	b.n	8001754 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7ff fbd6 	bl	8000ef4 <HAL_ADC_ErrorCallback>
}
 8001748:	e004      	b.n	8001754 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fbb8 	bl	8000ee0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	f043 0204 	orr.w	r2, r3, #4
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f7ff fba8 	bl	8000ef4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LL_ADC_IsEnabled>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <LL_ADC_IsEnabled+0x18>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <LL_ADC_IsEnabled+0x1a>
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d101      	bne.n	80017ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b0a1      	sub	sp, #132	; 0x84
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001812:	2302      	movs	r3, #2
 8001814:	e087      	b.n	8001926 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001826:	d102      	bne.n	800182e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001828:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	e001      	b.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10b      	bne.n	8001850 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	f043 0220 	orr.w	r2, r3, #32
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e06a      	b.n	8001926 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ffbd 	bl	80017d2 <LL_ADC_REG_IsConversionOngoing>
 8001858:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ffb7 	bl	80017d2 <LL_ADC_REG_IsConversionOngoing>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d14c      	bne.n	8001904 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800186a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800186c:	2b00      	cmp	r3, #0
 800186e:	d149      	bne.n	8001904 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001872:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d028      	beq.n	80018ce <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800187c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800188e:	035b      	lsls	r3, r3, #13
 8001890:	430b      	orrs	r3, r1
 8001892:	431a      	orrs	r2, r3
 8001894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001896:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001898:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800189c:	f7ff ff86 	bl	80017ac <LL_ADC_IsEnabled>
 80018a0:	4604      	mov	r4, r0
 80018a2:	4823      	ldr	r0, [pc, #140]	; (8001930 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80018a4:	f7ff ff82 	bl	80017ac <LL_ADC_IsEnabled>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4323      	orrs	r3, r4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d133      	bne.n	8001918 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80018b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018b8:	f023 030f 	bic.w	r3, r3, #15
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	6811      	ldr	r1, [r2, #0]
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	6892      	ldr	r2, [r2, #8]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	431a      	orrs	r2, r3
 80018c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018cc:	e024      	b.n	8001918 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80018ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80018de:	f7ff ff65 	bl	80017ac <LL_ADC_IsEnabled>
 80018e2:	4604      	mov	r4, r0
 80018e4:	4812      	ldr	r0, [pc, #72]	; (8001930 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80018e6:	f7ff ff61 	bl	80017ac <LL_ADC_IsEnabled>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4323      	orrs	r3, r4
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d112      	bne.n	8001918 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80018f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018fa:	f023 030f 	bic.w	r3, r3, #15
 80018fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001900:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001902:	e009      	b.n	8001918 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001916:	e000      	b.n	800191a <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001918:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001922:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001926:	4618      	mov	r0, r3
 8001928:	3784      	adds	r7, #132	; 0x84
 800192a:	46bd      	mov	sp, r7
 800192c:	bd90      	pop	{r4, r7, pc}
 800192e:	bf00      	nop
 8001930:	50000100 	.word	0x50000100
 8001934:	50000300 	.word	0x50000300

08001938 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e023      	b.n	8001992 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f005 fb28 	bl	8006fb4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4907      	ldr	r1, [pc, #28]	; (8001a38 <__NVIC_EnableIRQ+0x38>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	db0a      	blt.n	8001a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	490c      	ldr	r1, [pc, #48]	; (8001a88 <__NVIC_SetPriority+0x4c>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a64:	e00a      	b.n	8001a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4908      	ldr	r1, [pc, #32]	; (8001a8c <__NVIC_SetPriority+0x50>)
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	3b04      	subs	r3, #4
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	761a      	strb	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f1c3 0307 	rsb	r3, r3, #7
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	bf28      	it	cs
 8001aae:	2304      	movcs	r3, #4
 8001ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d902      	bls.n	8001ac0 <NVIC_EncodePriority+0x30>
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3b03      	subs	r3, #3
 8001abe:	e000      	b.n	8001ac2 <NVIC_EncodePriority+0x32>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	43d9      	mvns	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	4313      	orrs	r3, r2
         );
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	; 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b08:	d301      	bcc.n	8001b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00f      	b.n	8001b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <SysTick_Config+0x40>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b16:	210f      	movs	r1, #15
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f7ff ff8e 	bl	8001a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <SysTick_Config+0x40>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <SysTick_Config+0x40>)
 8001b28:	2207      	movs	r2, #7
 8001b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	e000e010 	.word	0xe000e010

08001b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff29 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff40 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff90 	bl	8001a90 <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5f 	bl	8001a3c <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff33 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa4 	bl	8001af8 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e08d      	b.n	8001cea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_DMA_Init+0x138>)
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d80f      	bhi.n	8001bfa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b45      	ldr	r3, [pc, #276]	; (8001cf8 <HAL_DMA_Init+0x13c>)
 8001be2:	4413      	add	r3, r2
 8001be4:	4a45      	ldr	r2, [pc, #276]	; (8001cfc <HAL_DMA_Init+0x140>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	009a      	lsls	r2, r3, #2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a42      	ldr	r2, [pc, #264]	; (8001d00 <HAL_DMA_Init+0x144>)
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
 8001bf8:	e00e      	b.n	8001c18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <HAL_DMA_Init+0x148>)
 8001c02:	4413      	add	r3, r2
 8001c04:	4a3d      	ldr	r2, [pc, #244]	; (8001cfc <HAL_DMA_Init+0x140>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	009a      	lsls	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a3c      	ldr	r2, [pc, #240]	; (8001d08 <HAL_DMA_Init+0x14c>)
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f9b6 	bl	8001fdc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c78:	d102      	bne.n	8001c80 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c94:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d010      	beq.n	8001cc0 <HAL_DMA_Init+0x104>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d80c      	bhi.n	8001cc0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f9d6 	bl	8002058 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	e008      	b.n	8001cd2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40020407 	.word	0x40020407
 8001cf8:	bffdfff8 	.word	0xbffdfff8
 8001cfc:	cccccccd 	.word	0xcccccccd
 8001d00:	40020000 	.word	0x40020000
 8001d04:	bffdfbf8 	.word	0xbffdfbf8
 8001d08:	40020400 	.word	0x40020400

08001d0c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_DMA_Start_IT+0x20>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e066      	b.n	8001dfa <HAL_DMA_Start_IT+0xee>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d155      	bne.n	8001dec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f8fb 	bl	8001f60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 020e 	orr.w	r2, r2, #14
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e00f      	b.n	8001da4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0204 	bic.w	r2, r2, #4
 8001d92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 020a 	orr.w	r2, r2, #10
 8001da2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0201 	orr.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e005      	b.n	8001df8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001df4:	2302      	movs	r3, #2
 8001df6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	2204      	movs	r2, #4
 8001e24:	409a      	lsls	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d026      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x7a>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d021      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d107      	bne.n	8001e56 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0204 	bic.w	r2, r2, #4
 8001e54:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f003 021f 	and.w	r2, r3, #31
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	2104      	movs	r1, #4
 8001e64:	fa01 f202 	lsl.w	r2, r1, r2
 8001e68:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d071      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e7a:	e06c      	b.n	8001f56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	2202      	movs	r2, #2
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d02e      	beq.n	8001eee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d029      	beq.n	8001eee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 020a 	bic.w	r2, r2, #10
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	2102      	movs	r1, #2
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d038      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001eec:	e033      	b.n	8001f56 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d02a      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d025      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 020e 	bic.w	r2, r2, #14
 8001f1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d004      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
}
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f76:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f88:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f003 021f 	and.w	r2, r3, #31
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d108      	bne.n	8001fc0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fbe:	e007      	b.n	8001fd0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d802      	bhi.n	8001ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	e001      	b.n	8001ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ff8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	3b08      	subs	r3, #8
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	009a      	lsls	r2, r3, #2
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	461a      	mov	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002026:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2201      	movs	r2, #1
 8002030:	409a      	lsls	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002036:	bf00      	nop
 8002038:	371c      	adds	r7, #28
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40020407 	.word	0x40020407
 8002048:	40020800 	.word	0x40020800
 800204c:	40020820 	.word	0x40020820
 8002050:	cccccccd 	.word	0xcccccccd
 8002054:	40020880 	.word	0x40020880

08002058 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	461a      	mov	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a08      	ldr	r2, [pc, #32]	; (800209c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800207a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3b01      	subs	r3, #1
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	2201      	movs	r2, #1
 8002086:	409a      	lsls	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	1000823f 	.word	0x1000823f
 800209c:	40020940 	.word	0x40020940

080020a0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e147      	b.n	8002342 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f004 ff94 	bl	8006ff4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0210 	bic.w	r2, r2, #16
 80020da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020dc:	f7fe fa80 	bl	80005e0 <HAL_GetTick>
 80020e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80020e2:	e012      	b.n	800210a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80020e4:	f7fe fa7c 	bl	80005e0 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b0a      	cmp	r3, #10
 80020f0:	d90b      	bls.n	800210a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f6:	f043 0201 	orr.w	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2203      	movs	r2, #3
 8002102:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e11b      	b.n	8002342 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b08      	cmp	r3, #8
 8002116:	d0e5      	beq.n	80020e4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002128:	f7fe fa5a 	bl	80005e0 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800212e:	e012      	b.n	8002156 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002130:	f7fe fa56 	bl	80005e0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b0a      	cmp	r3, #10
 800213c:	d90b      	bls.n	8002156 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0f5      	b.n	8002342 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0e5      	beq.n	8002130 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0202 	orr.w	r2, r2, #2
 8002172:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a74      	ldr	r2, [pc, #464]	; (800234c <HAL_FDCAN_Init+0x2ac>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d103      	bne.n	8002186 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800217e:	4a74      	ldr	r2, [pc, #464]	; (8002350 <HAL_FDCAN_Init+0x2b0>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7c1b      	ldrb	r3, [r3, #16]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d108      	bne.n	80021a0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699a      	ldr	r2, [r3, #24]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800219c:	619a      	str	r2, [r3, #24]
 800219e:	e007      	b.n	80021b0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7c5b      	ldrb	r3, [r3, #17]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d108      	bne.n	80021ca <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c6:	619a      	str	r2, [r3, #24]
 80021c8:	e007      	b.n	80021da <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7c9b      	ldrb	r3, [r3, #18]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d108      	bne.n	80021f4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021f0:	619a      	str	r2, [r3, #24]
 80021f2:	e007      	b.n	8002204 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002202:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002228:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0210 	bic.w	r2, r2, #16
 8002238:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d108      	bne.n	8002254 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0204 	orr.w	r2, r2, #4
 8002250:	619a      	str	r2, [r3, #24]
 8002252:	e02c      	b.n	80022ae <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d028      	beq.n	80022ae <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d01c      	beq.n	800229e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002272:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0210 	orr.w	r2, r2, #16
 8002282:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d110      	bne.n	80022ae <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0220 	orr.w	r2, r2, #32
 800229a:	619a      	str	r2, [r3, #24]
 800229c:	e007      	b.n	80022ae <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0220 	orr.w	r2, r2, #32
 80022ac:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022be:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022c6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022d6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022d8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022e2:	d115      	bne.n	8002310 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	3b01      	subs	r3, #1
 80022f0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022f2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	3b01      	subs	r3, #1
 80022fa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80022fc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	3b01      	subs	r3, #1
 8002306:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800230c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800230e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fc6e 	bl	8002c08 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40006400 	.word	0x40006400
 8002350:	40006500 	.word	0x40006500

08002354 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002364:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002366:	7dfb      	ldrb	r3, [r7, #23]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d002      	beq.n	8002372 <HAL_FDCAN_ConfigFilter+0x1e>
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d13d      	bne.n	80023ee <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d119      	bne.n	80023ae <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002386:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800238e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e01d      	b.n	80023ea <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	075a      	lsls	r2, r3, #29
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	079a      	lsls	r2, r3, #30
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3304      	adds	r3, #4
 80023e2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e006      	b.n	80023fc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	f043 0202 	orr.w	r2, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d116      	bne.n	8002450 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800242a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	011a      	lsls	r2, r3, #4
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	431a      	orrs	r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	431a      	orrs	r2, r3
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	431a      	orrs	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e006      	b.n	800245e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002454:	f043 0204 	orr.w	r2, r3, #4
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d110      	bne.n	80024a0 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	e006      	b.n	80024ae <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a4:	f043 0204 	orr.w	r2, r3, #4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d12c      	bne.n	800252c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e023      	b.n	800253a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024fa:	0c1b      	lsrs	r3, r3, #16
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fbd3 	bl	8002cb4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2101      	movs	r1, #1
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800251e:	2201      	movs	r2, #1
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e006      	b.n	800253a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002530:	f043 0208 	orr.w	r2, r3, #8
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002544:	b480      	push	{r7}
 8002546:	b08b      	sub	sp, #44	; 0x2c
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002558:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800255a:	7efb      	ldrb	r3, [r7, #27]
 800255c:	2b02      	cmp	r3, #2
 800255e:	f040 80bc 	bne.w	80026da <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d121      	bne.n	80025ac <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0af      	b.n	80026e8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	e020      	b.n	80025ee <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e08d      	b.n	80026e8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d107      	bne.n	8002612 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0c9b      	lsrs	r3, r3, #18
 8002608:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e005      	b.n	800261e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	3304      	adds	r3, #4
 800263a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b29a      	uxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e1b      	lsrs	r3, r3, #24
 8002670:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0fda      	lsrs	r2, r3, #31
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	3304      	adds	r3, #4
 8002686:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	e00a      	b.n	80026a8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	441a      	add	r2, r3
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	440b      	add	r3, r1
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	3301      	adds	r3, #1
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
 80026b2:	461a      	mov	r2, r3
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d3eb      	bcc.n	8002692 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	d105      	bne.n	80026cc <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80026ca:	e004      	b.n	80026d6 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e006      	b.n	80026e8 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	f043 0208 	orr.w	r2, r3, #8
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	372c      	adds	r7, #44	; 0x2c
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	08007808 	.word	0x08007808

080026f8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800270a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d003      	beq.n	800271a <HAL_FDCAN_ActivateNotification+0x22>
 8002712:	7dfb      	ldrb	r3, [r7, #23]
 8002714:	2b02      	cmp	r3, #2
 8002716:	f040 80c8 	bne.w	80028aa <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <HAL_FDCAN_ActivateNotification+0x3e>
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d03b      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d031      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d027      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d01d      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d013      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00c      	beq.n	80027be <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d107      	bne.n	80027be <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_FDCAN_ActivateNotification+0xda>
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d13b      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d131      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d127      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d11d      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002814:	2b00      	cmp	r3, #0
 8002816:	d004      	beq.n	8002822 <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	d113      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0202 	orr.w	r2, r2, #2
 8002858:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	430a      	orrs	r2, r1
 8002874:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	430a      	orrs	r2, r1
 8002892:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e006      	b.n	80028b8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ae:	f043 0202 	orr.w	r2, r3, #2
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	4013      	ands	r3, r2
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	6a3a      	ldr	r2, [r7, #32]
 80028f8:	4013      	ands	r3, r2
 80028fa:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002906:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	4013      	ands	r3, r2
 8002912:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800291e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002932:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002936:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4013      	ands	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00d      	beq.n	800296e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2240      	movs	r2, #64	; 0x40
 8002966:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f92e 	bl	8002bca <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d014      	beq.n	80029b4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002992:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80029ac:	6939      	ldr	r1, [r7, #16]
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8ec 	bl	8002b8c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80029c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f8b6 	bl	8002b36 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80029d8:	6a39      	ldr	r1, [r7, #32]
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f003 fdc8 	bl	8006570 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80029ee:	69f9      	ldr	r1, [r7, #28]
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8ab 	bl	8002b4c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f8a0 	bl	8002b62 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01a      	beq.n	8002a66 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d013      	beq.n	8002a66 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a46:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4013      	ands	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002a5e:	68f9      	ldr	r1, [r7, #12]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f888 	bl	8002b76 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00e      	beq.n	8002a92 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a8a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f888 	bl	8002ba2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00e      	beq.n	8002abe <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ab6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f87c 	bl	8002bb6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d011      	beq.n	8002af0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ae2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f876 	bl	8002bf2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f858 	bl	8002bde <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002b2e:	bf00      	nop
 8002b30:	3728      	adds	r7, #40	; 0x28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002c10:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002c12:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c22:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	041a      	lsls	r2, r3, #16
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c48:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	061a      	lsls	r2, r3, #24
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e005      	b.n	8002c96 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3304      	adds	r3, #4
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d3f3      	bcc.n	8002c8a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	4000a400 	.word	0x4000a400

08002cb4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002cd2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	e00a      	b.n	8002cf6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002ce8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002cee:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002cf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cf4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002d00:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002d06:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002d0c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	3304      	adds	r3, #4
 8002d32:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e020      	b.n	8002d88 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3303      	adds	r3, #3
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	3302      	adds	r3, #2
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	440b      	add	r3, r1
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d5e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3301      	adds	r3, #1
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	440b      	add	r3, r1
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002d6c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	440a      	add	r2, r1
 8002d74:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002d76:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3304      	adds	r3, #4
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	4a06      	ldr	r2, [pc, #24]	; (8002da8 <FDCAN_CopyMessageToRAM+0xf4>)
 8002d90:	5cd3      	ldrb	r3, [r2, r3]
 8002d92:	461a      	mov	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d3d5      	bcc.n	8002d46 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	08007808 	.word	0x08007808

08002dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002dba:	e15a      	b.n	8003072 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 814c 	beq.w	800306c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x38>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b12      	cmp	r3, #18
 8002de2:	d123      	bne.n	8002e2c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	08da      	lsrs	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3208      	adds	r2, #8
 8002dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	6939      	ldr	r1, [r7, #16]
 8002e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d00b      	beq.n	8002e80 <HAL_GPIO_Init+0xd4>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d007      	beq.n	8002e80 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e74:	2b11      	cmp	r3, #17
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b12      	cmp	r3, #18
 8002e7e:	d130      	bne.n	8002ee2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f003 0201 	and.w	r2, r3, #1
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2203      	movs	r2, #3
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80a6 	beq.w	800306c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f20:	4b5b      	ldr	r3, [pc, #364]	; (8003090 <HAL_GPIO_Init+0x2e4>)
 8002f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f24:	4a5a      	ldr	r2, [pc, #360]	; (8003090 <HAL_GPIO_Init+0x2e4>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6613      	str	r3, [r2, #96]	; 0x60
 8002f2c:	4b58      	ldr	r3, [pc, #352]	; (8003090 <HAL_GPIO_Init+0x2e4>)
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f38:	4a56      	ldr	r2, [pc, #344]	; (8003094 <HAL_GPIO_Init+0x2e8>)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	3302      	adds	r3, #2
 8002f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	220f      	movs	r2, #15
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f62:	d01f      	beq.n	8002fa4 <HAL_GPIO_Init+0x1f8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a4c      	ldr	r2, [pc, #304]	; (8003098 <HAL_GPIO_Init+0x2ec>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d019      	beq.n	8002fa0 <HAL_GPIO_Init+0x1f4>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a4b      	ldr	r2, [pc, #300]	; (800309c <HAL_GPIO_Init+0x2f0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_GPIO_Init+0x1f0>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a4a      	ldr	r2, [pc, #296]	; (80030a0 <HAL_GPIO_Init+0x2f4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00d      	beq.n	8002f98 <HAL_GPIO_Init+0x1ec>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a49      	ldr	r2, [pc, #292]	; (80030a4 <HAL_GPIO_Init+0x2f8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <HAL_GPIO_Init+0x1e8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a48      	ldr	r2, [pc, #288]	; (80030a8 <HAL_GPIO_Init+0x2fc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_GPIO_Init+0x1e4>
 8002f8c:	2305      	movs	r3, #5
 8002f8e:	e00a      	b.n	8002fa6 <HAL_GPIO_Init+0x1fa>
 8002f90:	2306      	movs	r3, #6
 8002f92:	e008      	b.n	8002fa6 <HAL_GPIO_Init+0x1fa>
 8002f94:	2304      	movs	r3, #4
 8002f96:	e006      	b.n	8002fa6 <HAL_GPIO_Init+0x1fa>
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e004      	b.n	8002fa6 <HAL_GPIO_Init+0x1fa>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e002      	b.n	8002fa6 <HAL_GPIO_Init+0x1fa>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_GPIO_Init+0x1fa>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	f002 0203 	and.w	r2, r2, #3
 8002fac:	0092      	lsls	r2, r2, #2
 8002fae:	4093      	lsls	r3, r2
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb6:	4937      	ldr	r1, [pc, #220]	; (8003094 <HAL_GPIO_Init+0x2e8>)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fc4:	4b39      	ldr	r3, [pc, #228]	; (80030ac <HAL_GPIO_Init+0x300>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fe8:	4a30      	ldr	r2, [pc, #192]	; (80030ac <HAL_GPIO_Init+0x300>)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002fee:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <HAL_GPIO_Init+0x300>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003012:	4a26      	ldr	r2, [pc, #152]	; (80030ac <HAL_GPIO_Init+0x300>)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <HAL_GPIO_Init+0x300>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	43db      	mvns	r3, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800303c:	4a1b      	ldr	r2, [pc, #108]	; (80030ac <HAL_GPIO_Init+0x300>)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003042:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <HAL_GPIO_Init+0x300>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	43db      	mvns	r3, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003066:	4a11      	ldr	r2, [pc, #68]	; (80030ac <HAL_GPIO_Init+0x300>)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3301      	adds	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	f47f ae9d 	bne.w	8002dbc <HAL_GPIO_Init+0x10>
  }
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	40010000 	.word	0x40010000
 8003098:	48000400 	.word	0x48000400
 800309c:	48000800 	.word	0x48000800
 80030a0:	48000c00 	.word	0x48000c00
 80030a4:	48001000 	.word	0x48001000
 80030a8:	48001400 	.word	0x48001400
 80030ac:	40010400 	.word	0x40010400

080030b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d141      	bne.n	8003142 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030be:	4b4b      	ldr	r3, [pc, #300]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ca:	d131      	bne.n	8003130 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030cc:	4b47      	ldr	r3, [pc, #284]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d2:	4a46      	ldr	r2, [pc, #280]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030dc:	4b43      	ldr	r3, [pc, #268]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030e4:	4a41      	ldr	r2, [pc, #260]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ec:	4b40      	ldr	r3, [pc, #256]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2232      	movs	r2, #50	; 0x32
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	4a3f      	ldr	r2, [pc, #252]	; (80031f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	0c9b      	lsrs	r3, r3, #18
 80030fe:	3301      	adds	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003102:	e002      	b.n	800310a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3b01      	subs	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800310a:	4b38      	ldr	r3, [pc, #224]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d102      	bne.n	800311e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f2      	bne.n	8003104 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800311e:	4b33      	ldr	r3, [pc, #204]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312a:	d158      	bne.n	80031de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e057      	b.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003130:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003136:	4a2d      	ldr	r2, [pc, #180]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003140:	e04d      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003148:	d141      	bne.n	80031ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800314a:	4b28      	ldr	r3, [pc, #160]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003156:	d131      	bne.n	80031bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003158:	4b24      	ldr	r3, [pc, #144]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800315e:	4a23      	ldr	r2, [pc, #140]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003164:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003168:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003170:	4a1e      	ldr	r2, [pc, #120]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003176:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003178:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2232      	movs	r2, #50	; 0x32
 800317e:	fb02 f303 	mul.w	r3, r2, r3
 8003182:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	0c9b      	lsrs	r3, r3, #18
 800318a:	3301      	adds	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800318e:	e002      	b.n	8003196 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3b01      	subs	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a2:	d102      	bne.n	80031aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f2      	bne.n	8003190 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b6:	d112      	bne.n	80031de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e011      	b.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031cc:	e007      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40007000 	.word	0x40007000
 80031f0:	20000008 	.word	0x20000008
 80031f4:	431bde83 	.word	0x431bde83

080031f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e308      	b.n	800381c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d075      	beq.n	8003302 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003216:	4ba3      	ldr	r3, [pc, #652]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003220:	4ba0      	ldr	r3, [pc, #640]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d102      	bne.n	8003236 <HAL_RCC_OscConfig+0x3e>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d002      	beq.n	800323c <HAL_RCC_OscConfig+0x44>
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d10b      	bne.n	8003254 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	4b99      	ldr	r3, [pc, #612]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d05b      	beq.n	8003300 <HAL_RCC_OscConfig+0x108>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d157      	bne.n	8003300 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e2e3      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325c:	d106      	bne.n	800326c <HAL_RCC_OscConfig+0x74>
 800325e:	4b91      	ldr	r3, [pc, #580]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a90      	ldr	r2, [pc, #576]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e01d      	b.n	80032a8 <HAL_RCC_OscConfig+0xb0>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x98>
 8003276:	4b8b      	ldr	r3, [pc, #556]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a8a      	ldr	r2, [pc, #552]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b88      	ldr	r3, [pc, #544]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a87      	ldr	r2, [pc, #540]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0xb0>
 8003290:	4b84      	ldr	r3, [pc, #528]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a83      	ldr	r2, [pc, #524]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b81      	ldr	r3, [pc, #516]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a80      	ldr	r2, [pc, #512]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 80032a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d013      	beq.n	80032d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fd f996 	bl	80005e0 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fd f992 	bl	80005e0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e2a8      	b.n	800381c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ca:	4b76      	ldr	r3, [pc, #472]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0xc0>
 80032d6:	e014      	b.n	8003302 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd f982 	bl	80005e0 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fd f97e 	bl	80005e0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e294      	b.n	800381c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f2:	4b6c      	ldr	r3, [pc, #432]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0xe8>
 80032fe:	e000      	b.n	8003302 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d075      	beq.n	80033fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800330e:	4b65      	ldr	r3, [pc, #404]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003318:	4b62      	ldr	r3, [pc, #392]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d102      	bne.n	800332e <HAL_RCC_OscConfig+0x136>
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d002      	beq.n	8003334 <HAL_RCC_OscConfig+0x13c>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b04      	cmp	r3, #4
 8003332:	d11f      	bne.n	8003374 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003334:	4b5b      	ldr	r3, [pc, #364]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_OscConfig+0x154>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e267      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b55      	ldr	r3, [pc, #340]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	4952      	ldr	r1, [pc, #328]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003360:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <HAL_RCC_OscConfig+0x2b0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd f8ef 	bl	8000548 <HAL_InitTick>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d043      	beq.n	80033f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e253      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d023      	beq.n	80033c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337c:	4b49      	ldr	r3, [pc, #292]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a48      	ldr	r2, [pc, #288]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fd f92a 	bl	80005e0 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003390:	f7fd f926 	bl	80005e0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e23c      	b.n	800381c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a2:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	061b      	lsls	r3, r3, #24
 80033bc:	4939      	ldr	r1, [pc, #228]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
 80033c2:	e01a      	b.n	80033fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c4:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a36      	ldr	r2, [pc, #216]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fd f906 	bl	80005e0 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fd f902 	bl	80005e0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e218      	b.n	800381c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ea:	4b2e      	ldr	r3, [pc, #184]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x1e0>
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d03c      	beq.n	8003480 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01c      	beq.n	8003448 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340e:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003414:	4a23      	ldr	r2, [pc, #140]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341e:	f7fd f8df 	bl	80005e0 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003426:	f7fd f8db 	bl	80005e0 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1f1      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 800343a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ef      	beq.n	8003426 <HAL_RCC_OscConfig+0x22e>
 8003446:	e01b      	b.n	8003480 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003448:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 800344a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344e:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fd f8c2 	bl	80005e0 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003460:	f7fd f8be 	bl	80005e0 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1d4      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ef      	bne.n	8003460 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80ab 	beq.w	80035e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348e:	2300      	movs	r3, #0
 8003490:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_RCC_OscConfig+0x2b4>
 800349e:	2301      	movs	r3, #1
 80034a0:	e005      	b.n	80034ae <HAL_RCC_OscConfig+0x2b6>
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	20000000 	.word	0x20000000
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00d      	beq.n	80034ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4baf      	ldr	r3, [pc, #700]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4aae      	ldr	r2, [pc, #696]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
 80034be:	4bac      	ldr	r3, [pc, #688]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034ca:	2301      	movs	r3, #1
 80034cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ce:	4ba9      	ldr	r3, [pc, #676]	; (8003774 <HAL_RCC_OscConfig+0x57c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d118      	bne.n	800350c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034da:	4ba6      	ldr	r3, [pc, #664]	; (8003774 <HAL_RCC_OscConfig+0x57c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4aa5      	ldr	r2, [pc, #660]	; (8003774 <HAL_RCC_OscConfig+0x57c>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e6:	f7fd f87b 	bl	80005e0 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ee:	f7fd f877 	bl	80005e0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e18d      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003500:	4b9c      	ldr	r3, [pc, #624]	; (8003774 <HAL_RCC_OscConfig+0x57c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d108      	bne.n	8003526 <HAL_RCC_OscConfig+0x32e>
 8003514:	4b96      	ldr	r3, [pc, #600]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	4a95      	ldr	r2, [pc, #596]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003524:	e024      	b.n	8003570 <HAL_RCC_OscConfig+0x378>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b05      	cmp	r3, #5
 800352c:	d110      	bne.n	8003550 <HAL_RCC_OscConfig+0x358>
 800352e:	4b90      	ldr	r3, [pc, #576]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	4a8e      	ldr	r2, [pc, #568]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800353e:	4b8c      	ldr	r3, [pc, #560]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	4a8a      	ldr	r2, [pc, #552]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800354e:	e00f      	b.n	8003570 <HAL_RCC_OscConfig+0x378>
 8003550:	4b87      	ldr	r3, [pc, #540]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	4a86      	ldr	r2, [pc, #536]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003560:	4b83      	ldr	r3, [pc, #524]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	4a82      	ldr	r2, [pc, #520]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003568:	f023 0304 	bic.w	r3, r3, #4
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d016      	beq.n	80035a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fd f832 	bl	80005e0 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fd f82e 	bl	80005e0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e142      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ed      	beq.n	8003580 <HAL_RCC_OscConfig+0x388>
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7fd f81b 	bl	80005e0 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fd f817 	bl	80005e0 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e12b      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ed      	bne.n	80035ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035d2:	7ffb      	ldrb	r3, [r7, #31]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d8:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	4a64      	ldr	r2, [pc, #400]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80035de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d03c      	beq.n	800366a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01c      	beq.n	8003632 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035f8:	4b5d      	ldr	r3, [pc, #372]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80035fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fe:	4a5c      	ldr	r2, [pc, #368]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fc ffea 	bl	80005e0 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003610:	f7fc ffe6 	bl	80005e0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0fc      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003622:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <HAL_RCC_OscConfig+0x418>
 8003630:	e01b      	b.n	800366a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003632:	4b4f      	ldr	r3, [pc, #316]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003634:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003638:	4a4d      	ldr	r2, [pc, #308]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fc ffcd 	bl	80005e0 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800364a:	f7fc ffc9 	bl	80005e0 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0df      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800365c:	4b44      	ldr	r3, [pc, #272]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800365e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ef      	bne.n	800364a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80d3 	beq.w	800381a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b0c      	cmp	r3, #12
 800367e:	f000 808d 	beq.w	800379c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d15a      	bne.n	8003740 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	4b39      	ldr	r3, [pc, #228]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a38      	ldr	r2, [pc, #224]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fc ffa3 	bl	80005e0 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7fc ff9f 	bl	80005e0 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0b5      	b.n	800381c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b0:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036bc:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <HAL_RCC_OscConfig+0x580>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6a11      	ldr	r1, [r2, #32]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036cc:	3a01      	subs	r2, #1
 80036ce:	0112      	lsls	r2, r2, #4
 80036d0:	4311      	orrs	r1, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80036d6:	0212      	lsls	r2, r2, #8
 80036d8:	4311      	orrs	r1, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036de:	0852      	lsrs	r2, r2, #1
 80036e0:	3a01      	subs	r2, #1
 80036e2:	0552      	lsls	r2, r2, #21
 80036e4:	4311      	orrs	r1, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ea:	0852      	lsrs	r2, r2, #1
 80036ec:	3a01      	subs	r2, #1
 80036ee:	0652      	lsls	r2, r2, #25
 80036f0:	4311      	orrs	r1, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036f6:	06d2      	lsls	r2, r2, #27
 80036f8:	430a      	orrs	r2, r1
 80036fa:	491d      	ldr	r1, [pc, #116]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003716:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fc ff62 	bl	80005e0 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003720:	f7fc ff5e 	bl	80005e0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e074      	b.n	800381c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x528>
 800373e:	e06c      	b.n	800381a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a04      	ldr	r2, [pc, #16]	; (8003770 <HAL_RCC_OscConfig+0x578>)
 800375e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fc ff3a 	bl	80005e0 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376e:	e00e      	b.n	800378e <HAL_RCC_OscConfig+0x596>
 8003770:	40021000 	.word	0x40021000
 8003774:	40007000 	.word	0x40007000
 8003778:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fc ff30 	bl	80005e0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e046      	b.n	800381c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800378e:	4b25      	ldr	r3, [pc, #148]	; (8003824 <HAL_RCC_OscConfig+0x62c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x584>
 800379a:	e03e      	b.n	800381a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e039      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80037a8:	4b1e      	ldr	r3, [pc, #120]	; (8003824 <HAL_RCC_OscConfig+0x62c>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f003 0203 	and.w	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d12c      	bne.n	8003816 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	3b01      	subs	r3, #1
 80037c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d123      	bne.n	8003816 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d11b      	bne.n	8003816 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d113      	bne.n	8003816 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	3b01      	subs	r3, #1
 80037fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d109      	bne.n	8003816 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	085b      	lsrs	r3, r3, #1
 800380e:	3b01      	subs	r3, #1
 8003810:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d001      	beq.n	800381a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3720      	adds	r7, #32
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000

08003828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e11e      	b.n	8003a7e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003840:	4b91      	ldr	r3, [pc, #580]	; (8003a88 <HAL_RCC_ClockConfig+0x260>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d910      	bls.n	8003870 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b8e      	ldr	r3, [pc, #568]	; (8003a88 <HAL_RCC_ClockConfig+0x260>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 020f 	bic.w	r2, r3, #15
 8003856:	498c      	ldr	r1, [pc, #560]	; (8003a88 <HAL_RCC_ClockConfig+0x260>)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b8a      	ldr	r3, [pc, #552]	; (8003a88 <HAL_RCC_ClockConfig+0x260>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e106      	b.n	8003a7e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d073      	beq.n	8003964 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d129      	bne.n	80038d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003884:	4b81      	ldr	r3, [pc, #516]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0f4      	b.n	8003a7e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003894:	f000 f99e 	bl	8003bd4 <RCC_GetSysClockFreqFromPLLSource>
 8003898:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4a7c      	ldr	r2, [pc, #496]	; (8003a90 <HAL_RCC_ClockConfig+0x268>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d93f      	bls.n	8003922 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038a2:	4b7a      	ldr	r3, [pc, #488]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d033      	beq.n	8003922 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d12f      	bne.n	8003922 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038c2:	4b72      	ldr	r3, [pc, #456]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ca:	4a70      	ldr	r2, [pc, #448]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 80038cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	e024      	b.n	8003922 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e0:	4b6a      	ldr	r3, [pc, #424]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0c6      	b.n	8003a7e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f0:	4b66      	ldr	r3, [pc, #408]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0be      	b.n	8003a7e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003900:	f000 f8ce 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8003904:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4a61      	ldr	r2, [pc, #388]	; (8003a90 <HAL_RCC_ClockConfig+0x268>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d909      	bls.n	8003922 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800390e:	4b5f      	ldr	r3, [pc, #380]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003916:	4a5d      	ldr	r2, [pc, #372]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003922:	4b5a      	ldr	r3, [pc, #360]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4957      	ldr	r1, [pc, #348]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003934:	f7fc fe54 	bl	80005e0 <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	e00a      	b.n	8003952 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fc fe50 	bl	80005e0 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	; 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e095      	b.n	8003a7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	4b4e      	ldr	r3, [pc, #312]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 020c 	and.w	r2, r3, #12
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d1eb      	bne.n	800393c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d023      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800397c:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a42      	ldr	r2, [pc, #264]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003982:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003986:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003994:	4b3d      	ldr	r3, [pc, #244]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800399c:	4a3b      	ldr	r2, [pc, #236]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 800399e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a4:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4936      	ldr	r1, [pc, #216]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
 80039b6:	e008      	b.n	80039ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b80      	cmp	r3, #128	; 0x80
 80039bc:	d105      	bne.n	80039ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039be:	4b33      	ldr	r3, [pc, #204]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	4a32      	ldr	r2, [pc, #200]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 80039c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ca:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_RCC_ClockConfig+0x260>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d21d      	bcs.n	8003a14 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d8:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <HAL_RCC_ClockConfig+0x260>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f023 020f 	bic.w	r2, r3, #15
 80039e0:	4929      	ldr	r1, [pc, #164]	; (8003a88 <HAL_RCC_ClockConfig+0x260>)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039e8:	f7fc fdfa 	bl	80005e0 <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f0:	f7fc fdf6 	bl	80005e0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e03b      	b.n	8003a7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <HAL_RCC_ClockConfig+0x260>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1ed      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a20:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4917      	ldr	r1, [pc, #92]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	490f      	ldr	r1, [pc, #60]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a52:	f000 f825 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8003a56:	4601      	mov	r1, r0
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <HAL_RCC_ClockConfig+0x264>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <HAL_RCC_ClockConfig+0x26c>)
 8003a64:	5cd3      	ldrb	r3, [r2, r3]
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <HAL_RCC_ClockConfig+0x270>)
 8003a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a72:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <HAL_RCC_ClockConfig+0x274>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fc fd66 	bl	8000548 <HAL_InitTick>
 8003a7c:	4603      	mov	r3, r0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40022000 	.word	0x40022000
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	04c4b400 	.word	0x04c4b400
 8003a94:	08007818 	.word	0x08007818
 8003a98:	20000008 	.word	0x20000008
 8003a9c:	20000000 	.word	0x20000000

08003aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d102      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ab2:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e047      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d102      	bne.n	8003aca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ac4:	4b26      	ldr	r3, [pc, #152]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e03e      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003aca:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	d136      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ad6:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	3301      	adds	r3, #1
 8003aec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d10c      	bne.n	8003b0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003af4:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	4a16      	ldr	r2, [pc, #88]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003afe:	68d2      	ldr	r2, [r2, #12]
 8003b00:	0a12      	lsrs	r2, r2, #8
 8003b02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	617b      	str	r3, [r7, #20]
      break;
 8003b0c:	e00c      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b0e:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	4a10      	ldr	r2, [pc, #64]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b18:	68d2      	ldr	r2, [r2, #12]
 8003b1a:	0a12      	lsrs	r2, r2, #8
 8003b1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
      break;
 8003b26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	0e5b      	lsrs	r3, r3, #25
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e001      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b48:	693b      	ldr	r3, [r7, #16]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	00f42400 	.word	0x00f42400
 8003b60:	016e3600 	.word	0x016e3600

08003b64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000008 	.word	0x20000008

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b80:	f7ff fff0 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b84:	4601      	mov	r1, r0
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b92:	5cd3      	ldrb	r3, [r2, r3]
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	08007828 	.word	0x08007828

08003ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bac:	f7ff ffda 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003bb0:	4601      	mov	r1, r0
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	0adb      	lsrs	r3, r3, #11
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	08007828 	.word	0x08007828

08003bd4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bda:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d10c      	bne.n	8003c12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bf8:	4a17      	ldr	r2, [pc, #92]	; (8003c58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c02:	68d2      	ldr	r2, [r2, #12]
 8003c04:	0a12      	lsrs	r2, r2, #8
 8003c06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	617b      	str	r3, [r7, #20]
    break;
 8003c10:	e00c      	b.n	8003c2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c12:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	4a0e      	ldr	r2, [pc, #56]	; (8003c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c1c:	68d2      	ldr	r2, [r2, #12]
 8003c1e:	0a12      	lsrs	r2, r2, #8
 8003c20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]
    break;
 8003c2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	0e5b      	lsrs	r3, r3, #25
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	3301      	adds	r3, #1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c46:	687b      	ldr	r3, [r7, #4]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40021000 	.word	0x40021000
 8003c58:	016e3600 	.word	0x016e3600
 8003c5c:	00f42400 	.word	0x00f42400

08003c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c68:	2300      	movs	r3, #0
 8003c6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8098 	beq.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c82:	4b43      	ldr	r3, [pc, #268]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c92:	4a3f      	ldr	r2, [pc, #252]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c98:	6593      	str	r3, [r2, #88]	; 0x58
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003caa:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a39      	ldr	r2, [pc, #228]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb6:	f7fc fc93 	bl	80005e0 <HAL_GetTick>
 8003cba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cbc:	e009      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7fc fc8f 	bl	80005e0 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d902      	bls.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	74fb      	strb	r3, [r7, #19]
        break;
 8003cd0:	e005      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd2:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0ef      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d159      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ce4:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01e      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d019      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d00:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d0c:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	4a1b      	ldr	r2, [pc, #108]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d016      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fc fc4f 	bl	80005e0 <HAL_GetTick>
 8003d42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d44:	e00b      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fc fc4b 	bl	80005e0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d902      	bls.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ec      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d6c:	7cfb      	ldrb	r3, [r7, #19]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d72:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	4903      	ldr	r1, [pc, #12]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d88:	e008      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	74bb      	strb	r3, [r7, #18]
 8003d8e:	e005      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d9c:	7c7b      	ldrb	r3, [r7, #17]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da2:	4ba6      	ldr	r3, [pc, #664]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	4aa5      	ldr	r2, [pc, #660]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dba:	4ba0      	ldr	r3, [pc, #640]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	f023 0203 	bic.w	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	499c      	ldr	r1, [pc, #624]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ddc:	4b97      	ldr	r3, [pc, #604]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	f023 020c 	bic.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	4994      	ldr	r1, [pc, #592]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dfe:	4b8f      	ldr	r3, [pc, #572]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	498b      	ldr	r1, [pc, #556]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e20:	4b86      	ldr	r3, [pc, #536]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	4983      	ldr	r1, [pc, #524]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e42:	4b7e      	ldr	r3, [pc, #504]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	497a      	ldr	r1, [pc, #488]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e64:	4b75      	ldr	r3, [pc, #468]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	4972      	ldr	r1, [pc, #456]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e86:	4b6d      	ldr	r3, [pc, #436]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	4969      	ldr	r1, [pc, #420]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ea8:	4b64      	ldr	r3, [pc, #400]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	4961      	ldr	r1, [pc, #388]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eca:	4b5c      	ldr	r3, [pc, #368]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	4958      	ldr	r1, [pc, #352]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d015      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eec:	4b53      	ldr	r3, [pc, #332]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	4950      	ldr	r1, [pc, #320]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f0c:	4b4b      	ldr	r3, [pc, #300]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a4a      	ldr	r2, [pc, #296]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f24:	4b45      	ldr	r3, [pc, #276]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	4942      	ldr	r1, [pc, #264]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f42:	d105      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f44:	4b3d      	ldr	r3, [pc, #244]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a3c      	ldr	r2, [pc, #240]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f5c:	4b37      	ldr	r3, [pc, #220]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	4934      	ldr	r1, [pc, #208]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f7c:	4b2f      	ldr	r3, [pc, #188]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a2e      	ldr	r2, [pc, #184]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f86:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d015      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f94:	4b29      	ldr	r3, [pc, #164]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa2:	4926      	ldr	r1, [pc, #152]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb4:	4b21      	ldr	r3, [pc, #132]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a20      	ldr	r2, [pc, #128]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fbe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d015      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	4918      	ldr	r1, [pc, #96]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fea:	d105      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fec:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a12      	ldr	r2, [pc, #72]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d015      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004004:	4b0d      	ldr	r3, [pc, #52]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	490a      	ldr	r1, [pc, #40]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004022:	d105      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4a04      	ldr	r2, [pc, #16]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004030:	7cbb      	ldrb	r3, [r7, #18]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000

08004040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e01d      	b.n	800408e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f003 f85a 	bl	8007120 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f000 f97a 	bl	8004378 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2201      	movs	r2, #1
 80040a8:	6839      	ldr	r1, [r7, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fcea 	bl	8004a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <HAL_TIM_PWM_Start+0x98>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x4a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <HAL_TIM_PWM_Start+0x9c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x4a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_TIM_PWM_Start+0xa0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d009      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x4a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1a      	ldr	r2, [pc, #104]	; (800413c <HAL_TIM_PWM_Start+0xa4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x4a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_TIM_PWM_Start+0xa8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_PWM_Start+0x4e>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_TIM_PWM_Start+0x50>
 80040e6:	2300      	movs	r3, #0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <HAL_TIM_PWM_Start+0xac>)
 8004104:	4013      	ands	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b06      	cmp	r3, #6
 800410c:	d00b      	beq.n	8004126 <HAL_TIM_PWM_Start+0x8e>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d007      	beq.n	8004126 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40013400 	.word	0x40013400
 8004138:	40014000 	.word	0x40014000
 800413c:	40014400 	.word	0x40014400
 8004140:	40014800 	.word	0x40014800
 8004144:	00010007 	.word	0x00010007

08004148 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800415e:	2302      	movs	r3, #2
 8004160:	e105      	b.n	800436e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2202      	movs	r2, #2
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b14      	cmp	r3, #20
 8004176:	f200 80f0 	bhi.w	800435a <HAL_TIM_PWM_ConfigChannel+0x212>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	080041d5 	.word	0x080041d5
 8004184:	0800435b 	.word	0x0800435b
 8004188:	0800435b 	.word	0x0800435b
 800418c:	0800435b 	.word	0x0800435b
 8004190:	08004215 	.word	0x08004215
 8004194:	0800435b 	.word	0x0800435b
 8004198:	0800435b 	.word	0x0800435b
 800419c:	0800435b 	.word	0x0800435b
 80041a0:	08004257 	.word	0x08004257
 80041a4:	0800435b 	.word	0x0800435b
 80041a8:	0800435b 	.word	0x0800435b
 80041ac:	0800435b 	.word	0x0800435b
 80041b0:	08004297 	.word	0x08004297
 80041b4:	0800435b 	.word	0x0800435b
 80041b8:	0800435b 	.word	0x0800435b
 80041bc:	0800435b 	.word	0x0800435b
 80041c0:	080042d9 	.word	0x080042d9
 80041c4:	0800435b 	.word	0x0800435b
 80041c8:	0800435b 	.word	0x0800435b
 80041cc:	0800435b 	.word	0x0800435b
 80041d0:	08004319 	.word	0x08004319
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f95c 	bl	8004498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0208 	orr.w	r2, r2, #8
 80041ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0204 	bic.w	r2, r2, #4
 80041fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6999      	ldr	r1, [r3, #24]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	619a      	str	r2, [r3, #24]
      break;
 8004212:	e0a3      	b.n	800435c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f9cc 	bl	80045b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800422e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6999      	ldr	r1, [r3, #24]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	021a      	lsls	r2, r3, #8
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	619a      	str	r2, [r3, #24]
      break;
 8004254:	e082      	b.n	800435c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fa35 	bl	80046cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0208 	orr.w	r2, r2, #8
 8004270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0204 	bic.w	r2, r2, #4
 8004280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69d9      	ldr	r1, [r3, #28]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	61da      	str	r2, [r3, #28]
      break;
 8004294:	e062      	b.n	800435c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fa9d 	bl	80047dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69d9      	ldr	r1, [r3, #28]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	021a      	lsls	r2, r3, #8
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	61da      	str	r2, [r3, #28]
      break;
 80042d6:	e041      	b.n	800435c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68b9      	ldr	r1, [r7, #8]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fb06 	bl	80048f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0208 	orr.w	r2, r2, #8
 80042f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0204 	bic.w	r2, r2, #4
 8004302:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004316:	e021      	b.n	800435c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fb4a 	bl	80049b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004332:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004342:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	021a      	lsls	r2, r3, #8
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004358:	e000      	b.n	800435c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800435a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop

08004378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a3c      	ldr	r2, [pc, #240]	; (800447c <TIM_Base_SetConfig+0x104>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00f      	beq.n	80043b0 <TIM_Base_SetConfig+0x38>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d00b      	beq.n	80043b0 <TIM_Base_SetConfig+0x38>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a39      	ldr	r2, [pc, #228]	; (8004480 <TIM_Base_SetConfig+0x108>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d007      	beq.n	80043b0 <TIM_Base_SetConfig+0x38>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a38      	ldr	r2, [pc, #224]	; (8004484 <TIM_Base_SetConfig+0x10c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <TIM_Base_SetConfig+0x38>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a37      	ldr	r2, [pc, #220]	; (8004488 <TIM_Base_SetConfig+0x110>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d108      	bne.n	80043c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a2d      	ldr	r2, [pc, #180]	; (800447c <TIM_Base_SetConfig+0x104>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01b      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d0:	d017      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a2a      	ldr	r2, [pc, #168]	; (8004480 <TIM_Base_SetConfig+0x108>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a29      	ldr	r2, [pc, #164]	; (8004484 <TIM_Base_SetConfig+0x10c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00f      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a28      	ldr	r2, [pc, #160]	; (8004488 <TIM_Base_SetConfig+0x110>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00b      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a27      	ldr	r2, [pc, #156]	; (800448c <TIM_Base_SetConfig+0x114>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d007      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a26      	ldr	r2, [pc, #152]	; (8004490 <TIM_Base_SetConfig+0x118>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_Base_SetConfig+0x8a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a25      	ldr	r2, [pc, #148]	; (8004494 <TIM_Base_SetConfig+0x11c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d108      	bne.n	8004414 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a10      	ldr	r2, [pc, #64]	; (800447c <TIM_Base_SetConfig+0x104>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00f      	beq.n	8004460 <TIM_Base_SetConfig+0xe8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a11      	ldr	r2, [pc, #68]	; (8004488 <TIM_Base_SetConfig+0x110>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00b      	beq.n	8004460 <TIM_Base_SetConfig+0xe8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a10      	ldr	r2, [pc, #64]	; (800448c <TIM_Base_SetConfig+0x114>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d007      	beq.n	8004460 <TIM_Base_SetConfig+0xe8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a0f      	ldr	r2, [pc, #60]	; (8004490 <TIM_Base_SetConfig+0x118>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_Base_SetConfig+0xe8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a0e      	ldr	r2, [pc, #56]	; (8004494 <TIM_Base_SetConfig+0x11c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d103      	bne.n	8004468 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	615a      	str	r2, [r3, #20]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800
 8004488:	40013400 	.word	0x40013400
 800448c:	40014000 	.word	0x40014000
 8004490:	40014400 	.word	0x40014400
 8004494:	40014800 	.word	0x40014800

08004498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f023 0201 	bic.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f023 0302 	bic.w	r3, r3, #2
 80044e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a2c      	ldr	r2, [pc, #176]	; (80045a4 <TIM_OC1_SetConfig+0x10c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00f      	beq.n	8004518 <TIM_OC1_SetConfig+0x80>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a2b      	ldr	r2, [pc, #172]	; (80045a8 <TIM_OC1_SetConfig+0x110>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00b      	beq.n	8004518 <TIM_OC1_SetConfig+0x80>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <TIM_OC1_SetConfig+0x114>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d007      	beq.n	8004518 <TIM_OC1_SetConfig+0x80>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a29      	ldr	r2, [pc, #164]	; (80045b0 <TIM_OC1_SetConfig+0x118>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_OC1_SetConfig+0x80>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a28      	ldr	r2, [pc, #160]	; (80045b4 <TIM_OC1_SetConfig+0x11c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d10c      	bne.n	8004532 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f023 0308 	bic.w	r3, r3, #8
 800451e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 0304 	bic.w	r3, r3, #4
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1b      	ldr	r2, [pc, #108]	; (80045a4 <TIM_OC1_SetConfig+0x10c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00f      	beq.n	800455a <TIM_OC1_SetConfig+0xc2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1a      	ldr	r2, [pc, #104]	; (80045a8 <TIM_OC1_SetConfig+0x110>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00b      	beq.n	800455a <TIM_OC1_SetConfig+0xc2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a19      	ldr	r2, [pc, #100]	; (80045ac <TIM_OC1_SetConfig+0x114>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d007      	beq.n	800455a <TIM_OC1_SetConfig+0xc2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a18      	ldr	r2, [pc, #96]	; (80045b0 <TIM_OC1_SetConfig+0x118>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_OC1_SetConfig+0xc2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a17      	ldr	r2, [pc, #92]	; (80045b4 <TIM_OC1_SetConfig+0x11c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d111      	bne.n	800457e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	621a      	str	r2, [r3, #32]
}
 8004598:	bf00      	nop
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	40013400 	.word	0x40013400
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40014400 	.word	0x40014400
 80045b4:	40014800 	.word	0x40014800

080045b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 0210 	bic.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f023 0320 	bic.w	r3, r3, #32
 8004606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a28      	ldr	r2, [pc, #160]	; (80046b8 <TIM_OC2_SetConfig+0x100>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_OC2_SetConfig+0x6c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a27      	ldr	r2, [pc, #156]	; (80046bc <TIM_OC2_SetConfig+0x104>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d10d      	bne.n	8004640 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800462a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <TIM_OC2_SetConfig+0x100>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00f      	beq.n	8004668 <TIM_OC2_SetConfig+0xb0>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <TIM_OC2_SetConfig+0x104>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00b      	beq.n	8004668 <TIM_OC2_SetConfig+0xb0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a1b      	ldr	r2, [pc, #108]	; (80046c0 <TIM_OC2_SetConfig+0x108>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d007      	beq.n	8004668 <TIM_OC2_SetConfig+0xb0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <TIM_OC2_SetConfig+0x10c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_OC2_SetConfig+0xb0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a19      	ldr	r2, [pc, #100]	; (80046c8 <TIM_OC2_SetConfig+0x110>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d113      	bne.n	8004690 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800466e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40013400 	.word	0x40013400
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40014400 	.word	0x40014400
 80046c8:	40014800 	.word	0x40014800

080046cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <TIM_OC3_SetConfig+0xfc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_OC3_SetConfig+0x6a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a26      	ldr	r2, [pc, #152]	; (80047cc <TIM_OC3_SetConfig+0x100>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10d      	bne.n	8004752 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800473c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <TIM_OC3_SetConfig+0xfc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <TIM_OC3_SetConfig+0xae>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <TIM_OC3_SetConfig+0x100>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <TIM_OC3_SetConfig+0xae>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1a      	ldr	r2, [pc, #104]	; (80047d0 <TIM_OC3_SetConfig+0x104>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <TIM_OC3_SetConfig+0xae>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a19      	ldr	r2, [pc, #100]	; (80047d4 <TIM_OC3_SetConfig+0x108>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_OC3_SetConfig+0xae>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a18      	ldr	r2, [pc, #96]	; (80047d8 <TIM_OC3_SetConfig+0x10c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d113      	bne.n	80047a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40014400 	.word	0x40014400
 80047d8:	40014800 	.word	0x40014800

080047dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800482a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	031b      	lsls	r3, r3, #12
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a28      	ldr	r2, [pc, #160]	; (80048dc <TIM_OC4_SetConfig+0x100>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_OC4_SetConfig+0x6c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a27      	ldr	r2, [pc, #156]	; (80048e0 <TIM_OC4_SetConfig+0x104>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d10d      	bne.n	8004864 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800484e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	031b      	lsls	r3, r3, #12
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004862:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <TIM_OC4_SetConfig+0x100>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_OC4_SetConfig+0xb0>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a1c      	ldr	r2, [pc, #112]	; (80048e0 <TIM_OC4_SetConfig+0x104>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_OC4_SetConfig+0xb0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a1b      	ldr	r2, [pc, #108]	; (80048e4 <TIM_OC4_SetConfig+0x108>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_OC4_SetConfig+0xb0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a1a      	ldr	r2, [pc, #104]	; (80048e8 <TIM_OC4_SetConfig+0x10c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_OC4_SetConfig+0xb0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a19      	ldr	r2, [pc, #100]	; (80048ec <TIM_OC4_SetConfig+0x110>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d113      	bne.n	80048b4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004892:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800489a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	019b      	lsls	r3, r3, #6
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	019b      	lsls	r3, r3, #6
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40013400 	.word	0x40013400
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400
 80048ec:	40014800 	.word	0x40014800

080048f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004934:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	041b      	lsls	r3, r3, #16
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a17      	ldr	r2, [pc, #92]	; (80049a4 <TIM_OC5_SetConfig+0xb4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00f      	beq.n	800496a <TIM_OC5_SetConfig+0x7a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a16      	ldr	r2, [pc, #88]	; (80049a8 <TIM_OC5_SetConfig+0xb8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_OC5_SetConfig+0x7a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a15      	ldr	r2, [pc, #84]	; (80049ac <TIM_OC5_SetConfig+0xbc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <TIM_OC5_SetConfig+0x7a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a14      	ldr	r2, [pc, #80]	; (80049b0 <TIM_OC5_SetConfig+0xc0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_OC5_SetConfig+0x7a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a13      	ldr	r2, [pc, #76]	; (80049b4 <TIM_OC5_SetConfig+0xc4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d109      	bne.n	800497e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004970:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	621a      	str	r2, [r3, #32]
}
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	40013400 	.word	0x40013400
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40014400 	.word	0x40014400
 80049b4:	40014800 	.word	0x40014800

080049b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	051b      	lsls	r3, r3, #20
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a18      	ldr	r2, [pc, #96]	; (8004a70 <TIM_OC6_SetConfig+0xb8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00f      	beq.n	8004a34 <TIM_OC6_SetConfig+0x7c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <TIM_OC6_SetConfig+0xbc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00b      	beq.n	8004a34 <TIM_OC6_SetConfig+0x7c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a16      	ldr	r2, [pc, #88]	; (8004a78 <TIM_OC6_SetConfig+0xc0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <TIM_OC6_SetConfig+0x7c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <TIM_OC6_SetConfig+0xc4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_OC6_SetConfig+0x7c>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a14      	ldr	r2, [pc, #80]	; (8004a80 <TIM_OC6_SetConfig+0xc8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d109      	bne.n	8004a48 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	029b      	lsls	r3, r3, #10
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40013400 	.word	0x40013400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	40014800 	.word	0x40014800

08004a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2201      	movs	r2, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1a      	ldr	r2, [r3, #32]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e047      	b.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1d      	ldr	r2, [pc, #116]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1c      	ldr	r2, [pc, #112]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d108      	bne.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b4a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	40013400 	.word	0x40013400

08004b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e042      	b.n	8004c24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f002 fa73 	bl	800709c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2224      	movs	r2, #36	; 0x24
 8004bba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f8c2 	bl	8004d58 <UART_SetConfig>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e022      	b.n	8004c24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f001 fa70 	bl	80060cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f001 faf7 	bl	8006210 <UART_CheckIdleState>
 8004c22:	4603      	mov	r3, r0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	f040 8083 	bne.w	8004d4e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_UART_Transmit+0x28>
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e07b      	b.n	8004d50 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Transmit+0x3a>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e074      	b.n	8004d50 <HAL_UART_Transmit+0x124>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2221      	movs	r2, #33	; 0x21
 8004c7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004c7e:	f7fb fcaf 	bl	80005e0 <HAL_GetTick>
 8004c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	88fa      	ldrh	r2, [r7, #6]
 8004c88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	d108      	bne.n	8004cb0 <HAL_UART_Transmit+0x84>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d104      	bne.n	8004cb0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	e003      	b.n	8004cb8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cb8:	e02c      	b.n	8004d14 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2180      	movs	r1, #128	; 0x80
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f001 faeb 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e03d      	b.n	8004d50 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10b      	bne.n	8004cf2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	3302      	adds	r3, #2
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	e007      	b.n	8004d02 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1cc      	bne.n	8004cba <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2200      	movs	r2, #0
 8004d28:	2140      	movs	r1, #64	; 0x40
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f001 fab8 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e00a      	b.n	8004d50 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e000      	b.n	8004d50 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
  }
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3720      	adds	r7, #32
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d58:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004d5c:	b08a      	sub	sp, #40	; 0x28
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4ba4      	ldr	r3, [pc, #656]	; (8005028 <UART_SetConfig+0x2d0>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da0:	430b      	orrs	r3, r1
 8004da2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a99      	ldr	r2, [pc, #612]	; (800502c <UART_SetConfig+0x2d4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004dde:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	f023 010f 	bic.w	r1, r3, #15
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a8a      	ldr	r2, [pc, #552]	; (8005030 <UART_SetConfig+0x2d8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d126      	bne.n	8004e5a <UART_SetConfig+0x102>
 8004e0c:	4b89      	ldr	r3, [pc, #548]	; (8005034 <UART_SetConfig+0x2dc>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d81a      	bhi.n	8004e50 <UART_SetConfig+0xf8>
 8004e1a:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <UART_SetConfig+0xc8>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e31 	.word	0x08004e31
 8004e24:	08004e41 	.word	0x08004e41
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e49 	.word	0x08004e49
 8004e30:	2301      	movs	r3, #1
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e36:	e0d6      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e0d2      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004e40:	2304      	movs	r3, #4
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e0ce      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004e48:	2308      	movs	r3, #8
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e0ca      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004e50:	2310      	movs	r3, #16
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	bf00      	nop
 8004e58:	e0c5      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a76      	ldr	r2, [pc, #472]	; (8005038 <UART_SetConfig+0x2e0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d138      	bne.n	8004ed6 <UART_SetConfig+0x17e>
 8004e64:	4b73      	ldr	r3, [pc, #460]	; (8005034 <UART_SetConfig+0x2dc>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b0c      	cmp	r3, #12
 8004e70:	d82c      	bhi.n	8004ecc <UART_SetConfig+0x174>
 8004e72:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <UART_SetConfig+0x120>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004ead 	.word	0x08004ead
 8004e7c:	08004ecd 	.word	0x08004ecd
 8004e80:	08004ecd 	.word	0x08004ecd
 8004e84:	08004ecd 	.word	0x08004ecd
 8004e88:	08004ebd 	.word	0x08004ebd
 8004e8c:	08004ecd 	.word	0x08004ecd
 8004e90:	08004ecd 	.word	0x08004ecd
 8004e94:	08004ecd 	.word	0x08004ecd
 8004e98:	08004eb5 	.word	0x08004eb5
 8004e9c:	08004ecd 	.word	0x08004ecd
 8004ea0:	08004ecd 	.word	0x08004ecd
 8004ea4:	08004ecd 	.word	0x08004ecd
 8004ea8:	08004ec5 	.word	0x08004ec5
 8004eac:	2300      	movs	r3, #0
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb2:	e098      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eba:	e094      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec2:	e090      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eca:	e08c      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed2:	bf00      	nop
 8004ed4:	e087      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a58      	ldr	r2, [pc, #352]	; (800503c <UART_SetConfig+0x2e4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d125      	bne.n	8004f2c <UART_SetConfig+0x1d4>
 8004ee0:	4b54      	ldr	r3, [pc, #336]	; (8005034 <UART_SetConfig+0x2dc>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eea:	2b10      	cmp	r3, #16
 8004eec:	d011      	beq.n	8004f12 <UART_SetConfig+0x1ba>
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d802      	bhi.n	8004ef8 <UART_SetConfig+0x1a0>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <UART_SetConfig+0x1aa>
 8004ef6:	e014      	b.n	8004f22 <UART_SetConfig+0x1ca>
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	d006      	beq.n	8004f0a <UART_SetConfig+0x1b2>
 8004efc:	2b30      	cmp	r3, #48	; 0x30
 8004efe:	d00c      	beq.n	8004f1a <UART_SetConfig+0x1c2>
 8004f00:	e00f      	b.n	8004f22 <UART_SetConfig+0x1ca>
 8004f02:	2300      	movs	r3, #0
 8004f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f08:	e06d      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f10:	e069      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004f12:	2304      	movs	r3, #4
 8004f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f18:	e065      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f20:	e061      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004f22:	2310      	movs	r3, #16
 8004f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f28:	bf00      	nop
 8004f2a:	e05c      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a43      	ldr	r2, [pc, #268]	; (8005040 <UART_SetConfig+0x2e8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d125      	bne.n	8004f82 <UART_SetConfig+0x22a>
 8004f36:	4b3f      	ldr	r3, [pc, #252]	; (8005034 <UART_SetConfig+0x2dc>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d011      	beq.n	8004f68 <UART_SetConfig+0x210>
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d802      	bhi.n	8004f4e <UART_SetConfig+0x1f6>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <UART_SetConfig+0x200>
 8004f4c:	e014      	b.n	8004f78 <UART_SetConfig+0x220>
 8004f4e:	2b80      	cmp	r3, #128	; 0x80
 8004f50:	d006      	beq.n	8004f60 <UART_SetConfig+0x208>
 8004f52:	2bc0      	cmp	r3, #192	; 0xc0
 8004f54:	d00c      	beq.n	8004f70 <UART_SetConfig+0x218>
 8004f56:	e00f      	b.n	8004f78 <UART_SetConfig+0x220>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5e:	e042      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004f60:	2302      	movs	r3, #2
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e03e      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6e:	e03a      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004f70:	2308      	movs	r3, #8
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f76:	e036      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7e:	bf00      	nop
 8004f80:	e031      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a29      	ldr	r2, [pc, #164]	; (800502c <UART_SetConfig+0x2d4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d129      	bne.n	8004fe0 <UART_SetConfig+0x288>
 8004f8c:	4b29      	ldr	r3, [pc, #164]	; (8005034 <UART_SetConfig+0x2dc>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9a:	d014      	beq.n	8004fc6 <UART_SetConfig+0x26e>
 8004f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa0:	d802      	bhi.n	8004fa8 <UART_SetConfig+0x250>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <UART_SetConfig+0x25e>
 8004fa6:	e016      	b.n	8004fd6 <UART_SetConfig+0x27e>
 8004fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fac:	d007      	beq.n	8004fbe <UART_SetConfig+0x266>
 8004fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb2:	d00c      	beq.n	8004fce <UART_SetConfig+0x276>
 8004fb4:	e00f      	b.n	8004fd6 <UART_SetConfig+0x27e>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fbc:	e013      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc4:	e00f      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fcc:	e00b      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004fce:	2308      	movs	r3, #8
 8004fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd4:	e007      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004fd6:	2310      	movs	r3, #16
 8004fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fdc:	bf00      	nop
 8004fde:	e002      	b.n	8004fe6 <UART_SetConfig+0x28e>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a10      	ldr	r2, [pc, #64]	; (800502c <UART_SetConfig+0x2d4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	f040 842e 	bne.w	800584e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	f200 8169 	bhi.w	80052ce <UART_SetConfig+0x576>
 8004ffc:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <UART_SetConfig+0x2ac>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	08005045 	.word	0x08005045
 8005008:	080052cf 	.word	0x080052cf
 800500c:	080050e7 	.word	0x080050e7
 8005010:	080052cf 	.word	0x080052cf
 8005014:	0800517f 	.word	0x0800517f
 8005018:	080052cf 	.word	0x080052cf
 800501c:	080052cf 	.word	0x080052cf
 8005020:	080052cf 	.word	0x080052cf
 8005024:	08005221 	.word	0x08005221
 8005028:	cfff69f3 	.word	0xcfff69f3
 800502c:	40008000 	.word	0x40008000
 8005030:	40013800 	.word	0x40013800
 8005034:	40021000 	.word	0x40021000
 8005038:	40004400 	.word	0x40004400
 800503c:	40004800 	.word	0x40004800
 8005040:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005044:	f7fe fd9a 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8005048:	4602      	mov	r2, r0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	d044      	beq.n	80050dc <UART_SetConfig+0x384>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	2b01      	cmp	r3, #1
 8005058:	d03e      	beq.n	80050d8 <UART_SetConfig+0x380>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b02      	cmp	r3, #2
 8005060:	d038      	beq.n	80050d4 <UART_SetConfig+0x37c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	2b03      	cmp	r3, #3
 8005068:	d032      	beq.n	80050d0 <UART_SetConfig+0x378>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2b04      	cmp	r3, #4
 8005070:	d02c      	beq.n	80050cc <UART_SetConfig+0x374>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2b05      	cmp	r3, #5
 8005078:	d026      	beq.n	80050c8 <UART_SetConfig+0x370>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b06      	cmp	r3, #6
 8005080:	d020      	beq.n	80050c4 <UART_SetConfig+0x36c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b07      	cmp	r3, #7
 8005088:	d01a      	beq.n	80050c0 <UART_SetConfig+0x368>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b08      	cmp	r3, #8
 8005090:	d014      	beq.n	80050bc <UART_SetConfig+0x364>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2b09      	cmp	r3, #9
 8005098:	d00e      	beq.n	80050b8 <UART_SetConfig+0x360>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2b0a      	cmp	r3, #10
 80050a0:	d008      	beq.n	80050b4 <UART_SetConfig+0x35c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b0b      	cmp	r3, #11
 80050a8:	d102      	bne.n	80050b0 <UART_SetConfig+0x358>
 80050aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050ae:	e016      	b.n	80050de <UART_SetConfig+0x386>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e014      	b.n	80050de <UART_SetConfig+0x386>
 80050b4:	2380      	movs	r3, #128	; 0x80
 80050b6:	e012      	b.n	80050de <UART_SetConfig+0x386>
 80050b8:	2340      	movs	r3, #64	; 0x40
 80050ba:	e010      	b.n	80050de <UART_SetConfig+0x386>
 80050bc:	2320      	movs	r3, #32
 80050be:	e00e      	b.n	80050de <UART_SetConfig+0x386>
 80050c0:	2310      	movs	r3, #16
 80050c2:	e00c      	b.n	80050de <UART_SetConfig+0x386>
 80050c4:	230c      	movs	r3, #12
 80050c6:	e00a      	b.n	80050de <UART_SetConfig+0x386>
 80050c8:	230a      	movs	r3, #10
 80050ca:	e008      	b.n	80050de <UART_SetConfig+0x386>
 80050cc:	2308      	movs	r3, #8
 80050ce:	e006      	b.n	80050de <UART_SetConfig+0x386>
 80050d0:	2306      	movs	r3, #6
 80050d2:	e004      	b.n	80050de <UART_SetConfig+0x386>
 80050d4:	2304      	movs	r3, #4
 80050d6:	e002      	b.n	80050de <UART_SetConfig+0x386>
 80050d8:	2302      	movs	r3, #2
 80050da:	e000      	b.n	80050de <UART_SetConfig+0x386>
 80050dc:	2301      	movs	r3, #1
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	617b      	str	r3, [r7, #20]
        break;
 80050e4:	e0f6      	b.n	80052d4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d044      	beq.n	8005178 <UART_SetConfig+0x420>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d03e      	beq.n	8005174 <UART_SetConfig+0x41c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d038      	beq.n	8005170 <UART_SetConfig+0x418>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2b03      	cmp	r3, #3
 8005104:	d032      	beq.n	800516c <UART_SetConfig+0x414>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	2b04      	cmp	r3, #4
 800510c:	d02c      	beq.n	8005168 <UART_SetConfig+0x410>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	2b05      	cmp	r3, #5
 8005114:	d026      	beq.n	8005164 <UART_SetConfig+0x40c>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b06      	cmp	r3, #6
 800511c:	d020      	beq.n	8005160 <UART_SetConfig+0x408>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b07      	cmp	r3, #7
 8005124:	d01a      	beq.n	800515c <UART_SetConfig+0x404>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	2b08      	cmp	r3, #8
 800512c:	d014      	beq.n	8005158 <UART_SetConfig+0x400>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b09      	cmp	r3, #9
 8005134:	d00e      	beq.n	8005154 <UART_SetConfig+0x3fc>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b0a      	cmp	r3, #10
 800513c:	d008      	beq.n	8005150 <UART_SetConfig+0x3f8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	2b0b      	cmp	r3, #11
 8005144:	d102      	bne.n	800514c <UART_SetConfig+0x3f4>
 8005146:	f24f 4324 	movw	r3, #62500	; 0xf424
 800514a:	e016      	b.n	800517a <UART_SetConfig+0x422>
 800514c:	4ba1      	ldr	r3, [pc, #644]	; (80053d4 <UART_SetConfig+0x67c>)
 800514e:	e014      	b.n	800517a <UART_SetConfig+0x422>
 8005150:	4ba1      	ldr	r3, [pc, #644]	; (80053d8 <UART_SetConfig+0x680>)
 8005152:	e012      	b.n	800517a <UART_SetConfig+0x422>
 8005154:	4ba1      	ldr	r3, [pc, #644]	; (80053dc <UART_SetConfig+0x684>)
 8005156:	e010      	b.n	800517a <UART_SetConfig+0x422>
 8005158:	4ba1      	ldr	r3, [pc, #644]	; (80053e0 <UART_SetConfig+0x688>)
 800515a:	e00e      	b.n	800517a <UART_SetConfig+0x422>
 800515c:	4ba1      	ldr	r3, [pc, #644]	; (80053e4 <UART_SetConfig+0x68c>)
 800515e:	e00c      	b.n	800517a <UART_SetConfig+0x422>
 8005160:	4ba1      	ldr	r3, [pc, #644]	; (80053e8 <UART_SetConfig+0x690>)
 8005162:	e00a      	b.n	800517a <UART_SetConfig+0x422>
 8005164:	4ba1      	ldr	r3, [pc, #644]	; (80053ec <UART_SetConfig+0x694>)
 8005166:	e008      	b.n	800517a <UART_SetConfig+0x422>
 8005168:	4ba1      	ldr	r3, [pc, #644]	; (80053f0 <UART_SetConfig+0x698>)
 800516a:	e006      	b.n	800517a <UART_SetConfig+0x422>
 800516c:	4ba1      	ldr	r3, [pc, #644]	; (80053f4 <UART_SetConfig+0x69c>)
 800516e:	e004      	b.n	800517a <UART_SetConfig+0x422>
 8005170:	4ba1      	ldr	r3, [pc, #644]	; (80053f8 <UART_SetConfig+0x6a0>)
 8005172:	e002      	b.n	800517a <UART_SetConfig+0x422>
 8005174:	4ba1      	ldr	r3, [pc, #644]	; (80053fc <UART_SetConfig+0x6a4>)
 8005176:	e000      	b.n	800517a <UART_SetConfig+0x422>
 8005178:	4b96      	ldr	r3, [pc, #600]	; (80053d4 <UART_SetConfig+0x67c>)
 800517a:	617b      	str	r3, [r7, #20]
        break;
 800517c:	e0aa      	b.n	80052d4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800517e:	f7fe fc8f 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8005182:	4602      	mov	r2, r0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d044      	beq.n	8005216 <UART_SetConfig+0x4be>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b01      	cmp	r3, #1
 8005192:	d03e      	beq.n	8005212 <UART_SetConfig+0x4ba>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2b02      	cmp	r3, #2
 800519a:	d038      	beq.n	800520e <UART_SetConfig+0x4b6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d032      	beq.n	800520a <UART_SetConfig+0x4b2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d02c      	beq.n	8005206 <UART_SetConfig+0x4ae>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	2b05      	cmp	r3, #5
 80051b2:	d026      	beq.n	8005202 <UART_SetConfig+0x4aa>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	2b06      	cmp	r3, #6
 80051ba:	d020      	beq.n	80051fe <UART_SetConfig+0x4a6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	2b07      	cmp	r3, #7
 80051c2:	d01a      	beq.n	80051fa <UART_SetConfig+0x4a2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d014      	beq.n	80051f6 <UART_SetConfig+0x49e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2b09      	cmp	r3, #9
 80051d2:	d00e      	beq.n	80051f2 <UART_SetConfig+0x49a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	2b0a      	cmp	r3, #10
 80051da:	d008      	beq.n	80051ee <UART_SetConfig+0x496>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	2b0b      	cmp	r3, #11
 80051e2:	d102      	bne.n	80051ea <UART_SetConfig+0x492>
 80051e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051e8:	e016      	b.n	8005218 <UART_SetConfig+0x4c0>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e014      	b.n	8005218 <UART_SetConfig+0x4c0>
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	e012      	b.n	8005218 <UART_SetConfig+0x4c0>
 80051f2:	2340      	movs	r3, #64	; 0x40
 80051f4:	e010      	b.n	8005218 <UART_SetConfig+0x4c0>
 80051f6:	2320      	movs	r3, #32
 80051f8:	e00e      	b.n	8005218 <UART_SetConfig+0x4c0>
 80051fa:	2310      	movs	r3, #16
 80051fc:	e00c      	b.n	8005218 <UART_SetConfig+0x4c0>
 80051fe:	230c      	movs	r3, #12
 8005200:	e00a      	b.n	8005218 <UART_SetConfig+0x4c0>
 8005202:	230a      	movs	r3, #10
 8005204:	e008      	b.n	8005218 <UART_SetConfig+0x4c0>
 8005206:	2308      	movs	r3, #8
 8005208:	e006      	b.n	8005218 <UART_SetConfig+0x4c0>
 800520a:	2306      	movs	r3, #6
 800520c:	e004      	b.n	8005218 <UART_SetConfig+0x4c0>
 800520e:	2304      	movs	r3, #4
 8005210:	e002      	b.n	8005218 <UART_SetConfig+0x4c0>
 8005212:	2302      	movs	r3, #2
 8005214:	e000      	b.n	8005218 <UART_SetConfig+0x4c0>
 8005216:	2301      	movs	r3, #1
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	617b      	str	r3, [r7, #20]
        break;
 800521e:	e059      	b.n	80052d4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	2b00      	cmp	r3, #0
 8005226:	d04e      	beq.n	80052c6 <UART_SetConfig+0x56e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2b01      	cmp	r3, #1
 800522e:	d047      	beq.n	80052c0 <UART_SetConfig+0x568>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b02      	cmp	r3, #2
 8005236:	d040      	beq.n	80052ba <UART_SetConfig+0x562>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	2b03      	cmp	r3, #3
 800523e:	d039      	beq.n	80052b4 <UART_SetConfig+0x55c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	2b04      	cmp	r3, #4
 8005246:	d032      	beq.n	80052ae <UART_SetConfig+0x556>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	2b05      	cmp	r3, #5
 800524e:	d02b      	beq.n	80052a8 <UART_SetConfig+0x550>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	2b06      	cmp	r3, #6
 8005256:	d024      	beq.n	80052a2 <UART_SetConfig+0x54a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	2b07      	cmp	r3, #7
 800525e:	d01d      	beq.n	800529c <UART_SetConfig+0x544>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	2b08      	cmp	r3, #8
 8005266:	d016      	beq.n	8005296 <UART_SetConfig+0x53e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	2b09      	cmp	r3, #9
 800526e:	d00f      	beq.n	8005290 <UART_SetConfig+0x538>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	2b0a      	cmp	r3, #10
 8005276:	d008      	beq.n	800528a <UART_SetConfig+0x532>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	2b0b      	cmp	r3, #11
 800527e:	d101      	bne.n	8005284 <UART_SetConfig+0x52c>
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	e022      	b.n	80052ca <UART_SetConfig+0x572>
 8005284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005288:	e01f      	b.n	80052ca <UART_SetConfig+0x572>
 800528a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800528e:	e01c      	b.n	80052ca <UART_SetConfig+0x572>
 8005290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005294:	e019      	b.n	80052ca <UART_SetConfig+0x572>
 8005296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800529a:	e016      	b.n	80052ca <UART_SetConfig+0x572>
 800529c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052a0:	e013      	b.n	80052ca <UART_SetConfig+0x572>
 80052a2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80052a6:	e010      	b.n	80052ca <UART_SetConfig+0x572>
 80052a8:	f640 43cc 	movw	r3, #3276	; 0xccc
 80052ac:	e00d      	b.n	80052ca <UART_SetConfig+0x572>
 80052ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b2:	e00a      	b.n	80052ca <UART_SetConfig+0x572>
 80052b4:	f241 5355 	movw	r3, #5461	; 0x1555
 80052b8:	e007      	b.n	80052ca <UART_SetConfig+0x572>
 80052ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052be:	e004      	b.n	80052ca <UART_SetConfig+0x572>
 80052c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052c4:	e001      	b.n	80052ca <UART_SetConfig+0x572>
 80052c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ca:	617b      	str	r3, [r7, #20]
        break;
 80052cc:	e002      	b.n	80052d4 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	76fb      	strb	r3, [r7, #27]
        break;
 80052d2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 86cd 	beq.w	8006076 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d305      	bcc.n	80052f8 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d903      	bls.n	8005300 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	76fb      	strb	r3, [r7, #27]
 80052fc:	f000 bebb 	b.w	8006076 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8005300:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005304:	2b08      	cmp	r3, #8
 8005306:	f200 828d 	bhi.w	8005824 <UART_SetConfig+0xacc>
 800530a:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <UART_SetConfig+0x5b8>)
 800530c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005310:	08005335 	.word	0x08005335
 8005314:	08005825 	.word	0x08005825
 8005318:	0800549f 	.word	0x0800549f
 800531c:	08005825 	.word	0x08005825
 8005320:	08005595 	.word	0x08005595
 8005324:	08005825 	.word	0x08005825
 8005328:	08005825 	.word	0x08005825
 800532c:	08005825 	.word	0x08005825
 8005330:	080056d3 	.word	0x080056d3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005334:	f7fe fc22 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8005338:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	4618      	mov	r0, r3
 800533e:	f04f 0100 	mov.w	r1, #0
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d07d      	beq.n	8005446 <UART_SetConfig+0x6ee>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	2b01      	cmp	r3, #1
 8005350:	d074      	beq.n	800543c <UART_SetConfig+0x6e4>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	2b02      	cmp	r3, #2
 8005358:	d06b      	beq.n	8005432 <UART_SetConfig+0x6da>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2b03      	cmp	r3, #3
 8005360:	d062      	beq.n	8005428 <UART_SetConfig+0x6d0>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b04      	cmp	r3, #4
 8005368:	d059      	beq.n	800541e <UART_SetConfig+0x6c6>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b05      	cmp	r3, #5
 8005370:	d050      	beq.n	8005414 <UART_SetConfig+0x6bc>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b06      	cmp	r3, #6
 8005378:	d047      	beq.n	800540a <UART_SetConfig+0x6b2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b07      	cmp	r3, #7
 8005380:	d03e      	beq.n	8005400 <UART_SetConfig+0x6a8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	2b08      	cmp	r3, #8
 8005388:	d01f      	beq.n	80053ca <UART_SetConfig+0x672>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b09      	cmp	r3, #9
 8005390:	d016      	beq.n	80053c0 <UART_SetConfig+0x668>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b0a      	cmp	r3, #10
 8005398:	d00d      	beq.n	80053b6 <UART_SetConfig+0x65e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b0b      	cmp	r3, #11
 80053a0:	d104      	bne.n	80053ac <UART_SetConfig+0x654>
 80053a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053a6:	f04f 0400 	mov.w	r4, #0
 80053aa:	e050      	b.n	800544e <UART_SetConfig+0x6f6>
 80053ac:	f04f 0301 	mov.w	r3, #1
 80053b0:	f04f 0400 	mov.w	r4, #0
 80053b4:	e04b      	b.n	800544e <UART_SetConfig+0x6f6>
 80053b6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053ba:	f04f 0400 	mov.w	r4, #0
 80053be:	e046      	b.n	800544e <UART_SetConfig+0x6f6>
 80053c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80053c4:	f04f 0400 	mov.w	r4, #0
 80053c8:	e041      	b.n	800544e <UART_SetConfig+0x6f6>
 80053ca:	f04f 0320 	mov.w	r3, #32
 80053ce:	f04f 0400 	mov.w	r4, #0
 80053d2:	e03c      	b.n	800544e <UART_SetConfig+0x6f6>
 80053d4:	00f42400 	.word	0x00f42400
 80053d8:	0001e848 	.word	0x0001e848
 80053dc:	0003d090 	.word	0x0003d090
 80053e0:	0007a120 	.word	0x0007a120
 80053e4:	000f4240 	.word	0x000f4240
 80053e8:	00145855 	.word	0x00145855
 80053ec:	00186a00 	.word	0x00186a00
 80053f0:	001e8480 	.word	0x001e8480
 80053f4:	0028b0aa 	.word	0x0028b0aa
 80053f8:	003d0900 	.word	0x003d0900
 80053fc:	007a1200 	.word	0x007a1200
 8005400:	f04f 0310 	mov.w	r3, #16
 8005404:	f04f 0400 	mov.w	r4, #0
 8005408:	e021      	b.n	800544e <UART_SetConfig+0x6f6>
 800540a:	f04f 030c 	mov.w	r3, #12
 800540e:	f04f 0400 	mov.w	r4, #0
 8005412:	e01c      	b.n	800544e <UART_SetConfig+0x6f6>
 8005414:	f04f 030a 	mov.w	r3, #10
 8005418:	f04f 0400 	mov.w	r4, #0
 800541c:	e017      	b.n	800544e <UART_SetConfig+0x6f6>
 800541e:	f04f 0308 	mov.w	r3, #8
 8005422:	f04f 0400 	mov.w	r4, #0
 8005426:	e012      	b.n	800544e <UART_SetConfig+0x6f6>
 8005428:	f04f 0306 	mov.w	r3, #6
 800542c:	f04f 0400 	mov.w	r4, #0
 8005430:	e00d      	b.n	800544e <UART_SetConfig+0x6f6>
 8005432:	f04f 0304 	mov.w	r3, #4
 8005436:	f04f 0400 	mov.w	r4, #0
 800543a:	e008      	b.n	800544e <UART_SetConfig+0x6f6>
 800543c:	f04f 0302 	mov.w	r3, #2
 8005440:	f04f 0400 	mov.w	r4, #0
 8005444:	e003      	b.n	800544e <UART_SetConfig+0x6f6>
 8005446:	f04f 0301 	mov.w	r3, #1
 800544a:	f04f 0400 	mov.w	r4, #0
 800544e:	461a      	mov	r2, r3
 8005450:	4623      	mov	r3, r4
 8005452:	f7fa fee1 	bl	8000218 <__aeabi_uldivmod>
 8005456:	4603      	mov	r3, r0
 8005458:	460c      	mov	r4, r1
 800545a:	4619      	mov	r1, r3
 800545c:	4622      	mov	r2, r4
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	f04f 0400 	mov.w	r4, #0
 8005466:	0214      	lsls	r4, r2, #8
 8005468:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800546c:	020b      	lsls	r3, r1, #8
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6852      	ldr	r2, [r2, #4]
 8005472:	0852      	lsrs	r2, r2, #1
 8005474:	4611      	mov	r1, r2
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	eb13 0b01 	adds.w	fp, r3, r1
 800547e:	eb44 0c02 	adc.w	ip, r4, r2
 8005482:	4658      	mov	r0, fp
 8005484:	4661      	mov	r1, ip
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f04f 0400 	mov.w	r4, #0
 800548e:	461a      	mov	r2, r3
 8005490:	4623      	mov	r3, r4
 8005492:	f7fa fec1 	bl	8000218 <__aeabi_uldivmod>
 8005496:	4603      	mov	r3, r0
 8005498:	460c      	mov	r4, r1
 800549a:	61fb      	str	r3, [r7, #28]
            break;
 800549c:	e1c5      	b.n	800582a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d05b      	beq.n	800555e <UART_SetConfig+0x806>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d053      	beq.n	8005556 <UART_SetConfig+0x7fe>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d04b      	beq.n	800554e <UART_SetConfig+0x7f6>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d043      	beq.n	8005546 <UART_SetConfig+0x7ee>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d03b      	beq.n	800553e <UART_SetConfig+0x7e6>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2b05      	cmp	r3, #5
 80054cc:	d033      	beq.n	8005536 <UART_SetConfig+0x7de>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	d02b      	beq.n	800552e <UART_SetConfig+0x7d6>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b07      	cmp	r3, #7
 80054dc:	d023      	beq.n	8005526 <UART_SetConfig+0x7ce>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d01b      	beq.n	800551e <UART_SetConfig+0x7c6>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	2b09      	cmp	r3, #9
 80054ec:	d013      	beq.n	8005516 <UART_SetConfig+0x7be>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b0a      	cmp	r3, #10
 80054f4:	d00b      	beq.n	800550e <UART_SetConfig+0x7b6>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	2b0b      	cmp	r3, #11
 80054fc:	d103      	bne.n	8005506 <UART_SetConfig+0x7ae>
 80054fe:	4bae      	ldr	r3, [pc, #696]	; (80057b8 <UART_SetConfig+0xa60>)
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	e02e      	b.n	8005564 <UART_SetConfig+0x80c>
 8005506:	4bad      	ldr	r3, [pc, #692]	; (80057bc <UART_SetConfig+0xa64>)
 8005508:	f04f 0400 	mov.w	r4, #0
 800550c:	e02a      	b.n	8005564 <UART_SetConfig+0x80c>
 800550e:	4bac      	ldr	r3, [pc, #688]	; (80057c0 <UART_SetConfig+0xa68>)
 8005510:	f04f 0400 	mov.w	r4, #0
 8005514:	e026      	b.n	8005564 <UART_SetConfig+0x80c>
 8005516:	4bab      	ldr	r3, [pc, #684]	; (80057c4 <UART_SetConfig+0xa6c>)
 8005518:	f04f 0400 	mov.w	r4, #0
 800551c:	e022      	b.n	8005564 <UART_SetConfig+0x80c>
 800551e:	4baa      	ldr	r3, [pc, #680]	; (80057c8 <UART_SetConfig+0xa70>)
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	e01e      	b.n	8005564 <UART_SetConfig+0x80c>
 8005526:	4ba9      	ldr	r3, [pc, #676]	; (80057cc <UART_SetConfig+0xa74>)
 8005528:	f04f 0400 	mov.w	r4, #0
 800552c:	e01a      	b.n	8005564 <UART_SetConfig+0x80c>
 800552e:	a49e      	add	r4, pc, #632	; (adr r4, 80057a8 <UART_SetConfig+0xa50>)
 8005530:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005534:	e016      	b.n	8005564 <UART_SetConfig+0x80c>
 8005536:	4ba6      	ldr	r3, [pc, #664]	; (80057d0 <UART_SetConfig+0xa78>)
 8005538:	f04f 0400 	mov.w	r4, #0
 800553c:	e012      	b.n	8005564 <UART_SetConfig+0x80c>
 800553e:	4ba5      	ldr	r3, [pc, #660]	; (80057d4 <UART_SetConfig+0xa7c>)
 8005540:	f04f 0400 	mov.w	r4, #0
 8005544:	e00e      	b.n	8005564 <UART_SetConfig+0x80c>
 8005546:	a49a      	add	r4, pc, #616	; (adr r4, 80057b0 <UART_SetConfig+0xa58>)
 8005548:	e9d4 3400 	ldrd	r3, r4, [r4]
 800554c:	e00a      	b.n	8005564 <UART_SetConfig+0x80c>
 800554e:	4ba2      	ldr	r3, [pc, #648]	; (80057d8 <UART_SetConfig+0xa80>)
 8005550:	f04f 0400 	mov.w	r4, #0
 8005554:	e006      	b.n	8005564 <UART_SetConfig+0x80c>
 8005556:	4ba1      	ldr	r3, [pc, #644]	; (80057dc <UART_SetConfig+0xa84>)
 8005558:	f04f 0400 	mov.w	r4, #0
 800555c:	e002      	b.n	8005564 <UART_SetConfig+0x80c>
 800555e:	4b97      	ldr	r3, [pc, #604]	; (80057bc <UART_SetConfig+0xa64>)
 8005560:	f04f 0400 	mov.w	r4, #0
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6852      	ldr	r2, [r2, #4]
 8005568:	0852      	lsrs	r2, r2, #1
 800556a:	4611      	mov	r1, r2
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	eb13 0b01 	adds.w	fp, r3, r1
 8005574:	eb44 0c02 	adc.w	ip, r4, r2
 8005578:	4658      	mov	r0, fp
 800557a:	4661      	mov	r1, ip
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f04f 0400 	mov.w	r4, #0
 8005584:	461a      	mov	r2, r3
 8005586:	4623      	mov	r3, r4
 8005588:	f7fa fe46 	bl	8000218 <__aeabi_uldivmod>
 800558c:	4603      	mov	r3, r0
 800558e:	460c      	mov	r4, r1
 8005590:	61fb      	str	r3, [r7, #28]
            break;
 8005592:	e14a      	b.n	800582a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005594:	f7fe fa84 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8005598:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4618      	mov	r0, r3
 800559e:	f04f 0100 	mov.w	r1, #0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d067      	beq.n	800567a <UART_SetConfig+0x922>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d05e      	beq.n	8005670 <UART_SetConfig+0x918>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d055      	beq.n	8005666 <UART_SetConfig+0x90e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d04c      	beq.n	800565c <UART_SetConfig+0x904>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d043      	beq.n	8005652 <UART_SetConfig+0x8fa>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b05      	cmp	r3, #5
 80055d0:	d03a      	beq.n	8005648 <UART_SetConfig+0x8f0>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b06      	cmp	r3, #6
 80055d8:	d031      	beq.n	800563e <UART_SetConfig+0x8e6>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b07      	cmp	r3, #7
 80055e0:	d028      	beq.n	8005634 <UART_SetConfig+0x8dc>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d01f      	beq.n	800562a <UART_SetConfig+0x8d2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	2b09      	cmp	r3, #9
 80055f0:	d016      	beq.n	8005620 <UART_SetConfig+0x8c8>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b0a      	cmp	r3, #10
 80055f8:	d00d      	beq.n	8005616 <UART_SetConfig+0x8be>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b0b      	cmp	r3, #11
 8005600:	d104      	bne.n	800560c <UART_SetConfig+0x8b4>
 8005602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005606:	f04f 0400 	mov.w	r4, #0
 800560a:	e03a      	b.n	8005682 <UART_SetConfig+0x92a>
 800560c:	f04f 0301 	mov.w	r3, #1
 8005610:	f04f 0400 	mov.w	r4, #0
 8005614:	e035      	b.n	8005682 <UART_SetConfig+0x92a>
 8005616:	f04f 0380 	mov.w	r3, #128	; 0x80
 800561a:	f04f 0400 	mov.w	r4, #0
 800561e:	e030      	b.n	8005682 <UART_SetConfig+0x92a>
 8005620:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005624:	f04f 0400 	mov.w	r4, #0
 8005628:	e02b      	b.n	8005682 <UART_SetConfig+0x92a>
 800562a:	f04f 0320 	mov.w	r3, #32
 800562e:	f04f 0400 	mov.w	r4, #0
 8005632:	e026      	b.n	8005682 <UART_SetConfig+0x92a>
 8005634:	f04f 0310 	mov.w	r3, #16
 8005638:	f04f 0400 	mov.w	r4, #0
 800563c:	e021      	b.n	8005682 <UART_SetConfig+0x92a>
 800563e:	f04f 030c 	mov.w	r3, #12
 8005642:	f04f 0400 	mov.w	r4, #0
 8005646:	e01c      	b.n	8005682 <UART_SetConfig+0x92a>
 8005648:	f04f 030a 	mov.w	r3, #10
 800564c:	f04f 0400 	mov.w	r4, #0
 8005650:	e017      	b.n	8005682 <UART_SetConfig+0x92a>
 8005652:	f04f 0308 	mov.w	r3, #8
 8005656:	f04f 0400 	mov.w	r4, #0
 800565a:	e012      	b.n	8005682 <UART_SetConfig+0x92a>
 800565c:	f04f 0306 	mov.w	r3, #6
 8005660:	f04f 0400 	mov.w	r4, #0
 8005664:	e00d      	b.n	8005682 <UART_SetConfig+0x92a>
 8005666:	f04f 0304 	mov.w	r3, #4
 800566a:	f04f 0400 	mov.w	r4, #0
 800566e:	e008      	b.n	8005682 <UART_SetConfig+0x92a>
 8005670:	f04f 0302 	mov.w	r3, #2
 8005674:	f04f 0400 	mov.w	r4, #0
 8005678:	e003      	b.n	8005682 <UART_SetConfig+0x92a>
 800567a:	f04f 0301 	mov.w	r3, #1
 800567e:	f04f 0400 	mov.w	r4, #0
 8005682:	461a      	mov	r2, r3
 8005684:	4623      	mov	r3, r4
 8005686:	f7fa fdc7 	bl	8000218 <__aeabi_uldivmod>
 800568a:	4603      	mov	r3, r0
 800568c:	460c      	mov	r4, r1
 800568e:	4619      	mov	r1, r3
 8005690:	4622      	mov	r2, r4
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	f04f 0400 	mov.w	r4, #0
 800569a:	0214      	lsls	r4, r2, #8
 800569c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80056a0:	020b      	lsls	r3, r1, #8
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6852      	ldr	r2, [r2, #4]
 80056a6:	0852      	lsrs	r2, r2, #1
 80056a8:	4611      	mov	r1, r2
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	eb13 0b01 	adds.w	fp, r3, r1
 80056b2:	eb44 0c02 	adc.w	ip, r4, r2
 80056b6:	4658      	mov	r0, fp
 80056b8:	4661      	mov	r1, ip
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f04f 0400 	mov.w	r4, #0
 80056c2:	461a      	mov	r2, r3
 80056c4:	4623      	mov	r3, r4
 80056c6:	f7fa fda7 	bl	8000218 <__aeabi_uldivmod>
 80056ca:	4603      	mov	r3, r0
 80056cc:	460c      	mov	r4, r1
 80056ce:	61fb      	str	r3, [r7, #28]
            break;
 80056d0:	e0ab      	b.n	800582a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 8088 	beq.w	80057ec <UART_SetConfig+0xa94>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d05b      	beq.n	800579c <UART_SetConfig+0xa44>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d052      	beq.n	8005792 <UART_SetConfig+0xa3a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d04a      	beq.n	800578a <UART_SetConfig+0xa32>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d041      	beq.n	8005780 <UART_SetConfig+0xa28>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	2b05      	cmp	r3, #5
 8005702:	d039      	beq.n	8005778 <UART_SetConfig+0xa20>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2b06      	cmp	r3, #6
 800570a:	d031      	beq.n	8005770 <UART_SetConfig+0xa18>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	2b07      	cmp	r3, #7
 8005712:	d028      	beq.n	8005766 <UART_SetConfig+0xa0e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b08      	cmp	r3, #8
 800571a:	d01f      	beq.n	800575c <UART_SetConfig+0xa04>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2b09      	cmp	r3, #9
 8005722:	d016      	beq.n	8005752 <UART_SetConfig+0x9fa>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b0a      	cmp	r3, #10
 800572a:	d00d      	beq.n	8005748 <UART_SetConfig+0x9f0>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2b0b      	cmp	r3, #11
 8005732:	d104      	bne.n	800573e <UART_SetConfig+0x9e6>
 8005734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005738:	f04f 0400 	mov.w	r4, #0
 800573c:	e05a      	b.n	80057f4 <UART_SetConfig+0xa9c>
 800573e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005742:	f04f 0400 	mov.w	r4, #0
 8005746:	e055      	b.n	80057f4 <UART_SetConfig+0xa9c>
 8005748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800574c:	f04f 0400 	mov.w	r4, #0
 8005750:	e050      	b.n	80057f4 <UART_SetConfig+0xa9c>
 8005752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005756:	f04f 0400 	mov.w	r4, #0
 800575a:	e04b      	b.n	80057f4 <UART_SetConfig+0xa9c>
 800575c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005760:	f04f 0400 	mov.w	r4, #0
 8005764:	e046      	b.n	80057f4 <UART_SetConfig+0xa9c>
 8005766:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800576a:	f04f 0400 	mov.w	r4, #0
 800576e:	e041      	b.n	80057f4 <UART_SetConfig+0xa9c>
 8005770:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <UART_SetConfig+0xa88>)
 8005772:	f04f 0400 	mov.w	r4, #0
 8005776:	e03d      	b.n	80057f4 <UART_SetConfig+0xa9c>
 8005778:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <UART_SetConfig+0xa8c>)
 800577a:	f04f 0400 	mov.w	r4, #0
 800577e:	e039      	b.n	80057f4 <UART_SetConfig+0xa9c>
 8005780:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005784:	f04f 0400 	mov.w	r4, #0
 8005788:	e034      	b.n	80057f4 <UART_SetConfig+0xa9c>
 800578a:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <UART_SetConfig+0xa90>)
 800578c:	f04f 0400 	mov.w	r4, #0
 8005790:	e030      	b.n	80057f4 <UART_SetConfig+0xa9c>
 8005792:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005796:	f04f 0400 	mov.w	r4, #0
 800579a:	e02b      	b.n	80057f4 <UART_SetConfig+0xa9c>
 800579c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80057a0:	f04f 0400 	mov.w	r4, #0
 80057a4:	e026      	b.n	80057f4 <UART_SetConfig+0xa9c>
 80057a6:	bf00      	nop
 80057a8:	14585500 	.word	0x14585500
 80057ac:	00000000 	.word	0x00000000
 80057b0:	28b0aa00 	.word	0x28b0aa00
 80057b4:	00000000 	.word	0x00000000
 80057b8:	00f42400 	.word	0x00f42400
 80057bc:	f4240000 	.word	0xf4240000
 80057c0:	01e84800 	.word	0x01e84800
 80057c4:	03d09000 	.word	0x03d09000
 80057c8:	07a12000 	.word	0x07a12000
 80057cc:	0f424000 	.word	0x0f424000
 80057d0:	186a0000 	.word	0x186a0000
 80057d4:	1e848000 	.word	0x1e848000
 80057d8:	3d090000 	.word	0x3d090000
 80057dc:	7a120000 	.word	0x7a120000
 80057e0:	000aaa00 	.word	0x000aaa00
 80057e4:	000ccc00 	.word	0x000ccc00
 80057e8:	00155500 	.word	0x00155500
 80057ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80057f0:	f04f 0400 	mov.w	r4, #0
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6852      	ldr	r2, [r2, #4]
 80057f8:	0852      	lsrs	r2, r2, #1
 80057fa:	4611      	mov	r1, r2
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	eb13 0b01 	adds.w	fp, r3, r1
 8005804:	eb44 0c02 	adc.w	ip, r4, r2
 8005808:	4658      	mov	r0, fp
 800580a:	4661      	mov	r1, ip
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f04f 0400 	mov.w	r4, #0
 8005814:	461a      	mov	r2, r3
 8005816:	4623      	mov	r3, r4
 8005818:	f7fa fcfe 	bl	8000218 <__aeabi_uldivmod>
 800581c:	4603      	mov	r3, r0
 800581e:	460c      	mov	r4, r1
 8005820:	61fb      	str	r3, [r7, #28]
            break;
 8005822:	e002      	b.n	800582a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	76fb      	strb	r3, [r7, #27]
            break;
 8005828:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005830:	d309      	bcc.n	8005846 <UART_SetConfig+0xaee>
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005838:	d205      	bcs.n	8005846 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	60da      	str	r2, [r3, #12]
 8005842:	f000 bc18 	b.w	8006076 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	76fb      	strb	r3, [r7, #27]
 800584a:	f000 bc14 	b.w	8006076 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005856:	f040 8204 	bne.w	8005c62 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 800585a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800585e:	2b08      	cmp	r3, #8
 8005860:	f200 81df 	bhi.w	8005c22 <UART_SetConfig+0xeca>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <UART_SetConfig+0xb14>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	08005891 	.word	0x08005891
 8005870:	08005949 	.word	0x08005949
 8005874:	08005a01 	.word	0x08005a01
 8005878:	08005c23 	.word	0x08005c23
 800587c:	08005aa9 	.word	0x08005aa9
 8005880:	08005c23 	.word	0x08005c23
 8005884:	08005c23 	.word	0x08005c23
 8005888:	08005c23 	.word	0x08005c23
 800588c:	08005b61 	.word	0x08005b61
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005890:	f7fe f974 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8005894:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b00      	cmp	r3, #0
 800589c:	d044      	beq.n	8005928 <UART_SetConfig+0xbd0>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d03e      	beq.n	8005924 <UART_SetConfig+0xbcc>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d038      	beq.n	8005920 <UART_SetConfig+0xbc8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d032      	beq.n	800591c <UART_SetConfig+0xbc4>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d02c      	beq.n	8005918 <UART_SetConfig+0xbc0>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b05      	cmp	r3, #5
 80058c4:	d026      	beq.n	8005914 <UART_SetConfig+0xbbc>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	2b06      	cmp	r3, #6
 80058cc:	d020      	beq.n	8005910 <UART_SetConfig+0xbb8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b07      	cmp	r3, #7
 80058d4:	d01a      	beq.n	800590c <UART_SetConfig+0xbb4>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d014      	beq.n	8005908 <UART_SetConfig+0xbb0>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	2b09      	cmp	r3, #9
 80058e4:	d00e      	beq.n	8005904 <UART_SetConfig+0xbac>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	2b0a      	cmp	r3, #10
 80058ec:	d008      	beq.n	8005900 <UART_SetConfig+0xba8>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b0b      	cmp	r3, #11
 80058f4:	d102      	bne.n	80058fc <UART_SetConfig+0xba4>
 80058f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058fa:	e016      	b.n	800592a <UART_SetConfig+0xbd2>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e014      	b.n	800592a <UART_SetConfig+0xbd2>
 8005900:	2380      	movs	r3, #128	; 0x80
 8005902:	e012      	b.n	800592a <UART_SetConfig+0xbd2>
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	e010      	b.n	800592a <UART_SetConfig+0xbd2>
 8005908:	2320      	movs	r3, #32
 800590a:	e00e      	b.n	800592a <UART_SetConfig+0xbd2>
 800590c:	2310      	movs	r3, #16
 800590e:	e00c      	b.n	800592a <UART_SetConfig+0xbd2>
 8005910:	230c      	movs	r3, #12
 8005912:	e00a      	b.n	800592a <UART_SetConfig+0xbd2>
 8005914:	230a      	movs	r3, #10
 8005916:	e008      	b.n	800592a <UART_SetConfig+0xbd2>
 8005918:	2308      	movs	r3, #8
 800591a:	e006      	b.n	800592a <UART_SetConfig+0xbd2>
 800591c:	2306      	movs	r3, #6
 800591e:	e004      	b.n	800592a <UART_SetConfig+0xbd2>
 8005920:	2304      	movs	r3, #4
 8005922:	e002      	b.n	800592a <UART_SetConfig+0xbd2>
 8005924:	2302      	movs	r3, #2
 8005926:	e000      	b.n	800592a <UART_SetConfig+0xbd2>
 8005928:	2301      	movs	r3, #1
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	005a      	lsls	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	085b      	lsrs	r3, r3, #1
 8005938:	441a      	add	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005942:	b29b      	uxth	r3, r3
 8005944:	61fb      	str	r3, [r7, #28]
        break;
 8005946:	e16f      	b.n	8005c28 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005948:	f7fe f92e 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 800594c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	2b00      	cmp	r3, #0
 8005954:	d044      	beq.n	80059e0 <UART_SetConfig+0xc88>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b01      	cmp	r3, #1
 800595c:	d03e      	beq.n	80059dc <UART_SetConfig+0xc84>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	2b02      	cmp	r3, #2
 8005964:	d038      	beq.n	80059d8 <UART_SetConfig+0xc80>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b03      	cmp	r3, #3
 800596c:	d032      	beq.n	80059d4 <UART_SetConfig+0xc7c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b04      	cmp	r3, #4
 8005974:	d02c      	beq.n	80059d0 <UART_SetConfig+0xc78>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b05      	cmp	r3, #5
 800597c:	d026      	beq.n	80059cc <UART_SetConfig+0xc74>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b06      	cmp	r3, #6
 8005984:	d020      	beq.n	80059c8 <UART_SetConfig+0xc70>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b07      	cmp	r3, #7
 800598c:	d01a      	beq.n	80059c4 <UART_SetConfig+0xc6c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b08      	cmp	r3, #8
 8005994:	d014      	beq.n	80059c0 <UART_SetConfig+0xc68>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b09      	cmp	r3, #9
 800599c:	d00e      	beq.n	80059bc <UART_SetConfig+0xc64>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b0a      	cmp	r3, #10
 80059a4:	d008      	beq.n	80059b8 <UART_SetConfig+0xc60>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b0b      	cmp	r3, #11
 80059ac:	d102      	bne.n	80059b4 <UART_SetConfig+0xc5c>
 80059ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059b2:	e016      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e014      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059b8:	2380      	movs	r3, #128	; 0x80
 80059ba:	e012      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059bc:	2340      	movs	r3, #64	; 0x40
 80059be:	e010      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059c0:	2320      	movs	r3, #32
 80059c2:	e00e      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059c4:	2310      	movs	r3, #16
 80059c6:	e00c      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059c8:	230c      	movs	r3, #12
 80059ca:	e00a      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059cc:	230a      	movs	r3, #10
 80059ce:	e008      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059d0:	2308      	movs	r3, #8
 80059d2:	e006      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059d4:	2306      	movs	r3, #6
 80059d6:	e004      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059d8:	2304      	movs	r3, #4
 80059da:	e002      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059dc:	2302      	movs	r3, #2
 80059de:	e000      	b.n	80059e2 <UART_SetConfig+0xc8a>
 80059e0:	2301      	movs	r3, #1
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e8:	005a      	lsls	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	441a      	add	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	61fb      	str	r3, [r7, #28]
        break;
 80059fe:	e113      	b.n	8005c28 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d043      	beq.n	8005a90 <UART_SetConfig+0xd38>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d03d      	beq.n	8005a8c <UART_SetConfig+0xd34>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d037      	beq.n	8005a88 <UART_SetConfig+0xd30>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d031      	beq.n	8005a84 <UART_SetConfig+0xd2c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d02b      	beq.n	8005a80 <UART_SetConfig+0xd28>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b05      	cmp	r3, #5
 8005a2e:	d025      	beq.n	8005a7c <UART_SetConfig+0xd24>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2b06      	cmp	r3, #6
 8005a36:	d01f      	beq.n	8005a78 <UART_SetConfig+0xd20>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b07      	cmp	r3, #7
 8005a3e:	d019      	beq.n	8005a74 <UART_SetConfig+0xd1c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d013      	beq.n	8005a70 <UART_SetConfig+0xd18>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d00d      	beq.n	8005a6c <UART_SetConfig+0xd14>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b0a      	cmp	r3, #10
 8005a56:	d007      	beq.n	8005a68 <UART_SetConfig+0xd10>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b0b      	cmp	r3, #11
 8005a5e:	d101      	bne.n	8005a64 <UART_SetConfig+0xd0c>
 8005a60:	4b8d      	ldr	r3, [pc, #564]	; (8005c98 <UART_SetConfig+0xf40>)
 8005a62:	e016      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a64:	4b8d      	ldr	r3, [pc, #564]	; (8005c9c <UART_SetConfig+0xf44>)
 8005a66:	e014      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a68:	4b8d      	ldr	r3, [pc, #564]	; (8005ca0 <UART_SetConfig+0xf48>)
 8005a6a:	e012      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a6c:	4b8d      	ldr	r3, [pc, #564]	; (8005ca4 <UART_SetConfig+0xf4c>)
 8005a6e:	e010      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a70:	4b8d      	ldr	r3, [pc, #564]	; (8005ca8 <UART_SetConfig+0xf50>)
 8005a72:	e00e      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a74:	4b8d      	ldr	r3, [pc, #564]	; (8005cac <UART_SetConfig+0xf54>)
 8005a76:	e00c      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a78:	4b8d      	ldr	r3, [pc, #564]	; (8005cb0 <UART_SetConfig+0xf58>)
 8005a7a:	e00a      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a7c:	4b8d      	ldr	r3, [pc, #564]	; (8005cb4 <UART_SetConfig+0xf5c>)
 8005a7e:	e008      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a80:	4b8d      	ldr	r3, [pc, #564]	; (8005cb8 <UART_SetConfig+0xf60>)
 8005a82:	e006      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a84:	4b8d      	ldr	r3, [pc, #564]	; (8005cbc <UART_SetConfig+0xf64>)
 8005a86:	e004      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a88:	4b8d      	ldr	r3, [pc, #564]	; (8005cc0 <UART_SetConfig+0xf68>)
 8005a8a:	e002      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a8c:	4b8d      	ldr	r3, [pc, #564]	; (8005cc4 <UART_SetConfig+0xf6c>)
 8005a8e:	e000      	b.n	8005a92 <UART_SetConfig+0xd3a>
 8005a90:	4b82      	ldr	r3, [pc, #520]	; (8005c9c <UART_SetConfig+0xf44>)
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6852      	ldr	r2, [r2, #4]
 8005a96:	0852      	lsrs	r2, r2, #1
 8005a98:	441a      	add	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	61fb      	str	r3, [r7, #28]
        break;
 8005aa6:	e0bf      	b.n	8005c28 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aa8:	f7fd fffa 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8005aac:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d044      	beq.n	8005b40 <UART_SetConfig+0xde8>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d03e      	beq.n	8005b3c <UART_SetConfig+0xde4>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d038      	beq.n	8005b38 <UART_SetConfig+0xde0>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d032      	beq.n	8005b34 <UART_SetConfig+0xddc>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d02c      	beq.n	8005b30 <UART_SetConfig+0xdd8>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	d026      	beq.n	8005b2c <UART_SetConfig+0xdd4>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b06      	cmp	r3, #6
 8005ae4:	d020      	beq.n	8005b28 <UART_SetConfig+0xdd0>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	2b07      	cmp	r3, #7
 8005aec:	d01a      	beq.n	8005b24 <UART_SetConfig+0xdcc>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d014      	beq.n	8005b20 <UART_SetConfig+0xdc8>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b09      	cmp	r3, #9
 8005afc:	d00e      	beq.n	8005b1c <UART_SetConfig+0xdc4>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2b0a      	cmp	r3, #10
 8005b04:	d008      	beq.n	8005b18 <UART_SetConfig+0xdc0>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b0b      	cmp	r3, #11
 8005b0c:	d102      	bne.n	8005b14 <UART_SetConfig+0xdbc>
 8005b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b12:	e016      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e014      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	e012      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b1c:	2340      	movs	r3, #64	; 0x40
 8005b1e:	e010      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b20:	2320      	movs	r3, #32
 8005b22:	e00e      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b24:	2310      	movs	r3, #16
 8005b26:	e00c      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	e00a      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b2c:	230a      	movs	r3, #10
 8005b2e:	e008      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b30:	2308      	movs	r3, #8
 8005b32:	e006      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b34:	2306      	movs	r3, #6
 8005b36:	e004      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b38:	2304      	movs	r3, #4
 8005b3a:	e002      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e000      	b.n	8005b42 <UART_SetConfig+0xdea>
 8005b40:	2301      	movs	r3, #1
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	005a      	lsls	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	441a      	add	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	61fb      	str	r3, [r7, #28]
        break;
 8005b5e:	e063      	b.n	8005c28 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d04f      	beq.n	8005c08 <UART_SetConfig+0xeb0>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d048      	beq.n	8005c02 <UART_SetConfig+0xeaa>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d041      	beq.n	8005bfc <UART_SetConfig+0xea4>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d03a      	beq.n	8005bf6 <UART_SetConfig+0xe9e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d033      	beq.n	8005bf0 <UART_SetConfig+0xe98>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b05      	cmp	r3, #5
 8005b8e:	d02c      	beq.n	8005bea <UART_SetConfig+0xe92>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	d025      	beq.n	8005be4 <UART_SetConfig+0xe8c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b07      	cmp	r3, #7
 8005b9e:	d01e      	beq.n	8005bde <UART_SetConfig+0xe86>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d017      	beq.n	8005bd8 <UART_SetConfig+0xe80>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	d010      	beq.n	8005bd2 <UART_SetConfig+0xe7a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	2b0a      	cmp	r3, #10
 8005bb6:	d009      	beq.n	8005bcc <UART_SetConfig+0xe74>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	2b0b      	cmp	r3, #11
 8005bbe:	d102      	bne.n	8005bc6 <UART_SetConfig+0xe6e>
 8005bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bc4:	e022      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bca:	e01f      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd0:	e01c      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd6:	e019      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bdc:	e016      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005be2:	e013      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005be4:	f241 5354 	movw	r3, #5460	; 0x1554
 8005be8:	e010      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005bea:	f641 1398 	movw	r3, #6552	; 0x1998
 8005bee:	e00d      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bf4:	e00a      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005bf6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005bfa:	e007      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005bfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c00:	e004      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c06:	e001      	b.n	8005c0c <UART_SetConfig+0xeb4>
 8005c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6852      	ldr	r2, [r2, #4]
 8005c10:	0852      	lsrs	r2, r2, #1
 8005c12:	441a      	add	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	61fb      	str	r3, [r7, #28]
        break;
 8005c20:	e002      	b.n	8005c28 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	76fb      	strb	r3, [r7, #27]
        break;
 8005c26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	2b0f      	cmp	r3, #15
 8005c2c:	d916      	bls.n	8005c5c <UART_SetConfig+0xf04>
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c34:	d212      	bcs.n	8005c5c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f023 030f 	bic.w	r3, r3, #15
 8005c3e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	89fb      	ldrh	r3, [r7, #14]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	89fa      	ldrh	r2, [r7, #14]
 8005c58:	60da      	str	r2, [r3, #12]
 8005c5a:	e20c      	b.n	8006076 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	76fb      	strb	r3, [r7, #27]
 8005c60:	e209      	b.n	8006076 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8005c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	f200 81f4 	bhi.w	8006054 <UART_SetConfig+0x12fc>
 8005c6c:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <UART_SetConfig+0xf1c>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08005cc9 	.word	0x08005cc9
 8005c78:	08005d7f 	.word	0x08005d7f
 8005c7c:	08005e35 	.word	0x08005e35
 8005c80:	08006055 	.word	0x08006055
 8005c84:	08005edf 	.word	0x08005edf
 8005c88:	08006055 	.word	0x08006055
 8005c8c:	08006055 	.word	0x08006055
 8005c90:	08006055 	.word	0x08006055
 8005c94:	08005f95 	.word	0x08005f95
 8005c98:	0001e848 	.word	0x0001e848
 8005c9c:	01e84800 	.word	0x01e84800
 8005ca0:	0003d090 	.word	0x0003d090
 8005ca4:	0007a120 	.word	0x0007a120
 8005ca8:	000f4240 	.word	0x000f4240
 8005cac:	001e8480 	.word	0x001e8480
 8005cb0:	0028b0aa 	.word	0x0028b0aa
 8005cb4:	0030d400 	.word	0x0030d400
 8005cb8:	003d0900 	.word	0x003d0900
 8005cbc:	00516154 	.word	0x00516154
 8005cc0:	007a1200 	.word	0x007a1200
 8005cc4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc8:	f7fd ff58 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8005ccc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d044      	beq.n	8005d60 <UART_SetConfig+0x1008>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d03e      	beq.n	8005d5c <UART_SetConfig+0x1004>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d038      	beq.n	8005d58 <UART_SetConfig+0x1000>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d032      	beq.n	8005d54 <UART_SetConfig+0xffc>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d02c      	beq.n	8005d50 <UART_SetConfig+0xff8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b05      	cmp	r3, #5
 8005cfc:	d026      	beq.n	8005d4c <UART_SetConfig+0xff4>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2b06      	cmp	r3, #6
 8005d04:	d020      	beq.n	8005d48 <UART_SetConfig+0xff0>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2b07      	cmp	r3, #7
 8005d0c:	d01a      	beq.n	8005d44 <UART_SetConfig+0xfec>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d014      	beq.n	8005d40 <UART_SetConfig+0xfe8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b09      	cmp	r3, #9
 8005d1c:	d00e      	beq.n	8005d3c <UART_SetConfig+0xfe4>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b0a      	cmp	r3, #10
 8005d24:	d008      	beq.n	8005d38 <UART_SetConfig+0xfe0>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b0b      	cmp	r3, #11
 8005d2c:	d102      	bne.n	8005d34 <UART_SetConfig+0xfdc>
 8005d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d32:	e016      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e014      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	e012      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d3c:	2340      	movs	r3, #64	; 0x40
 8005d3e:	e010      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d40:	2320      	movs	r3, #32
 8005d42:	e00e      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d44:	2310      	movs	r3, #16
 8005d46:	e00c      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d48:	230c      	movs	r3, #12
 8005d4a:	e00a      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d4c:	230a      	movs	r3, #10
 8005d4e:	e008      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d50:	2308      	movs	r3, #8
 8005d52:	e006      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d54:	2306      	movs	r3, #6
 8005d56:	e004      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	e002      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e000      	b.n	8005d62 <UART_SetConfig+0x100a>
 8005d60:	2301      	movs	r3, #1
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	441a      	add	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	61fb      	str	r3, [r7, #28]
        break;
 8005d7c:	e16d      	b.n	800605a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d7e:	f7fd ff13 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8005d82:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d044      	beq.n	8005e16 <UART_SetConfig+0x10be>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d03e      	beq.n	8005e12 <UART_SetConfig+0x10ba>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d038      	beq.n	8005e0e <UART_SetConfig+0x10b6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d032      	beq.n	8005e0a <UART_SetConfig+0x10b2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d02c      	beq.n	8005e06 <UART_SetConfig+0x10ae>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b05      	cmp	r3, #5
 8005db2:	d026      	beq.n	8005e02 <UART_SetConfig+0x10aa>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b06      	cmp	r3, #6
 8005dba:	d020      	beq.n	8005dfe <UART_SetConfig+0x10a6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b07      	cmp	r3, #7
 8005dc2:	d01a      	beq.n	8005dfa <UART_SetConfig+0x10a2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d014      	beq.n	8005df6 <UART_SetConfig+0x109e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b09      	cmp	r3, #9
 8005dd2:	d00e      	beq.n	8005df2 <UART_SetConfig+0x109a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b0a      	cmp	r3, #10
 8005dda:	d008      	beq.n	8005dee <UART_SetConfig+0x1096>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b0b      	cmp	r3, #11
 8005de2:	d102      	bne.n	8005dea <UART_SetConfig+0x1092>
 8005de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005de8:	e016      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e014      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	e012      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005df2:	2340      	movs	r3, #64	; 0x40
 8005df4:	e010      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005df6:	2320      	movs	r3, #32
 8005df8:	e00e      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	e00c      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005dfe:	230c      	movs	r3, #12
 8005e00:	e00a      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005e02:	230a      	movs	r3, #10
 8005e04:	e008      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005e06:	2308      	movs	r3, #8
 8005e08:	e006      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005e0a:	2306      	movs	r3, #6
 8005e0c:	e004      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005e0e:	2304      	movs	r3, #4
 8005e10:	e002      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005e12:	2302      	movs	r3, #2
 8005e14:	e000      	b.n	8005e18 <UART_SetConfig+0x10c0>
 8005e16:	2301      	movs	r3, #1
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	441a      	add	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	61fb      	str	r3, [r7, #28]
        break;
 8005e32:	e112      	b.n	800605a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d044      	beq.n	8005ec6 <UART_SetConfig+0x116e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d03e      	beq.n	8005ec2 <UART_SetConfig+0x116a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d038      	beq.n	8005ebe <UART_SetConfig+0x1166>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d032      	beq.n	8005eba <UART_SetConfig+0x1162>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d02c      	beq.n	8005eb6 <UART_SetConfig+0x115e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b05      	cmp	r3, #5
 8005e62:	d026      	beq.n	8005eb2 <UART_SetConfig+0x115a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b06      	cmp	r3, #6
 8005e6a:	d020      	beq.n	8005eae <UART_SetConfig+0x1156>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b07      	cmp	r3, #7
 8005e72:	d01a      	beq.n	8005eaa <UART_SetConfig+0x1152>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d014      	beq.n	8005ea6 <UART_SetConfig+0x114e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b09      	cmp	r3, #9
 8005e82:	d00e      	beq.n	8005ea2 <UART_SetConfig+0x114a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b0a      	cmp	r3, #10
 8005e8a:	d008      	beq.n	8005e9e <UART_SetConfig+0x1146>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b0b      	cmp	r3, #11
 8005e92:	d102      	bne.n	8005e9a <UART_SetConfig+0x1142>
 8005e94:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005e98:	e016      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005e9a:	4b81      	ldr	r3, [pc, #516]	; (80060a0 <UART_SetConfig+0x1348>)
 8005e9c:	e014      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005e9e:	4b81      	ldr	r3, [pc, #516]	; (80060a4 <UART_SetConfig+0x134c>)
 8005ea0:	e012      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005ea2:	4b81      	ldr	r3, [pc, #516]	; (80060a8 <UART_SetConfig+0x1350>)
 8005ea4:	e010      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005ea6:	4b81      	ldr	r3, [pc, #516]	; (80060ac <UART_SetConfig+0x1354>)
 8005ea8:	e00e      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005eaa:	4b81      	ldr	r3, [pc, #516]	; (80060b0 <UART_SetConfig+0x1358>)
 8005eac:	e00c      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005eae:	4b81      	ldr	r3, [pc, #516]	; (80060b4 <UART_SetConfig+0x135c>)
 8005eb0:	e00a      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005eb2:	4b81      	ldr	r3, [pc, #516]	; (80060b8 <UART_SetConfig+0x1360>)
 8005eb4:	e008      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005eb6:	4b81      	ldr	r3, [pc, #516]	; (80060bc <UART_SetConfig+0x1364>)
 8005eb8:	e006      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005eba:	4b81      	ldr	r3, [pc, #516]	; (80060c0 <UART_SetConfig+0x1368>)
 8005ebc:	e004      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005ebe:	4b81      	ldr	r3, [pc, #516]	; (80060c4 <UART_SetConfig+0x136c>)
 8005ec0:	e002      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005ec2:	4b81      	ldr	r3, [pc, #516]	; (80060c8 <UART_SetConfig+0x1370>)
 8005ec4:	e000      	b.n	8005ec8 <UART_SetConfig+0x1170>
 8005ec6:	4b76      	ldr	r3, [pc, #472]	; (80060a0 <UART_SetConfig+0x1348>)
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6852      	ldr	r2, [r2, #4]
 8005ecc:	0852      	lsrs	r2, r2, #1
 8005ece:	441a      	add	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	61fb      	str	r3, [r7, #28]
        break;
 8005edc:	e0bd      	b.n	800605a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ede:	f7fd fddf 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8005ee2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d044      	beq.n	8005f76 <UART_SetConfig+0x121e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d03e      	beq.n	8005f72 <UART_SetConfig+0x121a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d038      	beq.n	8005f6e <UART_SetConfig+0x1216>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d032      	beq.n	8005f6a <UART_SetConfig+0x1212>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d02c      	beq.n	8005f66 <UART_SetConfig+0x120e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b05      	cmp	r3, #5
 8005f12:	d026      	beq.n	8005f62 <UART_SetConfig+0x120a>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	2b06      	cmp	r3, #6
 8005f1a:	d020      	beq.n	8005f5e <UART_SetConfig+0x1206>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	2b07      	cmp	r3, #7
 8005f22:	d01a      	beq.n	8005f5a <UART_SetConfig+0x1202>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d014      	beq.n	8005f56 <UART_SetConfig+0x11fe>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	2b09      	cmp	r3, #9
 8005f32:	d00e      	beq.n	8005f52 <UART_SetConfig+0x11fa>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2b0a      	cmp	r3, #10
 8005f3a:	d008      	beq.n	8005f4e <UART_SetConfig+0x11f6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b0b      	cmp	r3, #11
 8005f42:	d102      	bne.n	8005f4a <UART_SetConfig+0x11f2>
 8005f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f48:	e016      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e014      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	e012      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f52:	2340      	movs	r3, #64	; 0x40
 8005f54:	e010      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f56:	2320      	movs	r3, #32
 8005f58:	e00e      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	e00c      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f5e:	230c      	movs	r3, #12
 8005f60:	e00a      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f62:	230a      	movs	r3, #10
 8005f64:	e008      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f66:	2308      	movs	r3, #8
 8005f68:	e006      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f6a:	2306      	movs	r3, #6
 8005f6c:	e004      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f6e:	2304      	movs	r3, #4
 8005f70:	e002      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e000      	b.n	8005f78 <UART_SetConfig+0x1220>
 8005f76:	2301      	movs	r3, #1
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	085b      	lsrs	r3, r3, #1
 8005f84:	441a      	add	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	61fb      	str	r3, [r7, #28]
        break;
 8005f92:	e062      	b.n	800605a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d04e      	beq.n	800603a <UART_SetConfig+0x12e2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d047      	beq.n	8006034 <UART_SetConfig+0x12dc>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d040      	beq.n	800602e <UART_SetConfig+0x12d6>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d039      	beq.n	8006028 <UART_SetConfig+0x12d0>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d032      	beq.n	8006022 <UART_SetConfig+0x12ca>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	2b05      	cmp	r3, #5
 8005fc2:	d02b      	beq.n	800601c <UART_SetConfig+0x12c4>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	2b06      	cmp	r3, #6
 8005fca:	d024      	beq.n	8006016 <UART_SetConfig+0x12be>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b07      	cmp	r3, #7
 8005fd2:	d01d      	beq.n	8006010 <UART_SetConfig+0x12b8>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d016      	beq.n	800600a <UART_SetConfig+0x12b2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b09      	cmp	r3, #9
 8005fe2:	d00f      	beq.n	8006004 <UART_SetConfig+0x12ac>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b0a      	cmp	r3, #10
 8005fea:	d008      	beq.n	8005ffe <UART_SetConfig+0x12a6>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	2b0b      	cmp	r3, #11
 8005ff2:	d101      	bne.n	8005ff8 <UART_SetConfig+0x12a0>
 8005ff4:	2380      	movs	r3, #128	; 0x80
 8005ff6:	e022      	b.n	800603e <UART_SetConfig+0x12e6>
 8005ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffc:	e01f      	b.n	800603e <UART_SetConfig+0x12e6>
 8005ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006002:	e01c      	b.n	800603e <UART_SetConfig+0x12e6>
 8006004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006008:	e019      	b.n	800603e <UART_SetConfig+0x12e6>
 800600a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800600e:	e016      	b.n	800603e <UART_SetConfig+0x12e6>
 8006010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006014:	e013      	b.n	800603e <UART_SetConfig+0x12e6>
 8006016:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800601a:	e010      	b.n	800603e <UART_SetConfig+0x12e6>
 800601c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006020:	e00d      	b.n	800603e <UART_SetConfig+0x12e6>
 8006022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006026:	e00a      	b.n	800603e <UART_SetConfig+0x12e6>
 8006028:	f241 5355 	movw	r3, #5461	; 0x1555
 800602c:	e007      	b.n	800603e <UART_SetConfig+0x12e6>
 800602e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006032:	e004      	b.n	800603e <UART_SetConfig+0x12e6>
 8006034:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006038:	e001      	b.n	800603e <UART_SetConfig+0x12e6>
 800603a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6852      	ldr	r2, [r2, #4]
 8006042:	0852      	lsrs	r2, r2, #1
 8006044:	441a      	add	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	fbb2 f3f3 	udiv	r3, r2, r3
 800604e:	b29b      	uxth	r3, r3
 8006050:	61fb      	str	r3, [r7, #28]
        break;
 8006052:	e002      	b.n	800605a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	76fb      	strb	r3, [r7, #27]
        break;
 8006058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2b0f      	cmp	r3, #15
 800605e:	d908      	bls.n	8006072 <UART_SetConfig+0x131a>
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006066:	d204      	bcs.n	8006072 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	60da      	str	r2, [r3, #12]
 8006070:	e001      	b.n	8006076 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006092:	7efb      	ldrb	r3, [r7, #27]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3728      	adds	r7, #40	; 0x28
 8006098:	46bd      	mov	sp, r7
 800609a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800609e:	bf00      	nop
 80060a0:	00f42400 	.word	0x00f42400
 80060a4:	0001e848 	.word	0x0001e848
 80060a8:	0003d090 	.word	0x0003d090
 80060ac:	0007a120 	.word	0x0007a120
 80060b0:	000f4240 	.word	0x000f4240
 80060b4:	00145855 	.word	0x00145855
 80060b8:	00186a00 	.word	0x00186a00
 80060bc:	001e8480 	.word	0x001e8480
 80060c0:	0028b0aa 	.word	0x0028b0aa
 80060c4:	003d0900 	.word	0x003d0900
 80060c8:	007a1200 	.word	0x007a1200

080060cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01a      	beq.n	80061e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ca:	d10a      	bne.n	80061e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	605a      	str	r2, [r3, #4]
  }
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af02      	add	r7, sp, #8
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006220:	f7fa f9de 	bl	80005e0 <HAL_GetTick>
 8006224:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b08      	cmp	r3, #8
 8006232:	d10e      	bne.n	8006252 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f82c 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e022      	b.n	8006298 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b04      	cmp	r3, #4
 800625e:	d10e      	bne.n	800627e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f816 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e00c      	b.n	8006298 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	4613      	mov	r3, r2
 80062ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b0:	e02c      	b.n	800630c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d028      	beq.n	800630c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ba:	f7fa f991 	bl	80005e0 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d302      	bcc.n	80062d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d11d      	bne.n	800630c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062de:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0201 	bic.w	r2, r2, #1
 80062ee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e00f      	b.n	800632c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69da      	ldr	r2, [r3, #28]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	4013      	ands	r3, r2
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	429a      	cmp	r2, r3
 800631a:	bf0c      	ite	eq
 800631c:	2301      	moveq	r3, #1
 800631e:	2300      	movne	r3, #0
 8006320:	b2db      	uxtb	r3, r3
 8006322:	461a      	mov	r2, r3
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	429a      	cmp	r2, r3
 8006328:	d0c3      	beq.n	80062b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_UARTEx_DisableFifoMode+0x16>
 8006346:	2302      	movs	r3, #2
 8006348:	e027      	b.n	800639a <HAL_UARTEx_DisableFifoMode+0x66>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2224      	movs	r2, #36	; 0x24
 8006356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006378:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e02d      	b.n	800641a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2224      	movs	r2, #36	; 0x24
 80063ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f850 	bl	80064a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006436:	2302      	movs	r3, #2
 8006438:	e02d      	b.n	8006496 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2224      	movs	r2, #36	; 0x24
 8006446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f812 	bl	80064a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b089      	sub	sp, #36	; 0x24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80064a8:	4a2f      	ldr	r2, [pc, #188]	; (8006568 <UARTEx_SetNbDataToProcess+0xc8>)
 80064aa:	f107 0314 	add.w	r3, r7, #20
 80064ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064b2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80064b6:	4a2d      	ldr	r2, [pc, #180]	; (800656c <UARTEx_SetNbDataToProcess+0xcc>)
 80064b8:	f107 030c 	add.w	r3, r7, #12
 80064bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064c0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d108      	bne.n	80064de <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064dc:	e03d      	b.n	800655a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064de:	2308      	movs	r3, #8
 80064e0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064e2:	2308      	movs	r3, #8
 80064e4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	0e5b      	lsrs	r3, r3, #25
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	0f5b      	lsrs	r3, r3, #29
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006506:	7fbb      	ldrb	r3, [r7, #30]
 8006508:	7f3a      	ldrb	r2, [r7, #28]
 800650a:	f107 0120 	add.w	r1, r7, #32
 800650e:	440a      	add	r2, r1
 8006510:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006514:	fb02 f303 	mul.w	r3, r2, r3
 8006518:	7f3a      	ldrb	r2, [r7, #28]
 800651a:	f107 0120 	add.w	r1, r7, #32
 800651e:	440a      	add	r2, r1
 8006520:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006524:	fb93 f3f2 	sdiv	r3, r3, r2
 8006528:	b29a      	uxth	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006530:	7ffb      	ldrb	r3, [r7, #31]
 8006532:	7f7a      	ldrb	r2, [r7, #29]
 8006534:	f107 0120 	add.w	r1, r7, #32
 8006538:	440a      	add	r2, r1
 800653a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800653e:	fb02 f303 	mul.w	r3, r2, r3
 8006542:	7f7a      	ldrb	r2, [r7, #29]
 8006544:	f107 0120 	add.w	r1, r7, #32
 8006548:	440a      	add	r2, r1
 800654a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800654e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006552:	b29a      	uxth	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800655a:	bf00      	nop
 800655c:	3724      	adds	r7, #36	; 0x24
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	08007738 	.word	0x08007738
 800656c:	08007740 	.word	0x08007740

08006570 <HAL_FDCAN_RxFifo0Callback>:
uint8_t               TxData[50];
uint8_t               RxData[50];
uint32_t              TxMailbox;
uint8_t cnt;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8006570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006572:	b0b9      	sub	sp, #228	; 0xe4
 8006574:	af1e      	add	r7, sp, #120	; 0x78
 8006576:	6678      	str	r0, [r7, #100]	; 0x64
 8006578:	6639      	str	r1, [r7, #96]	; 0x60
   if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800657a:	4b56      	ldr	r3, [pc, #344]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 800657c:	4a56      	ldr	r2, [pc, #344]	; (80066d8 <HAL_FDCAN_RxFifo0Callback+0x168>)
 800657e:	2140      	movs	r1, #64	; 0x40
 8006580:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8006582:	f7fb ffdf 	bl	8002544 <HAL_FDCAN_GetRxMessage>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_FDCAN_RxFifo0Callback+0x20>
    {
    Error_Handler();
 800658c:	f000 fc6a 	bl	8006e64 <Error_Handler>
    }
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 8006590:	4b51      	ldr	r3, [pc, #324]	; (80066d8 <HAL_FDCAN_RxFifo0Callback+0x168>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	65fb      	str	r3, [r7, #92]	; 0x5c
    		" 18=%d 19=%d 20=%d 21=%d 22=%d 23=%d 24=%d 25=%d 26=%d 27=%d 28=%d 29=%d 30=%d 31=%d"
    		"\r\n",RxHeader.Identifier,RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5]
 8006596:	4b4f      	ldr	r3, [pc, #316]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8006598:	781b      	ldrb	r3, [r3, #0]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 800659a:	469c      	mov	ip, r3
    		"\r\n",RxHeader.Identifier,RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5]
 800659c:	4b4d      	ldr	r3, [pc, #308]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 800659e:	785b      	ldrb	r3, [r3, #1]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065a0:	469e      	mov	lr, r3
    		"\r\n",RxHeader.Identifier,RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5]
 80065a2:	4b4c      	ldr	r3, [pc, #304]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065a4:	789b      	ldrb	r3, [r3, #2]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065a6:	65bb      	str	r3, [r7, #88]	; 0x58
    		"\r\n",RxHeader.Identifier,RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5]
 80065a8:	4b4a      	ldr	r3, [pc, #296]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065aa:	78db      	ldrb	r3, [r3, #3]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065ac:	657b      	str	r3, [r7, #84]	; 0x54
    		"\r\n",RxHeader.Identifier,RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5]
 80065ae:	4b49      	ldr	r3, [pc, #292]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065b0:	791b      	ldrb	r3, [r3, #4]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065b2:	653b      	str	r3, [r7, #80]	; 0x50
    		"\r\n",RxHeader.Identifier,RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5]
 80065b4:	4b47      	ldr	r3, [pc, #284]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065b6:	795b      	ldrb	r3, [r3, #5]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065b8:	64fb      	str	r3, [r7, #76]	; 0x4c
			,RxData[6],RxData[7],RxData[8],RxData[9],RxData[10],RxData[11],RxData[12],RxData[13],RxData[14]
 80065ba:	4b46      	ldr	r3, [pc, #280]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065bc:	799b      	ldrb	r3, [r3, #6]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065be:	64bb      	str	r3, [r7, #72]	; 0x48
			,RxData[6],RxData[7],RxData[8],RxData[9],RxData[10],RxData[11],RxData[12],RxData[13],RxData[14]
 80065c0:	4b44      	ldr	r3, [pc, #272]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065c2:	79db      	ldrb	r3, [r3, #7]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065c4:	647b      	str	r3, [r7, #68]	; 0x44
			,RxData[6],RxData[7],RxData[8],RxData[9],RxData[10],RxData[11],RxData[12],RxData[13],RxData[14]
 80065c6:	4b43      	ldr	r3, [pc, #268]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065c8:	7a1b      	ldrb	r3, [r3, #8]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065ca:	643b      	str	r3, [r7, #64]	; 0x40
			,RxData[6],RxData[7],RxData[8],RxData[9],RxData[10],RxData[11],RxData[12],RxData[13],RxData[14]
 80065cc:	4b41      	ldr	r3, [pc, #260]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065ce:	7a5b      	ldrb	r3, [r3, #9]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			,RxData[6],RxData[7],RxData[8],RxData[9],RxData[10],RxData[11],RxData[12],RxData[13],RxData[14]
 80065d2:	4b40      	ldr	r3, [pc, #256]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065d4:	7a9b      	ldrb	r3, [r3, #10]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065d6:	63bb      	str	r3, [r7, #56]	; 0x38
			,RxData[6],RxData[7],RxData[8],RxData[9],RxData[10],RxData[11],RxData[12],RxData[13],RxData[14]
 80065d8:	4b3e      	ldr	r3, [pc, #248]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065da:	7adb      	ldrb	r3, [r3, #11]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
			,RxData[6],RxData[7],RxData[8],RxData[9],RxData[10],RxData[11],RxData[12],RxData[13],RxData[14]
 80065de:	4b3d      	ldr	r3, [pc, #244]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065e0:	7b1b      	ldrb	r3, [r3, #12]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065e2:	633b      	str	r3, [r7, #48]	; 0x30
			,RxData[6],RxData[7],RxData[8],RxData[9],RxData[10],RxData[11],RxData[12],RxData[13],RxData[14]
 80065e4:	4b3b      	ldr	r3, [pc, #236]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065e6:	7b5b      	ldrb	r3, [r3, #13]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			,RxData[6],RxData[7],RxData[8],RxData[9],RxData[10],RxData[11],RxData[12],RxData[13],RxData[14]
 80065ea:	4b3a      	ldr	r3, [pc, #232]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065ec:	7b9b      	ldrb	r3, [r3, #14]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28
			,RxData[15],RxData[16],RxData[17],RxData[18],RxData[19],RxData[20],RxData[21],RxData[22],RxData[23]
 80065f0:	4b38      	ldr	r3, [pc, #224]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065f2:	7bdb      	ldrb	r3, [r3, #15]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
			,RxData[15],RxData[16],RxData[17],RxData[18],RxData[19],RxData[20],RxData[21],RxData[22],RxData[23]
 80065f6:	4b37      	ldr	r3, [pc, #220]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065f8:	7c1b      	ldrb	r3, [r3, #16]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 80065fa:	623b      	str	r3, [r7, #32]
			,RxData[15],RxData[16],RxData[17],RxData[18],RxData[19],RxData[20],RxData[21],RxData[22],RxData[23]
 80065fc:	4b35      	ldr	r3, [pc, #212]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80065fe:	7c5b      	ldrb	r3, [r3, #17]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 8006600:	61fb      	str	r3, [r7, #28]
			,RxData[15],RxData[16],RxData[17],RxData[18],RxData[19],RxData[20],RxData[21],RxData[22],RxData[23]
 8006602:	4b34      	ldr	r3, [pc, #208]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8006604:	7c9b      	ldrb	r3, [r3, #18]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 8006606:	61bb      	str	r3, [r7, #24]
			,RxData[15],RxData[16],RxData[17],RxData[18],RxData[19],RxData[20],RxData[21],RxData[22],RxData[23]
 8006608:	4b32      	ldr	r3, [pc, #200]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 800660a:	7cdb      	ldrb	r3, [r3, #19]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 800660c:	617b      	str	r3, [r7, #20]
			,RxData[15],RxData[16],RxData[17],RxData[18],RxData[19],RxData[20],RxData[21],RxData[22],RxData[23]
 800660e:	4b31      	ldr	r3, [pc, #196]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8006610:	7d1b      	ldrb	r3, [r3, #20]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 8006612:	613b      	str	r3, [r7, #16]
			,RxData[15],RxData[16],RxData[17],RxData[18],RxData[19],RxData[20],RxData[21],RxData[22],RxData[23]
 8006614:	4b2f      	ldr	r3, [pc, #188]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8006616:	7d5b      	ldrb	r3, [r3, #21]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 8006618:	60fb      	str	r3, [r7, #12]
			,RxData[15],RxData[16],RxData[17],RxData[18],RxData[19],RxData[20],RxData[21],RxData[22],RxData[23]
 800661a:	4b2e      	ldr	r3, [pc, #184]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 800661c:	7d9b      	ldrb	r3, [r3, #22]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 800661e:	60bb      	str	r3, [r7, #8]
			,RxData[15],RxData[16],RxData[17],RxData[18],RxData[19],RxData[20],RxData[21],RxData[22],RxData[23]
 8006620:	4b2c      	ldr	r3, [pc, #176]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8006622:	7ddb      	ldrb	r3, [r3, #23]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 8006624:	607b      	str	r3, [r7, #4]
	        ,RxData[24],RxData[25],RxData[26],RxData[27],RxData[28],RxData[29],RxData[30],RxData[31]);
 8006626:	4b2b      	ldr	r3, [pc, #172]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8006628:	7e1b      	ldrb	r3, [r3, #24]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 800662a:	603b      	str	r3, [r7, #0]
	        ,RxData[24],RxData[25],RxData[26],RxData[27],RxData[28],RxData[29],RxData[30],RxData[31]);
 800662c:	4b29      	ldr	r3, [pc, #164]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 800662e:	7e5b      	ldrb	r3, [r3, #25]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 8006630:	461e      	mov	r6, r3
	        ,RxData[24],RxData[25],RxData[26],RxData[27],RxData[28],RxData[29],RxData[30],RxData[31]);
 8006632:	4b28      	ldr	r3, [pc, #160]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8006634:	7e9b      	ldrb	r3, [r3, #26]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 8006636:	461d      	mov	r5, r3
	        ,RxData[24],RxData[25],RxData[26],RxData[27],RxData[28],RxData[29],RxData[30],RxData[31]);
 8006638:	4b26      	ldr	r3, [pc, #152]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 800663a:	7edb      	ldrb	r3, [r3, #27]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 800663c:	461c      	mov	r4, r3
	        ,RxData[24],RxData[25],RxData[26],RxData[27],RxData[28],RxData[29],RxData[30],RxData[31]);
 800663e:	4b25      	ldr	r3, [pc, #148]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8006640:	7f1b      	ldrb	r3, [r3, #28]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 8006642:	4618      	mov	r0, r3
	        ,RxData[24],RxData[25],RxData[26],RxData[27],RxData[28],RxData[29],RxData[30],RxData[31]);
 8006644:	4b23      	ldr	r3, [pc, #140]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8006646:	7f5b      	ldrb	r3, [r3, #29]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 8006648:	4619      	mov	r1, r3
	        ,RxData[24],RxData[25],RxData[26],RxData[27],RxData[28],RxData[29],RxData[30],RxData[31]);
 800664a:	4b22      	ldr	r3, [pc, #136]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 800664c:	7f9b      	ldrb	r3, [r3, #30]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 800664e:	461a      	mov	r2, r3
	        ,RxData[24],RxData[25],RxData[26],RxData[27],RxData[28],RxData[29],RxData[30],RxData[31]);
 8006650:	4b20      	ldr	r3, [pc, #128]	; (80066d4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8006652:	7fdb      	ldrb	r3, [r3, #31]
    xprintf(" id=%x 0=%d 1=%d 2=%d 3=%d 4=%d 5=%d 6=%d 7=%d 8=%d 9=%d 10=%d 11=%d 12=%d 13=%d 14=%d 15=%d 16=%d 17=%d"
 8006654:	931d      	str	r3, [sp, #116]	; 0x74
 8006656:	921c      	str	r2, [sp, #112]	; 0x70
 8006658:	911b      	str	r1, [sp, #108]	; 0x6c
 800665a:	901a      	str	r0, [sp, #104]	; 0x68
 800665c:	9419      	str	r4, [sp, #100]	; 0x64
 800665e:	9518      	str	r5, [sp, #96]	; 0x60
 8006660:	9617      	str	r6, [sp, #92]	; 0x5c
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	9216      	str	r2, [sp, #88]	; 0x58
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	9215      	str	r2, [sp, #84]	; 0x54
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	9214      	str	r2, [sp, #80]	; 0x50
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	9213      	str	r2, [sp, #76]	; 0x4c
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	9212      	str	r2, [sp, #72]	; 0x48
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	9211      	str	r2, [sp, #68]	; 0x44
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	9210      	str	r2, [sp, #64]	; 0x40
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	920f      	str	r2, [sp, #60]	; 0x3c
 8006682:	6a3a      	ldr	r2, [r7, #32]
 8006684:	920e      	str	r2, [sp, #56]	; 0x38
 8006686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006688:	920d      	str	r2, [sp, #52]	; 0x34
 800668a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800668c:	920c      	str	r2, [sp, #48]	; 0x30
 800668e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006690:	920b      	str	r2, [sp, #44]	; 0x2c
 8006692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006694:	920a      	str	r2, [sp, #40]	; 0x28
 8006696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006698:	9209      	str	r2, [sp, #36]	; 0x24
 800669a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800669c:	9208      	str	r2, [sp, #32]
 800669e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066a0:	9207      	str	r2, [sp, #28]
 80066a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066a4:	9206      	str	r2, [sp, #24]
 80066a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066a8:	9205      	str	r2, [sp, #20]
 80066aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ac:	9204      	str	r2, [sp, #16]
 80066ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066b0:	9203      	str	r2, [sp, #12]
 80066b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066b4:	9202      	str	r2, [sp, #8]
 80066b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066b8:	9201      	str	r2, [sp, #4]
 80066ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066bc:	9200      	str	r2, [sp, #0]
 80066be:	4673      	mov	r3, lr
 80066c0:	4662      	mov	r2, ip
 80066c2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80066c4:	4805      	ldr	r0, [pc, #20]	; (80066dc <HAL_FDCAN_RxFifo0Callback+0x16c>)
 80066c6:	f000 ffc3 	bl	8007650 <xprintf>
}
 80066ca:	bf00      	nop
 80066cc:	376c      	adds	r7, #108	; 0x6c
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d2:	bf00      	nop
 80066d4:	200002ac 	.word	0x200002ac
 80066d8:	20000344 	.word	0x20000344
 80066dc:	08007748 	.word	0x08007748

080066e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80066e4:	f7f9 ff18 	bl	8000518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80066e8:	f000 f91a 	bl	8006920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80066ec:	f000 fb58 	bl	8006da0 <MX_GPIO_Init>
  MX_DMA_Init();
 80066f0:	f000 fb2c 	bl	8006d4c <MX_DMA_Init>
  MX_FDCAN1_Init();
 80066f4:	f000 fa04 	bl	8006b00 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 80066f8:	f000 fada 	bl	8006cb0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80066fc:	f000 f97c 	bl	80069f8 <MX_ADC1_Init>
  MX_CORDIC_Init();
 8006700:	f000 f9ea 	bl	8006ad8 <MX_CORDIC_Init>
  MX_LPUART1_UART_Init();
 8006704:	f000 fa8e 	bl	8006c24 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  init_xprintf(&hlpuart1);
 8006708:	487b      	ldr	r0, [pc, #492]	; (80068f8 <main+0x218>)
 800670a:	f000 fdbd 	bl	8007288 <init_xprintf>

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800670e:	487b      	ldr	r0, [pc, #492]	; (80068fc <main+0x21c>)
 8006710:	f7fa f9a0 	bl	8000a54 <HAL_ADC_Init>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <main+0x3e>
      {
    	  Error_Handler();
 800671a:	f000 fba3 	bl	8006e64 <Error_Handler>
      }
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800671e:	4978      	ldr	r1, [pc, #480]	; (8006900 <main+0x220>)
 8006720:	4876      	ldr	r0, [pc, #472]	; (80068fc <main+0x21c>)
 8006722:	f7fa fbf1 	bl	8000f08 <HAL_ADC_ConfigChannel>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <main+0x50>
      {
    	  Error_Handler();
 800672c:	f000 fb9a 	bl	8006e64 <Error_Handler>
      }
       if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCdata,1) != HAL_OK)
 8006730:	2201      	movs	r2, #1
 8006732:	4974      	ldr	r1, [pc, #464]	; (8006904 <main+0x224>)
 8006734:	4871      	ldr	r0, [pc, #452]	; (80068fc <main+0x21c>)
 8006736:	f7fa fb15 	bl	8000d64 <HAL_ADC_Start_DMA>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <main+0x64>
       {
          Error_Handler();
 8006740:	f000 fb90 	bl	8006e64 <Error_Handler>
       }


       if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8006744:	2200      	movs	r2, #0
 8006746:	2101      	movs	r1, #1
 8006748:	486f      	ldr	r0, [pc, #444]	; (8006908 <main+0x228>)
 800674a:	f7fb ffd5 	bl	80026f8 <HAL_FDCAN_ActivateNotification>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <main+0x78>
         {
           Error_Handler();
 8006754:	f000 fb86 	bl	8006e64 <Error_Handler>
         }
       HAL_FDCAN_Start(&hfdcan1);
 8006758:	486b      	ldr	r0, [pc, #428]	; (8006908 <main+0x228>)
 800675a:	f7fb fe86 	bl	800246a <HAL_FDCAN_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sConfigOC.Pulse = 200;
 800675e:	4b6b      	ldr	r3, [pc, #428]	; (800690c <main+0x22c>)
 8006760:	22c8      	movs	r2, #200	; 0xc8
 8006762:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006764:	2200      	movs	r2, #0
 8006766:	4969      	ldr	r1, [pc, #420]	; (800690c <main+0x22c>)
 8006768:	4869      	ldr	r0, [pc, #420]	; (8006910 <main+0x230>)
 800676a:	f7fd fced 	bl	8004148 <HAL_TIM_PWM_ConfigChannel>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <main+0x98>
	  {
		  Error_Handler();
 8006774:	f000 fb76 	bl	8006e64 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8006778:	2100      	movs	r1, #0
 800677a:	4865      	ldr	r0, [pc, #404]	; (8006910 <main+0x230>)
 800677c:	f7fd fc8c 	bl	8004098 <HAL_TIM_PWM_Start>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <main+0xaa>
	  {
		  Error_Handler();
 8006786:	f000 fb6d 	bl	8006e64 <Error_Handler>
	  }
	  HAL_Delay(50);
 800678a:	2032      	movs	r0, #50	; 0x32
 800678c:	f7f9 ff34 	bl	80005f8 <HAL_Delay>
	  sConfigOC.Pulse = 800;
 8006790:	4b5e      	ldr	r3, [pc, #376]	; (800690c <main+0x22c>)
 8006792:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006796:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006798:	2200      	movs	r2, #0
 800679a:	495c      	ldr	r1, [pc, #368]	; (800690c <main+0x22c>)
 800679c:	485c      	ldr	r0, [pc, #368]	; (8006910 <main+0x230>)
 800679e:	f7fd fcd3 	bl	8004148 <HAL_TIM_PWM_ConfigChannel>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <main+0xcc>
	  {
		  Error_Handler();
 80067a8:	f000 fb5c 	bl	8006e64 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 80067ac:	2100      	movs	r1, #0
 80067ae:	4858      	ldr	r0, [pc, #352]	; (8006910 <main+0x230>)
 80067b0:	f7fd fc72 	bl	8004098 <HAL_TIM_PWM_Start>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <main+0xde>
  	  {
		  Error_Handler();
 80067ba:	f000 fb53 	bl	8006e64 <Error_Handler>
  	  }
	  HAL_Delay(50);
 80067be:	2032      	movs	r0, #50	; 0x32
 80067c0:	f7f9 ff1a 	bl	80005f8 <HAL_Delay>


	  	TxHeader.Identifier = 0x123;
 80067c4:	4b53      	ldr	r3, [pc, #332]	; (8006914 <main+0x234>)
 80067c6:	f240 1223 	movw	r2, #291	; 0x123
 80067ca:	601a      	str	r2, [r3, #0]
	    TxHeader.IdType = FDCAN_STANDARD_ID;
 80067cc:	4b51      	ldr	r3, [pc, #324]	; (8006914 <main+0x234>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	605a      	str	r2, [r3, #4]
	    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80067d2:	4b50      	ldr	r3, [pc, #320]	; (8006914 <main+0x234>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	609a      	str	r2, [r3, #8]
	    TxHeader.DataLength = FDCAN_DLC_BYTES_32;
 80067d8:	4b4e      	ldr	r3, [pc, #312]	; (8006914 <main+0x234>)
 80067da:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80067de:	60da      	str	r2, [r3, #12]
	    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80067e0:	4b4c      	ldr	r3, [pc, #304]	; (8006914 <main+0x234>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	611a      	str	r2, [r3, #16]
	    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80067e6:	4b4b      	ldr	r3, [pc, #300]	; (8006914 <main+0x234>)
 80067e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067ec:	615a      	str	r2, [r3, #20]
	    TxHeader.FDFormat = FDCAN_FD_CAN;
 80067ee:	4b49      	ldr	r3, [pc, #292]	; (8006914 <main+0x234>)
 80067f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80067f4:	619a      	str	r2, [r3, #24]
	    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 80067f6:	4b47      	ldr	r3, [pc, #284]	; (8006914 <main+0x234>)
 80067f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80067fc:	61da      	str	r2, [r3, #28]
	    TxHeader.MessageMarker = 0x52;
 80067fe:	4b45      	ldr	r3, [pc, #276]	; (8006914 <main+0x234>)
 8006800:	2252      	movs	r2, #82	; 0x52
 8006802:	621a      	str	r2, [r3, #32]

	    TxData[0] = 0x11;
 8006804:	4b44      	ldr	r3, [pc, #272]	; (8006918 <main+0x238>)
 8006806:	2211      	movs	r2, #17
 8006808:	701a      	strb	r2, [r3, #0]
	    TxData[1] = 0x12;
 800680a:	4b43      	ldr	r3, [pc, #268]	; (8006918 <main+0x238>)
 800680c:	2212      	movs	r2, #18
 800680e:	705a      	strb	r2, [r3, #1]
	    TxData[2] = 0x13;
 8006810:	4b41      	ldr	r3, [pc, #260]	; (8006918 <main+0x238>)
 8006812:	2213      	movs	r2, #19
 8006814:	709a      	strb	r2, [r3, #2]
	    TxData[3] = 0x14;
 8006816:	4b40      	ldr	r3, [pc, #256]	; (8006918 <main+0x238>)
 8006818:	2214      	movs	r2, #20
 800681a:	70da      	strb	r2, [r3, #3]
	    TxData[4] = 0x15;
 800681c:	4b3e      	ldr	r3, [pc, #248]	; (8006918 <main+0x238>)
 800681e:	2215      	movs	r2, #21
 8006820:	711a      	strb	r2, [r3, #4]
	    TxData[5] = 0x16;
 8006822:	4b3d      	ldr	r3, [pc, #244]	; (8006918 <main+0x238>)
 8006824:	2216      	movs	r2, #22
 8006826:	715a      	strb	r2, [r3, #5]
	    TxData[6] = 0x17;
 8006828:	4b3b      	ldr	r3, [pc, #236]	; (8006918 <main+0x238>)
 800682a:	2217      	movs	r2, #23
 800682c:	719a      	strb	r2, [r3, #6]
	    TxData[7] = 0x18;
 800682e:	4b3a      	ldr	r3, [pc, #232]	; (8006918 <main+0x238>)
 8006830:	2218      	movs	r2, #24
 8006832:	71da      	strb	r2, [r3, #7]
	    TxData[8] = 0x19;
 8006834:	4b38      	ldr	r3, [pc, #224]	; (8006918 <main+0x238>)
 8006836:	2219      	movs	r2, #25
 8006838:	721a      	strb	r2, [r3, #8]
	    TxData[9] = 0x10;
 800683a:	4b37      	ldr	r3, [pc, #220]	; (8006918 <main+0x238>)
 800683c:	2210      	movs	r2, #16
 800683e:	725a      	strb	r2, [r3, #9]
	    TxData[10] = 0x11;
 8006840:	4b35      	ldr	r3, [pc, #212]	; (8006918 <main+0x238>)
 8006842:	2211      	movs	r2, #17
 8006844:	729a      	strb	r2, [r3, #10]
	    TxData[11] = 0x12;
 8006846:	4b34      	ldr	r3, [pc, #208]	; (8006918 <main+0x238>)
 8006848:	2212      	movs	r2, #18
 800684a:	72da      	strb	r2, [r3, #11]
	    TxData[12] = 0x13;
 800684c:	4b32      	ldr	r3, [pc, #200]	; (8006918 <main+0x238>)
 800684e:	2213      	movs	r2, #19
 8006850:	731a      	strb	r2, [r3, #12]
	    TxData[13] = 0x14;
 8006852:	4b31      	ldr	r3, [pc, #196]	; (8006918 <main+0x238>)
 8006854:	2214      	movs	r2, #20
 8006856:	735a      	strb	r2, [r3, #13]
	    TxData[14] = 0x15;
 8006858:	4b2f      	ldr	r3, [pc, #188]	; (8006918 <main+0x238>)
 800685a:	2215      	movs	r2, #21
 800685c:	739a      	strb	r2, [r3, #14]
	    TxData[15] = 0x16;
 800685e:	4b2e      	ldr	r3, [pc, #184]	; (8006918 <main+0x238>)
 8006860:	2216      	movs	r2, #22
 8006862:	73da      	strb	r2, [r3, #15]
	    TxData[16] = 0x17;
 8006864:	4b2c      	ldr	r3, [pc, #176]	; (8006918 <main+0x238>)
 8006866:	2217      	movs	r2, #23
 8006868:	741a      	strb	r2, [r3, #16]
	    TxData[17] = 0x18;
 800686a:	4b2b      	ldr	r3, [pc, #172]	; (8006918 <main+0x238>)
 800686c:	2218      	movs	r2, #24
 800686e:	745a      	strb	r2, [r3, #17]
	    TxData[18] = 0x19;
 8006870:	4b29      	ldr	r3, [pc, #164]	; (8006918 <main+0x238>)
 8006872:	2219      	movs	r2, #25
 8006874:	749a      	strb	r2, [r3, #18]
	    TxData[19] = 0x20;
 8006876:	4b28      	ldr	r3, [pc, #160]	; (8006918 <main+0x238>)
 8006878:	2220      	movs	r2, #32
 800687a:	74da      	strb	r2, [r3, #19]
	    TxData[20] = 0x21;
 800687c:	4b26      	ldr	r3, [pc, #152]	; (8006918 <main+0x238>)
 800687e:	2221      	movs	r2, #33	; 0x21
 8006880:	751a      	strb	r2, [r3, #20]
	    TxData[21] = 0x22;
 8006882:	4b25      	ldr	r3, [pc, #148]	; (8006918 <main+0x238>)
 8006884:	2222      	movs	r2, #34	; 0x22
 8006886:	755a      	strb	r2, [r3, #21]
	    TxData[22] = 0x23;
 8006888:	4b23      	ldr	r3, [pc, #140]	; (8006918 <main+0x238>)
 800688a:	2223      	movs	r2, #35	; 0x23
 800688c:	759a      	strb	r2, [r3, #22]
	    TxData[23] = 0x24;
 800688e:	4b22      	ldr	r3, [pc, #136]	; (8006918 <main+0x238>)
 8006890:	2224      	movs	r2, #36	; 0x24
 8006892:	75da      	strb	r2, [r3, #23]
	    TxData[24] = 0x25;
 8006894:	4b20      	ldr	r3, [pc, #128]	; (8006918 <main+0x238>)
 8006896:	2225      	movs	r2, #37	; 0x25
 8006898:	761a      	strb	r2, [r3, #24]
	    TxData[25] = 0x26;
 800689a:	4b1f      	ldr	r3, [pc, #124]	; (8006918 <main+0x238>)
 800689c:	2226      	movs	r2, #38	; 0x26
 800689e:	765a      	strb	r2, [r3, #25]
	    TxData[26] = 0x27;
 80068a0:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <main+0x238>)
 80068a2:	2227      	movs	r2, #39	; 0x27
 80068a4:	769a      	strb	r2, [r3, #26]
	    TxData[27] = 0x28;
 80068a6:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <main+0x238>)
 80068a8:	2228      	movs	r2, #40	; 0x28
 80068aa:	76da      	strb	r2, [r3, #27]
	    TxData[28] = 0x29;
 80068ac:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <main+0x238>)
 80068ae:	2229      	movs	r2, #41	; 0x29
 80068b0:	771a      	strb	r2, [r3, #28]
	    TxData[29] = 0x30;
 80068b2:	4b19      	ldr	r3, [pc, #100]	; (8006918 <main+0x238>)
 80068b4:	2230      	movs	r2, #48	; 0x30
 80068b6:	775a      	strb	r2, [r3, #29]
	    TxData[30] = 0x31;
 80068b8:	4b17      	ldr	r3, [pc, #92]	; (8006918 <main+0x238>)
 80068ba:	2231      	movs	r2, #49	; 0x31
 80068bc:	779a      	strb	r2, [r3, #30]
	    TxData[31] = cnt;
 80068be:	4b17      	ldr	r3, [pc, #92]	; (800691c <main+0x23c>)
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	4b15      	ldr	r3, [pc, #84]	; (8006918 <main+0x238>)
 80068c4:	77da      	strb	r2, [r3, #31]


	    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80068c6:	4a14      	ldr	r2, [pc, #80]	; (8006918 <main+0x238>)
 80068c8:	4912      	ldr	r1, [pc, #72]	; (8006914 <main+0x234>)
 80068ca:	480f      	ldr	r0, [pc, #60]	; (8006908 <main+0x228>)
 80068cc:	f7fb fdf5 	bl	80024ba <HAL_FDCAN_AddMessageToTxFifoQ>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <main+0x1fa>
	  	  	  {
	  	  	    Error_Handler();
 80068d6:	f000 fac5 	bl	8006e64 <Error_Handler>
	  	  	  }


	  	 if(cnt>250){
 80068da:	4b10      	ldr	r3, [pc, #64]	; (800691c <main+0x23c>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2bfa      	cmp	r3, #250	; 0xfa
 80068e0:	d903      	bls.n	80068ea <main+0x20a>
	  		 cnt=0;
 80068e2:	4b0e      	ldr	r3, [pc, #56]	; (800691c <main+0x23c>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	e739      	b.n	800675e <main+0x7e>
	  	 }
	  	 else{
	  		 cnt++;
 80068ea:	4b0c      	ldr	r3, [pc, #48]	; (800691c <main+0x23c>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	3301      	adds	r3, #1
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	4b0a      	ldr	r3, [pc, #40]	; (800691c <main+0x23c>)
 80068f4:	701a      	strb	r2, [r3, #0]
	  sConfigOC.Pulse = 200;
 80068f6:	e732      	b.n	800675e <main+0x7e>
 80068f8:	2000008c 	.word	0x2000008c
 80068fc:	2000011c 	.word	0x2000011c
 8006900:	20000034 	.word	0x20000034
 8006904:	20000088 	.word	0x20000088
 8006908:	20000210 	.word	0x20000210
 800690c:	20000060 	.word	0x20000060
 8006910:	200002e0 	.word	0x200002e0
 8006914:	20000320 	.word	0x20000320
 8006918:	20000274 	.word	0x20000274
 800691c:	20000084 	.word	0x20000084

08006920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b0a4      	sub	sp, #144	; 0x90
 8006924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006926:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800692a:	2238      	movs	r2, #56	; 0x38
 800692c:	2100      	movs	r1, #0
 800692e:	4618      	mov	r0, r3
 8006930:	f000 feee 	bl	8007710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006934:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	609a      	str	r2, [r3, #8]
 8006940:	60da      	str	r2, [r3, #12]
 8006942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006944:	463b      	mov	r3, r7
 8006946:	2244      	movs	r2, #68	; 0x44
 8006948:	2100      	movs	r1, #0
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fee0 	bl	8007710 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8006950:	2000      	movs	r0, #0
 8006952:	f7fc fbad 	bl	80030b0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006956:	2302      	movs	r3, #2
 8006958:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800695a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800695e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006960:	2340      	movs	r3, #64	; 0x40
 8006962:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006964:	2302      	movs	r3, #2
 8006966:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006968:	2302      	movs	r3, #2
 800696a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800696c:	2304      	movs	r3, #4
 800696e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8006970:	2355      	movs	r3, #85	; 0x55
 8006972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006976:	2302      	movs	r3, #2
 8006978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800697c:	2302      	movs	r3, #2
 800697e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006982:	2302      	movs	r3, #2
 8006984:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006988:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800698c:	4618      	mov	r0, r3
 800698e:	f7fc fc33 	bl	80031f8 <HAL_RCC_OscConfig>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8006998:	f000 fa64 	bl	8006e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800699c:	230f      	movs	r3, #15
 800699e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80069a0:	2303      	movs	r3, #3
 80069a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80069a4:	2300      	movs	r3, #0
 80069a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80069a8:	2300      	movs	r3, #0
 80069aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80069ac:	2300      	movs	r3, #0
 80069ae:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80069b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80069b4:	2108      	movs	r1, #8
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fc ff36 	bl	8003828 <HAL_RCC_ClockConfig>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80069c2:	f000 fa4f 	bl	8006e64 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC12
 80069c6:	f249 0320 	movw	r3, #36896	; 0x9020
 80069ca:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80069d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069d4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80069d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80069dc:	463b      	mov	r3, r7
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fd f93e 	bl	8003c60 <HAL_RCCEx_PeriphCLKConfig>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <SystemClock_Config+0xce>
  {
    Error_Handler();
 80069ea:	f000 fa3b 	bl	8006e64 <Error_Handler>
  }
}
 80069ee:	bf00      	nop
 80069f0:	3790      	adds	r7, #144	; 0x90
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80069fc:	4b32      	ldr	r3, [pc, #200]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 80069fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006a02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006a04:	4b30      	ldr	r3, [pc, #192]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006a0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006a0c:	4b2e      	ldr	r3, [pc, #184]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006a12:	4b2d      	ldr	r3, [pc, #180]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006a18:	4b2b      	ldr	r3, [pc, #172]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006a1e:	4b2a      	ldr	r3, [pc, #168]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006a24:	4b28      	ldr	r3, [pc, #160]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a26:	2204      	movs	r2, #4
 8006a28:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006a2a:	4b27      	ldr	r3, [pc, #156]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006a30:	4b25      	ldr	r3, [pc, #148]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006a36:	4b24      	ldr	r3, [pc, #144]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006a3c:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006a44:	4b20      	ldr	r3, [pc, #128]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006a4a:	4b1f      	ldr	r3, [pc, #124]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006a50:	4b1d      	ldr	r3, [pc, #116]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006a58:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006a5e:	4b1a      	ldr	r3, [pc, #104]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006a66:	4818      	ldr	r0, [pc, #96]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a68:	f7f9 fff4 	bl	8000a54 <HAL_ADC_Init>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8006a72:	f000 f9f7 	bl	8006e64 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006a76:	4b15      	ldr	r3, [pc, #84]	; (8006acc <MX_ADC1_Init+0xd4>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006a7c:	4913      	ldr	r1, [pc, #76]	; (8006acc <MX_ADC1_Init+0xd4>)
 8006a7e:	4812      	ldr	r0, [pc, #72]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006a80:	f7fa feba 	bl	80017f8 <HAL_ADCEx_MultiModeConfigChannel>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8006a8a:	f000 f9eb 	bl	8006e64 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006a8e:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <MX_ADC1_Init+0xd8>)
 8006a90:	4a10      	ldr	r2, [pc, #64]	; (8006ad4 <MX_ADC1_Init+0xdc>)
 8006a92:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006a94:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <MX_ADC1_Init+0xd8>)
 8006a96:	2206      	movs	r2, #6
 8006a98:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <MX_ADC1_Init+0xd8>)
 8006a9c:	2205      	movs	r2, #5
 8006a9e:	609a      	str	r2, [r3, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <MX_ADC1_Init+0xd8>)
 8006aa2:	227f      	movs	r2, #127	; 0x7f
 8006aa4:	60da      	str	r2, [r3, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006aa6:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <MX_ADC1_Init+0xd8>)
 8006aa8:	2204      	movs	r2, #4
 8006aaa:	611a      	str	r2, [r3, #16]
  sConfig.Offset = 0;
 8006aac:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <MX_ADC1_Init+0xd8>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006ab2:	4907      	ldr	r1, [pc, #28]	; (8006ad0 <MX_ADC1_Init+0xd8>)
 8006ab4:	4804      	ldr	r0, [pc, #16]	; (8006ac8 <MX_ADC1_Init+0xd0>)
 8006ab6:	f7fa fa27 	bl	8000f08 <HAL_ADC_ConfigChannel>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8006ac0:	f000 f9d0 	bl	8006e64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006ac4:	bf00      	nop
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	2000011c 	.word	0x2000011c
 8006acc:	20000028 	.word	0x20000028
 8006ad0:	20000034 	.word	0x20000034
 8006ad4:	04300002 	.word	0x04300002

08006ad8 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <MX_CORDIC_Init+0x20>)
 8006ade:	4a07      	ldr	r2, [pc, #28]	; (8006afc <MX_CORDIC_Init+0x24>)
 8006ae0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8006ae2:	4805      	ldr	r0, [pc, #20]	; (8006af8 <MX_CORDIC_Init+0x20>)
 8006ae4:	f7fa ff28 	bl	8001938 <HAL_CORDIC_Init>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8006aee:	f000 f9b9 	bl	8006e64 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8006af2:	bf00      	nop
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	200001e8 	.word	0x200001e8
 8006afc:	40020c00 	.word	0x40020c00

08006b00 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8006b06:	4b43      	ldr	r3, [pc, #268]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b08:	4a43      	ldr	r2, [pc, #268]	; (8006c18 <MX_FDCAN1_Init+0x118>)
 8006b0a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8006b0c:	4b41      	ldr	r3, [pc, #260]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8006b12:	4b40      	ldr	r3, [pc, #256]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b18:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8006b1a:	4b3e      	ldr	r3, [pc, #248]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8006b20:	4b3c      	ldr	r3, [pc, #240]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8006b26:	4b3b      	ldr	r3, [pc, #236]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8006b2c:	4b39      	ldr	r3, [pc, #228]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8006b32:	4b38      	ldr	r3, [pc, #224]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8006b38:	4b36      	ldr	r3, [pc, #216]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b3a:	2210      	movs	r2, #16
 8006b3c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8006b3e:	4b35      	ldr	r3, [pc, #212]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b40:	223f      	movs	r2, #63	; 0x3f
 8006b42:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8006b44:	4b33      	ldr	r3, [pc, #204]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b46:	2210      	movs	r2, #16
 8006b48:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8006b4a:	4b32      	ldr	r3, [pc, #200]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b4c:	220a      	movs	r2, #10
 8006b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8006b50:	4b30      	ldr	r3, [pc, #192]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b52:	2204      	movs	r2, #4
 8006b54:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8006b56:	4b2f      	ldr	r3, [pc, #188]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b58:	220e      	movs	r2, #14
 8006b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8006b5c:	4b2d      	ldr	r3, [pc, #180]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b5e:	2202      	movs	r2, #2
 8006b60:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8006b62:	4b2c      	ldr	r3, [pc, #176]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8006b68:	4b2a      	ldr	r3, [pc, #168]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8006b6e:	4b29      	ldr	r3, [pc, #164]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8006b74:	4827      	ldr	r0, [pc, #156]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006b76:	f7fb fa93 	bl	80020a0 <HAL_FDCAN_Init>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <MX_FDCAN1_Init+0x84>
  {
    Error_Handler();
 8006b80:	f000 f970 	bl	8006e64 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8006b84:	2300      	movs	r3, #0
 8006b86:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006b90:	2301      	movs	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x123;
 8006b94:	f240 1323 	movw	r3, #291	; 0x123
 8006b98:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x123;
 8006b9a:	f240 1323 	movw	r3, #291	; 0x123
 8006b9e:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	481b      	ldr	r0, [pc, #108]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006ba6:	f7fb fbd5 	bl	8002354 <HAL_FDCAN_ConfigFilter>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <MX_FDCAN1_Init+0xb4>
    {
      Error_Handler();
 8006bb0:	f000 f958 	bl	8006e64 <Error_Handler>
    }

    /* Configure extended ID reception filter to Rx FIFO 1 */
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8006bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bb8:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_RANGE_NO_EIDM;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x1111111;
 8006bc6:	4b15      	ldr	r3, [pc, #84]	; (8006c1c <MX_FDCAN1_Init+0x11c>)
 8006bc8:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x2222222;
 8006bca:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <MX_FDCAN1_Init+0x120>)
 8006bcc:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8006bce:	463b      	mov	r3, r7
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4810      	ldr	r0, [pc, #64]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006bd4:	f7fb fbbe 	bl	8002354 <HAL_FDCAN_ConfigFilter>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <MX_FDCAN1_Init+0xe2>
    {
      Error_Handler();
 8006bde:	f000 f941 	bl	8006e64 <Error_Handler>
    }

    /* Configure global filter:
       Filter all remote frames with STD and EXT ID
       Reject non matching frames with STD ID and EXT ID */
    if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8006be2:	2300      	movs	r3, #0
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	2300      	movs	r3, #0
 8006be8:	2202      	movs	r2, #2
 8006bea:	2102      	movs	r1, #2
 8006bec:	4809      	ldr	r0, [pc, #36]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006bee:	f7fb fc0b 	bl	8002408 <HAL_FDCAN_ConfigGlobalFilter>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <MX_FDCAN1_Init+0xfc>
    {
      Error_Handler();
 8006bf8:	f000 f934 	bl	8006e64 <Error_Handler>
    }

    /*##-2 Start FDCAN controller (continuous listening CAN bus) ##############*/
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8006bfc:	4805      	ldr	r0, [pc, #20]	; (8006c14 <MX_FDCAN1_Init+0x114>)
 8006bfe:	f7fb fc34 	bl	800246a <HAL_FDCAN_Start>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <MX_FDCAN1_Init+0x10c>
    {
      Error_Handler();
 8006c08:	f000 f92c 	bl	8006e64 <Error_Handler>
    }


  /* USER CODE END FDCAN1_Init 2 */

}
 8006c0c:	bf00      	nop
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20000210 	.word	0x20000210
 8006c18:	40006400 	.word	0x40006400
 8006c1c:	01111111 	.word	0x01111111
 8006c20:	02222222 	.word	0x02222222

08006c24 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006c28:	4b1f      	ldr	r3, [pc, #124]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c2a:	4a20      	ldr	r2, [pc, #128]	; (8006cac <MX_LPUART1_UART_Init+0x88>)
 8006c2c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8006c2e:	4b1e      	ldr	r3, [pc, #120]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006c34:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006c36:	4b1c      	ldr	r3, [pc, #112]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006c3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006c42:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006c48:	4b17      	ldr	r3, [pc, #92]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c4a:	220c      	movs	r2, #12
 8006c4c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c4e:	4b16      	ldr	r3, [pc, #88]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006c54:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006c5a:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006c60:	4811      	ldr	r0, [pc, #68]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c62:	f7fd ff93 	bl	8004b8c <HAL_UART_Init>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8006c6c:	f000 f8fa 	bl	8006e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006c70:	2100      	movs	r1, #0
 8006c72:	480d      	ldr	r0, [pc, #52]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c74:	f7ff fb97 	bl	80063a6 <HAL_UARTEx_SetTxFifoThreshold>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 8006c7e:	f000 f8f1 	bl	8006e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006c82:	2100      	movs	r1, #0
 8006c84:	4808      	ldr	r0, [pc, #32]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c86:	f7ff fbcc 	bl	8006422 <HAL_UARTEx_SetRxFifoThreshold>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8006c90:	f000 f8e8 	bl	8006e64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006c94:	4804      	ldr	r0, [pc, #16]	; (8006ca8 <MX_LPUART1_UART_Init+0x84>)
 8006c96:	f7ff fb4d 	bl	8006334 <HAL_UARTEx_DisableFifoMode>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8006ca0:	f000 f8e0 	bl	8006e64 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006ca4:	bf00      	nop
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	2000008c 	.word	0x2000008c
 8006cac:	40008000 	.word	0x40008000

08006cb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0


  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006cb4:	4b22      	ldr	r3, [pc, #136]	; (8006d40 <MX_TIM2_Init+0x90>)
 8006cb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006cba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8006cbc:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <MX_TIM2_Init+0x90>)
 8006cbe:	2214      	movs	r2, #20
 8006cc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cc2:	4b1f      	ldr	r3, [pc, #124]	; (8006d40 <MX_TIM2_Init+0x90>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8006cc8:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <MX_TIM2_Init+0x90>)
 8006cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cd0:	4b1b      	ldr	r3, [pc, #108]	; (8006d40 <MX_TIM2_Init+0x90>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cd6:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <MX_TIM2_Init+0x90>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006cdc:	4818      	ldr	r0, [pc, #96]	; (8006d40 <MX_TIM2_Init+0x90>)
 8006cde:	f7fd f9af 	bl	8004040 <HAL_TIM_PWM_Init>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <MX_TIM2_Init+0x3c>
  {
    Error_Handler();
 8006ce8:	f000 f8bc 	bl	8006e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006cec:	4b15      	ldr	r3, [pc, #84]	; (8006d44 <MX_TIM2_Init+0x94>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006cf2:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <MX_TIM2_Init+0x94>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006cf8:	4912      	ldr	r1, [pc, #72]	; (8006d44 <MX_TIM2_Init+0x94>)
 8006cfa:	4811      	ldr	r0, [pc, #68]	; (8006d40 <MX_TIM2_Init+0x90>)
 8006cfc:	f7fd fee8 	bl	8004ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8006d06:	f000 f8ad 	bl	8006e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d0a:	4b0f      	ldr	r3, [pc, #60]	; (8006d48 <MX_TIM2_Init+0x98>)
 8006d0c:	2260      	movs	r2, #96	; 0x60
 8006d0e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8006d10:	4b0d      	ldr	r3, [pc, #52]	; (8006d48 <MX_TIM2_Init+0x98>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d16:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <MX_TIM2_Init+0x98>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <MX_TIM2_Init+0x98>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d22:	2200      	movs	r2, #0
 8006d24:	4908      	ldr	r1, [pc, #32]	; (8006d48 <MX_TIM2_Init+0x98>)
 8006d26:	4806      	ldr	r0, [pc, #24]	; (8006d40 <MX_TIM2_Init+0x90>)
 8006d28:	f7fd fa0e 	bl	8004148 <HAL_TIM_PWM_ConfigChannel>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8006d32:	f000 f897 	bl	8006e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006d36:	4802      	ldr	r0, [pc, #8]	; (8006d40 <MX_TIM2_Init+0x90>)
 8006d38:	f000 fa10 	bl	800715c <HAL_TIM_MspPostInit>

}
 8006d3c:	bf00      	nop
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	200002e0 	.word	0x200002e0
 8006d44:	20000054 	.word	0x20000054
 8006d48:	20000060 	.word	0x20000060

08006d4c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006d52:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <MX_DMA_Init+0x50>)
 8006d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d56:	4a11      	ldr	r2, [pc, #68]	; (8006d9c <MX_DMA_Init+0x50>)
 8006d58:	f043 0304 	orr.w	r3, r3, #4
 8006d5c:	6493      	str	r3, [r2, #72]	; 0x48
 8006d5e:	4b0f      	ldr	r3, [pc, #60]	; (8006d9c <MX_DMA_Init+0x50>)
 8006d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <MX_DMA_Init+0x50>)
 8006d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6e:	4a0b      	ldr	r2, [pc, #44]	; (8006d9c <MX_DMA_Init+0x50>)
 8006d70:	f043 0301 	orr.w	r3, r3, #1
 8006d74:	6493      	str	r3, [r2, #72]	; 0x48
 8006d76:	4b09      	ldr	r3, [pc, #36]	; (8006d9c <MX_DMA_Init+0x50>)
 8006d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006d82:	2200      	movs	r2, #0
 8006d84:	2101      	movs	r1, #1
 8006d86:	200b      	movs	r0, #11
 8006d88:	f7fa fee3 	bl	8001b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006d8c:	200b      	movs	r0, #11
 8006d8e:	f7fa fefa 	bl	8001b86 <HAL_NVIC_EnableIRQ>

}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	40021000 	.word	0x40021000

08006da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	; 0x28
 8006da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006da6:	f107 0314 	add.w	r3, r7, #20
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	605a      	str	r2, [r3, #4]
 8006db0:	609a      	str	r2, [r3, #8]
 8006db2:	60da      	str	r2, [r3, #12]
 8006db4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006db6:	4b28      	ldr	r3, [pc, #160]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dba:	4a27      	ldr	r2, [pc, #156]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006dbc:	f043 0304 	orr.w	r3, r3, #4
 8006dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dc2:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006dce:	4b22      	ldr	r3, [pc, #136]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd2:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006dd4:	f043 0320 	orr.w	r3, r3, #32
 8006dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dda:	4b1f      	ldr	r3, [pc, #124]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006de6:	4b1c      	ldr	r3, [pc, #112]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dea:	4a1b      	ldr	r2, [pc, #108]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006df2:	4b19      	ldr	r3, [pc, #100]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	60bb      	str	r3, [r7, #8]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dfe:	4b16      	ldr	r3, [pc, #88]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006e04:	f043 0302 	orr.w	r3, r3, #2
 8006e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e0a:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <MX_GPIO_Init+0xb8>)
 8006e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	607b      	str	r3, [r7, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006e1c:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <MX_GPIO_Init+0xbc>)
 8006e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006e24:	f107 0314 	add.w	r3, r7, #20
 8006e28:	4619      	mov	r1, r3
 8006e2a:	480d      	ldr	r0, [pc, #52]	; (8006e60 <MX_GPIO_Init+0xc0>)
 8006e2c:	f7fb ffbe 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pins : USART1_TX_Pin USART1_RX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8006e30:	2330      	movs	r3, #48	; 0x30
 8006e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e34:	2302      	movs	r3, #2
 8006e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e40:	2307      	movs	r3, #7
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e44:	f107 0314 	add.w	r3, r7, #20
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4805      	ldr	r0, [pc, #20]	; (8006e60 <MX_GPIO_Init+0xc0>)
 8006e4c:	f7fb ffae 	bl	8002dac <HAL_GPIO_Init>

}
 8006e50:	bf00      	nop
 8006e52:	3728      	adds	r7, #40	; 0x28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	10110000 	.word	0x10110000
 8006e60:	48000800 	.word	0x48000800

08006e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006e68:	bf00      	nop
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
	...

08006e74 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	4a04      	ldr	r2, [pc, #16]	; (8006e90 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8006e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e82:	6093      	str	r3, [r2, #8]
}
 8006e84:	bf00      	nop
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40007000 	.word	0x40007000

08006e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <HAL_MspInit+0x44>)
 8006e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9e:	4a0e      	ldr	r2, [pc, #56]	; (8006ed8 <HAL_MspInit+0x44>)
 8006ea0:	f043 0301 	orr.w	r3, r3, #1
 8006ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8006ea6:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <HAL_MspInit+0x44>)
 8006ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	607b      	str	r3, [r7, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006eb2:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <HAL_MspInit+0x44>)
 8006eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb6:	4a08      	ldr	r2, [pc, #32]	; (8006ed8 <HAL_MspInit+0x44>)
 8006eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8006ebe:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <HAL_MspInit+0x44>)
 8006ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8006eca:	f7ff ffd3 	bl	8006e74 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40021000 	.word	0x40021000

08006edc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	; 0x28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ee4:	f107 0314 	add.w	r3, r7, #20
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	605a      	str	r2, [r3, #4]
 8006eee:	609a      	str	r2, [r3, #8]
 8006ef0:	60da      	str	r2, [r3, #12]
 8006ef2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006efc:	d14f      	bne.n	8006f9e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006efe:	4b2a      	ldr	r3, [pc, #168]	; (8006fa8 <HAL_ADC_MspInit+0xcc>)
 8006f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f02:	4a29      	ldr	r2, [pc, #164]	; (8006fa8 <HAL_ADC_MspInit+0xcc>)
 8006f04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f0a:	4b27      	ldr	r3, [pc, #156]	; (8006fa8 <HAL_ADC_MspInit+0xcc>)
 8006f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f16:	4b24      	ldr	r3, [pc, #144]	; (8006fa8 <HAL_ADC_MspInit+0xcc>)
 8006f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1a:	4a23      	ldr	r2, [pc, #140]	; (8006fa8 <HAL_ADC_MspInit+0xcc>)
 8006f1c:	f043 0301 	orr.w	r3, r3, #1
 8006f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f22:	4b21      	ldr	r3, [pc, #132]	; (8006fa8 <HAL_ADC_MspInit+0xcc>)
 8006f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f32:	2303      	movs	r3, #3
 8006f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f3a:	f107 0314 	add.w	r3, r7, #20
 8006f3e:	4619      	mov	r1, r3
 8006f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f44:	f7fb ff32 	bl	8002dac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006f48:	4b18      	ldr	r3, [pc, #96]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f4a:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <HAL_ADC_MspInit+0xd4>)
 8006f4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006f4e:	4b17      	ldr	r3, [pc, #92]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f50:	2205      	movs	r2, #5
 8006f52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f54:	4b15      	ldr	r3, [pc, #84]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f5a:	4b14      	ldr	r3, [pc, #80]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006f60:	4b12      	ldr	r3, [pc, #72]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f62:	2280      	movs	r2, #128	; 0x80
 8006f64:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f66:	4b11      	ldr	r3, [pc, #68]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f6c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006f76:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f78:	2220      	movs	r2, #32
 8006f7a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006f7c:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006f82:	480a      	ldr	r0, [pc, #40]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f84:	f7fa fe1a 	bl	8001bbc <HAL_DMA_Init>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006f8e:	f7ff ff69 	bl	8006e64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a05      	ldr	r2, [pc, #20]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f96:	655a      	str	r2, [r3, #84]	; 0x54
 8006f98:	4a04      	ldr	r2, [pc, #16]	; (8006fac <HAL_ADC_MspInit+0xd0>)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006f9e:	bf00      	nop
 8006fa0:	3728      	adds	r7, #40	; 0x28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	20000188 	.word	0x20000188
 8006fb0:	40020008 	.word	0x40020008

08006fb4 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a0a      	ldr	r2, [pc, #40]	; (8006fec <HAL_CORDIC_MspInit+0x38>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d10b      	bne.n	8006fde <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8006fc6:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <HAL_CORDIC_MspInit+0x3c>)
 8006fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fca:	4a09      	ldr	r2, [pc, #36]	; (8006ff0 <HAL_CORDIC_MspInit+0x3c>)
 8006fcc:	f043 0308 	orr.w	r3, r3, #8
 8006fd0:	6493      	str	r3, [r2, #72]	; 0x48
 8006fd2:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <HAL_CORDIC_MspInit+0x3c>)
 8006fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd6:	f003 0308 	and.w	r3, r3, #8
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8006fde:	bf00      	nop
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40020c00 	.word	0x40020c00
 8006ff0:	40021000 	.word	0x40021000

08006ff4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08a      	sub	sp, #40	; 0x28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ffc:	f107 0314 	add.w	r3, r7, #20
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	605a      	str	r2, [r3, #4]
 8007006:	609a      	str	r2, [r3, #8]
 8007008:	60da      	str	r2, [r3, #12]
 800700a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a20      	ldr	r2, [pc, #128]	; (8007094 <HAL_FDCAN_MspInit+0xa0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d139      	bne.n	800708a <HAL_FDCAN_MspInit+0x96>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8007016:	4b20      	ldr	r3, [pc, #128]	; (8007098 <HAL_FDCAN_MspInit+0xa4>)
 8007018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701a:	4a1f      	ldr	r2, [pc, #124]	; (8007098 <HAL_FDCAN_MspInit+0xa4>)
 800701c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007020:	6593      	str	r3, [r2, #88]	; 0x58
 8007022:	4b1d      	ldr	r3, [pc, #116]	; (8007098 <HAL_FDCAN_MspInit+0xa4>)
 8007024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800702e:	4b1a      	ldr	r3, [pc, #104]	; (8007098 <HAL_FDCAN_MspInit+0xa4>)
 8007030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007032:	4a19      	ldr	r2, [pc, #100]	; (8007098 <HAL_FDCAN_MspInit+0xa4>)
 8007034:	f043 0301 	orr.w	r3, r3, #1
 8007038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800703a:	4b17      	ldr	r3, [pc, #92]	; (8007098 <HAL_FDCAN_MspInit+0xa4>)
 800703c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007046:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800704a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704c:	2302      	movs	r3, #2
 800704e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007054:	2300      	movs	r3, #0
 8007056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8007058:	2309      	movs	r3, #9
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800705c:	f107 0314 	add.w	r3, r7, #20
 8007060:	4619      	mov	r1, r3
 8007062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007066:	f7fb fea1 	bl	8002dac <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 800706a:	2200      	movs	r2, #0
 800706c:	2102      	movs	r1, #2
 800706e:	2015      	movs	r0, #21
 8007070:	f7fa fd6f 	bl	8001b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8007074:	2015      	movs	r0, #21
 8007076:	f7fa fd86 	bl	8001b86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 3, 0);
 800707a:	2200      	movs	r2, #0
 800707c:	2103      	movs	r1, #3
 800707e:	2016      	movs	r0, #22
 8007080:	f7fa fd67 	bl	8001b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8007084:	2016      	movs	r0, #22
 8007086:	f7fa fd7e 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800708a:	bf00      	nop
 800708c:	3728      	adds	r7, #40	; 0x28
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40006400 	.word	0x40006400
 8007098:	40021000 	.word	0x40021000

0800709c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	; 0x28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070a4:	f107 0314 	add.w	r3, r7, #20
 80070a8:	2200      	movs	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	605a      	str	r2, [r3, #4]
 80070ae:	609a      	str	r2, [r3, #8]
 80070b0:	60da      	str	r2, [r3, #12]
 80070b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a17      	ldr	r2, [pc, #92]	; (8007118 <HAL_UART_MspInit+0x7c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d128      	bne.n	8007110 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80070be:	4b17      	ldr	r3, [pc, #92]	; (800711c <HAL_UART_MspInit+0x80>)
 80070c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c2:	4a16      	ldr	r2, [pc, #88]	; (800711c <HAL_UART_MspInit+0x80>)
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80070ca:	4b14      	ldr	r3, [pc, #80]	; (800711c <HAL_UART_MspInit+0x80>)
 80070cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070d6:	4b11      	ldr	r3, [pc, #68]	; (800711c <HAL_UART_MspInit+0x80>)
 80070d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070da:	4a10      	ldr	r2, [pc, #64]	; (800711c <HAL_UART_MspInit+0x80>)
 80070dc:	f043 0301 	orr.w	r3, r3, #1
 80070e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070e2:	4b0e      	ldr	r3, [pc, #56]	; (800711c <HAL_UART_MspInit+0x80>)
 80070e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80070ee:	230c      	movs	r3, #12
 80070f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070f2:	2302      	movs	r3, #2
 80070f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070fa:	2300      	movs	r3, #0
 80070fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80070fe:	230c      	movs	r3, #12
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007102:	f107 0314 	add.w	r3, r7, #20
 8007106:	4619      	mov	r1, r3
 8007108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800710c:	f7fb fe4e 	bl	8002dac <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8007110:	bf00      	nop
 8007112:	3728      	adds	r7, #40	; 0x28
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	40008000 	.word	0x40008000
 800711c:	40021000 	.word	0x40021000

08007120 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007130:	d10b      	bne.n	800714a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007132:	4b09      	ldr	r3, [pc, #36]	; (8007158 <HAL_TIM_PWM_MspInit+0x38>)
 8007134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007136:	4a08      	ldr	r2, [pc, #32]	; (8007158 <HAL_TIM_PWM_MspInit+0x38>)
 8007138:	f043 0301 	orr.w	r3, r3, #1
 800713c:	6593      	str	r3, [r2, #88]	; 0x58
 800713e:	4b06      	ldr	r3, [pc, #24]	; (8007158 <HAL_TIM_PWM_MspInit+0x38>)
 8007140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40021000 	.word	0x40021000

0800715c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007164:	f107 030c 	add.w	r3, r7, #12
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	609a      	str	r2, [r3, #8]
 8007170:	60da      	str	r2, [r3, #12]
 8007172:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800717c:	d11c      	bne.n	80071b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800717e:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <HAL_TIM_MspPostInit+0x64>)
 8007180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007182:	4a0f      	ldr	r2, [pc, #60]	; (80071c0 <HAL_TIM_MspPostInit+0x64>)
 8007184:	f043 0301 	orr.w	r3, r3, #1
 8007188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800718a:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <HAL_TIM_MspPostInit+0x64>)
 800718c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	60bb      	str	r3, [r7, #8]
 8007194:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007196:	2320      	movs	r3, #32
 8007198:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800719a:	2302      	movs	r3, #2
 800719c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80071a6:	2301      	movs	r3, #1
 80071a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071aa:	f107 030c 	add.w	r3, r7, #12
 80071ae:	4619      	mov	r1, r3
 80071b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071b4:	f7fb fdfa 	bl	8002dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80071b8:	bf00      	nop
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	40021000 	.word	0x40021000

080071c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80071c8:	bf00      	nop
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80071d2:	b480      	push	{r7}
 80071d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071d6:	e7fe      	b.n	80071d6 <HardFault_Handler+0x4>

080071d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071dc:	e7fe      	b.n	80071dc <MemManage_Handler+0x4>

080071de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80071de:	b480      	push	{r7}
 80071e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80071e2:	e7fe      	b.n	80071e2 <BusFault_Handler+0x4>

080071e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80071e8:	e7fe      	b.n	80071e8 <UsageFault_Handler+0x4>

080071ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80071ea:	b480      	push	{r7}
 80071ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80071ee:	bf00      	nop
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80071fc:	bf00      	nop
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007206:	b480      	push	{r7}
 8007208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800720a:	bf00      	nop
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007218:	f7f9 f9d0 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800721c:	bf00      	nop
 800721e:	bd80      	pop	{r7, pc}

08007220 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007224:	4802      	ldr	r0, [pc, #8]	; (8007230 <DMA1_Channel1_IRQHandler+0x10>)
 8007226:	f7fa fdec 	bl	8001e02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800722a:	bf00      	nop
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000188 	.word	0x20000188

08007234 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8007238:	4802      	ldr	r0, [pc, #8]	; (8007244 <FDCAN1_IT0_IRQHandler+0x10>)
 800723a:	f7fb fb43 	bl	80028c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800723e:	bf00      	nop
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20000210 	.word	0x20000210

08007248 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800724c:	4802      	ldr	r0, [pc, #8]	; (8007258 <FDCAN1_IT1_IRQHandler+0x10>)
 800724e:	f7fb fb39 	bl	80028c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8007252:	bf00      	nop
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000210 	.word	0x20000210

0800725c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800725c:	b480      	push	{r7}
 800725e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007260:	4b08      	ldr	r3, [pc, #32]	; (8007284 <SystemInit+0x28>)
 8007262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007266:	4a07      	ldr	r2, [pc, #28]	; (8007284 <SystemInit+0x28>)
 8007268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800726c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007270:	4b04      	ldr	r3, [pc, #16]	; (8007284 <SystemInit+0x28>)
 8007272:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007276:	609a      	str	r2, [r3, #8]
#endif
}
 8007278:	bf00      	nop
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	e000ed00 	.word	0xe000ed00

08007288 <init_xprintf>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/


void init_xprintf(UART_HandleTypeDef *handler){
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	huart_xprintf = handler;
 8007290:	4a05      	ldr	r2, [pc, #20]	; (80072a8 <init_xprintf+0x20>)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6013      	str	r3, [r2, #0]
	xdev_out(uart_putc);
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <init_xprintf+0x24>)
 8007298:	4a05      	ldr	r2, [pc, #20]	; (80072b0 <init_xprintf+0x28>)
 800729a:	601a      	str	r2, [r3, #0]
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	20000118 	.word	0x20000118
 80072ac:	20000370 	.word	0x20000370
 80072b0:	080072b5 	.word	0x080072b5

080072b4 <uart_putc>:
	    HAL_UART_Receive(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
void uart_putc(uint8_t c)
	{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	71fb      	strb	r3, [r7, #7]
	 char buf[1];
	 buf[0] = c;
 80072be:	79fb      	ldrb	r3, [r7, #7]
 80072c0:	733b      	strb	r3, [r7, #12]
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 80072c2:	4b06      	ldr	r3, [pc, #24]	; (80072dc <uart_putc+0x28>)
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	f107 010c 	add.w	r1, r7, #12
 80072ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072ce:	2201      	movs	r2, #1
 80072d0:	f7fd fcac 	bl	8004c2c <HAL_UART_Transmit>
	}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20000118 	.word	0x20000118

080072e0 <xputc>:
	        uart_putc(*str++);
	    }
	}

void xputc (char c)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 80072ea:	79fb      	ldrb	r3, [r7, #7]
 80072ec:	2b0a      	cmp	r3, #10
 80072ee:	d102      	bne.n	80072f6 <xputc+0x16>
 80072f0:	200d      	movs	r0, #13
 80072f2:	f7ff fff5 	bl	80072e0 <xputc>

	if (outptr) {
 80072f6:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <xputc+0x48>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 80072fe:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <xputc+0x48>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	4908      	ldr	r1, [pc, #32]	; (8007328 <xputc+0x48>)
 8007306:	600a      	str	r2, [r1, #0]
 8007308:	79fa      	ldrb	r2, [r7, #7]
 800730a:	701a      	strb	r2, [r3, #0]
		return;
 800730c:	e008      	b.n	8007320 <xputc+0x40>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 800730e:	4b07      	ldr	r3, [pc, #28]	; (800732c <xputc+0x4c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <xputc+0x40>
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <xputc+0x4c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	79fa      	ldrb	r2, [r7, #7]
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
}
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	2000007c 	.word	0x2000007c
 800732c:	20000370 	.word	0x20000370

08007330 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	while (*str)
 8007338:	e006      	b.n	8007348 <xputs+0x18>
		xputc(*str++);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff ffcc 	bl	80072e0 <xputc>
	while (*str)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1f4      	bne.n	800733a <xputs+0xa>
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08e      	sub	sp, #56	; 0x38
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	77fb      	strb	r3, [r7, #31]
		if (!c) break;				/* End of format? */
 800736c:	7ffb      	ldrb	r3, [r7, #31]
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 8167 	beq.w	8007642 <xvprintf+0x2ea>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8007374:	7ffb      	ldrb	r3, [r7, #31]
 8007376:	2b25      	cmp	r3, #37	; 0x25
 8007378:	d004      	beq.n	8007384 <xvprintf+0x2c>
			xputc(c); continue;
 800737a:	7ffb      	ldrb	r3, [r7, #31]
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff ffaf 	bl	80072e0 <xputc>
 8007382:	e15d      	b.n	8007640 <xvprintf+0x2e8>
		}
		f = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	607a      	str	r2, [r7, #4]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	77fb      	strb	r3, [r7, #31]
		if (c == '0') {				/* Flag: '0' padded */
 8007392:	7ffb      	ldrb	r3, [r7, #31]
 8007394:	2b30      	cmp	r3, #48	; 0x30
 8007396:	d107      	bne.n	80073a8 <xvprintf+0x50>
			f = 1; c = *fmt++;
 8007398:	2301      	movs	r3, #1
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	77fb      	strb	r3, [r7, #31]
 80073a6:	e009      	b.n	80073bc <xvprintf+0x64>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80073a8:	7ffb      	ldrb	r3, [r7, #31]
 80073aa:	2b2d      	cmp	r3, #45	; 0x2d
 80073ac:	d106      	bne.n	80073bc <xvprintf+0x64>
				f = 2; c = *fmt++;
 80073ae:	2302      	movs	r3, #2
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	77fb      	strb	r3, [r7, #31]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80073bc:	2300      	movs	r3, #0
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
 80073c0:	e00e      	b.n	80073e0 <xvprintf+0x88>
			w = w * 10 + c - '0';
 80073c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	461a      	mov	r2, r3
 80073ce:	7ffb      	ldrb	r3, [r7, #31]
 80073d0:	4413      	add	r3, r2
 80073d2:	3b30      	subs	r3, #48	; 0x30
 80073d4:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	77fb      	strb	r3, [r7, #31]
 80073e0:	7ffb      	ldrb	r3, [r7, #31]
 80073e2:	2b2f      	cmp	r3, #47	; 0x2f
 80073e4:	d902      	bls.n	80073ec <xvprintf+0x94>
 80073e6:	7ffb      	ldrb	r3, [r7, #31]
 80073e8:	2b39      	cmp	r3, #57	; 0x39
 80073ea:	d9ea      	bls.n	80073c2 <xvprintf+0x6a>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80073ec:	7ffb      	ldrb	r3, [r7, #31]
 80073ee:	2b6c      	cmp	r3, #108	; 0x6c
 80073f0:	d002      	beq.n	80073f8 <xvprintf+0xa0>
 80073f2:	7ffb      	ldrb	r3, [r7, #31]
 80073f4:	2b4c      	cmp	r3, #76	; 0x4c
 80073f6:	d108      	bne.n	800740a <xvprintf+0xb2>
			f |= 4; c = *fmt++;
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	f043 0304 	orr.w	r3, r3, #4
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	77fb      	strb	r3, [r7, #31]
		}
		if (!c) break;				/* End of format? */
 800740a:	7ffb      	ldrb	r3, [r7, #31]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 811a 	beq.w	8007646 <xvprintf+0x2ee>
		d = c;
 8007412:	7ffb      	ldrb	r3, [r7, #31]
 8007414:	77bb      	strb	r3, [r7, #30]
		if (d >= 'a') d -= 0x20;
 8007416:	7fbb      	ldrb	r3, [r7, #30]
 8007418:	2b60      	cmp	r3, #96	; 0x60
 800741a:	d902      	bls.n	8007422 <xvprintf+0xca>
 800741c:	7fbb      	ldrb	r3, [r7, #30]
 800741e:	3b20      	subs	r3, #32
 8007420:	77bb      	strb	r3, [r7, #30]
		switch (d) {				/* Type is... */
 8007422:	7fbb      	ldrb	r3, [r7, #30]
 8007424:	3b42      	subs	r3, #66	; 0x42
 8007426:	2b16      	cmp	r3, #22
 8007428:	d873      	bhi.n	8007512 <xvprintf+0x1ba>
 800742a:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <xvprintf+0xd8>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	080074fb 	.word	0x080074fb
 8007434:	080074e9 	.word	0x080074e9
 8007438:	08007507 	.word	0x08007507
 800743c:	08007513 	.word	0x08007513
 8007440:	08007513 	.word	0x08007513
 8007444:	08007513 	.word	0x08007513
 8007448:	08007513 	.word	0x08007513
 800744c:	08007513 	.word	0x08007513
 8007450:	08007513 	.word	0x08007513
 8007454:	08007513 	.word	0x08007513
 8007458:	08007513 	.word	0x08007513
 800745c:	08007513 	.word	0x08007513
 8007460:	08007513 	.word	0x08007513
 8007464:	08007501 	.word	0x08007501
 8007468:	08007513 	.word	0x08007513
 800746c:	08007513 	.word	0x08007513
 8007470:	08007513 	.word	0x08007513
 8007474:	0800748d 	.word	0x0800748d
 8007478:	08007513 	.word	0x08007513
 800747c:	08007507 	.word	0x08007507
 8007480:	08007513 	.word	0x08007513
 8007484:	08007513 	.word	0x08007513
 8007488:	0800750d 	.word	0x0800750d
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	1d1a      	adds	r2, r3, #4
 8007490:	603a      	str	r2, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 8007496:	2300      	movs	r3, #0
 8007498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800749a:	e002      	b.n	80074a2 <xvprintf+0x14a>
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	3301      	adds	r3, #1
 80074a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	4413      	add	r3, r2
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f6      	bne.n	800749c <xvprintf+0x144>
			while (!(f & 2) && j++ < w) xputc(' ');
 80074ae:	e002      	b.n	80074b6 <xvprintf+0x15e>
 80074b0:	2020      	movs	r0, #32
 80074b2:	f7ff ff15 	bl	80072e0 <xputc>
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d105      	bne.n	80074cc <xvprintf+0x174>
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d8f1      	bhi.n	80074b0 <xvprintf+0x158>
			xputs(p);
 80074cc:	69b8      	ldr	r0, [r7, #24]
 80074ce:	f7ff ff2f 	bl	8007330 <xputs>
			while (j++ < w) xputc(' ');
 80074d2:	e002      	b.n	80074da <xvprintf+0x182>
 80074d4:	2020      	movs	r0, #32
 80074d6:	f7ff ff03 	bl	80072e0 <xputc>
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d8f6      	bhi.n	80074d4 <xvprintf+0x17c>
			continue;
 80074e6:	e0ab      	b.n	8007640 <xvprintf+0x2e8>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	1d1a      	adds	r2, r3, #4
 80074ec:	603a      	str	r2, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff fef4 	bl	80072e0 <xputc>
 80074f8:	e0a2      	b.n	8007640 <xvprintf+0x2e8>
		case 'B' :					/* Binary */
			r = 2; break;
 80074fa:	2302      	movs	r3, #2
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
 80074fe:	e00d      	b.n	800751c <xvprintf+0x1c4>
		case 'O' :					/* Octal */
			r = 8; break;
 8007500:	2308      	movs	r3, #8
 8007502:	637b      	str	r3, [r7, #52]	; 0x34
 8007504:	e00a      	b.n	800751c <xvprintf+0x1c4>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8007506:	230a      	movs	r3, #10
 8007508:	637b      	str	r3, [r7, #52]	; 0x34
 800750a:	e007      	b.n	800751c <xvprintf+0x1c4>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800750c:	2310      	movs	r3, #16
 800750e:	637b      	str	r3, [r7, #52]	; 0x34
 8007510:	e004      	b.n	800751c <xvprintf+0x1c4>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8007512:	7ffb      	ldrb	r3, [r7, #31]
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff fee3 	bl	80072e0 <xputc>
 800751a:	e091      	b.n	8007640 <xvprintf+0x2e8>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	d004      	beq.n	8007530 <xvprintf+0x1d8>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	1d1a      	adds	r2, r3, #4
 800752a:	603a      	str	r2, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	e00b      	b.n	8007548 <xvprintf+0x1f0>
 8007530:	7fbb      	ldrb	r3, [r7, #30]
 8007532:	2b44      	cmp	r3, #68	; 0x44
 8007534:	d104      	bne.n	8007540 <xvprintf+0x1e8>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	1d1a      	adds	r2, r3, #4
 800753a:	603a      	str	r2, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	e003      	b.n	8007548 <xvprintf+0x1f0>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	1d1a      	adds	r2, r3, #4
 8007544:	603a      	str	r2, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 800754a:	7fbb      	ldrb	r3, [r7, #30]
 800754c:	2b44      	cmp	r3, #68	; 0x44
 800754e:	d109      	bne.n	8007564 <xvprintf+0x20c>
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	2b00      	cmp	r3, #0
 8007554:	da06      	bge.n	8007564 <xvprintf+0x20c>
			v = 0 - v;
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	425b      	negs	r3, r3
 800755a:	623b      	str	r3, [r7, #32]
			f |= 8;
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	f043 0308 	orr.w	r3, r3, #8
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800756c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007570:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007572:	fb01 f202 	mul.w	r2, r1, r2
 8007576:	1a9b      	subs	r3, r3, r2
 8007578:	77bb      	strb	r3, [r7, #30]
 800757a:	6a3a      	ldr	r2, [r7, #32]
 800757c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007582:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007584:	7fbb      	ldrb	r3, [r7, #30]
 8007586:	2b09      	cmp	r3, #9
 8007588:	d908      	bls.n	800759c <xvprintf+0x244>
 800758a:	7ffb      	ldrb	r3, [r7, #31]
 800758c:	2b78      	cmp	r3, #120	; 0x78
 800758e:	d101      	bne.n	8007594 <xvprintf+0x23c>
 8007590:	2227      	movs	r2, #39	; 0x27
 8007592:	e000      	b.n	8007596 <xvprintf+0x23e>
 8007594:	2207      	movs	r2, #7
 8007596:	7fbb      	ldrb	r3, [r7, #30]
 8007598:	4413      	add	r3, r2
 800759a:	77bb      	strb	r3, [r7, #30]
			s[i++] = d + '0';
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	633a      	str	r2, [r7, #48]	; 0x30
 80075a2:	7fba      	ldrb	r2, [r7, #30]
 80075a4:	3230      	adds	r2, #48	; 0x30
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80075ac:	440b      	add	r3, r1
 80075ae:	f803 2c30 	strb.w	r2, [r3, #-48]
		} while (v && i < sizeof(s));
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <xvprintf+0x266>
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	2b0f      	cmp	r3, #15
 80075bc:	d9d4      	bls.n	8007568 <xvprintf+0x210>
		if (f & 8) s[i++] = '-';
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	f003 0308 	and.w	r3, r3, #8
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <xvprintf+0x282>
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	633a      	str	r2, [r7, #48]	; 0x30
 80075ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80075d2:	4413      	add	r3, r2
 80075d4:	222d      	movs	r2, #45	; 0x2d
 80075d6:	f803 2c30 	strb.w	r2, [r3, #-48]
		j = i; d = (f & 1) ? '0' : ' ';
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <xvprintf+0x294>
 80075e8:	2330      	movs	r3, #48	; 0x30
 80075ea:	e000      	b.n	80075ee <xvprintf+0x296>
 80075ec:	2320      	movs	r3, #32
 80075ee:	77bb      	strb	r3, [r7, #30]
		while (!(f & 2) && j++ < w) xputc(d);
 80075f0:	e003      	b.n	80075fa <xvprintf+0x2a2>
 80075f2:	7fbb      	ldrb	r3, [r7, #30]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff fe73 	bl	80072e0 <xputc>
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d105      	bne.n	8007610 <xvprintf+0x2b8>
 8007604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800760a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800760c:	429a      	cmp	r2, r3
 800760e:	d8f0      	bhi.n	80075f2 <xvprintf+0x29a>
		do xputc(s[--i]); while(i);
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	3b01      	subs	r3, #1
 8007614:	633b      	str	r3, [r7, #48]	; 0x30
 8007616:	f107 0208 	add.w	r2, r7, #8
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	4413      	add	r3, r2
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff fe5d 	bl	80072e0 <xputc>
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f1      	bne.n	8007610 <xvprintf+0x2b8>
		while (j++ < w) xputc(' ');
 800762c:	e002      	b.n	8007634 <xvprintf+0x2dc>
 800762e:	2020      	movs	r0, #32
 8007630:	f7ff fe56 	bl	80072e0 <xputc>
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800763a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800763c:	429a      	cmp	r2, r3
 800763e:	d8f6      	bhi.n	800762e <xvprintf+0x2d6>
		c = *fmt++;					/* Get a char */
 8007640:	e68f      	b.n	8007362 <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8007642:	bf00      	nop
 8007644:	e000      	b.n	8007648 <xvprintf+0x2f0>
		if (!c) break;				/* End of format? */
 8007646:	bf00      	nop
	}
}
 8007648:	bf00      	nop
 800764a:	3738      	adds	r7, #56	; 0x38
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8007650:	b40f      	push	{r0, r1, r2, r3}
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8007658:	f107 0314 	add.w	r3, r7, #20
 800765c:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	6938      	ldr	r0, [r7, #16]
 8007662:	f7ff fe79 	bl	8007358 <xvprintf>
	va_end(arp);
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007670:	b004      	add	sp, #16
 8007672:	4770      	bx	lr

08007674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007674:	480d      	ldr	r0, [pc, #52]	; (80076ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007676:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007678:	480d      	ldr	r0, [pc, #52]	; (80076b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800767a:	490e      	ldr	r1, [pc, #56]	; (80076b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800767c:	4a0e      	ldr	r2, [pc, #56]	; (80076b8 <LoopForever+0xe>)
  movs r3, #0
 800767e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007680:	e002      	b.n	8007688 <LoopCopyDataInit>

08007682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007686:	3304      	adds	r3, #4

08007688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800768a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800768c:	d3f9      	bcc.n	8007682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800768e:	4a0b      	ldr	r2, [pc, #44]	; (80076bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8007690:	4c0b      	ldr	r4, [pc, #44]	; (80076c0 <LoopForever+0x16>)
  movs r3, #0
 8007692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007694:	e001      	b.n	800769a <LoopFillZerobss>

08007696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007698:	3204      	adds	r2, #4

0800769a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800769a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800769c:	d3fb      	bcc.n	8007696 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800769e:	f7ff fddd 	bl	800725c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80076a2:	f000 f811 	bl	80076c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80076a6:	f7ff f81b 	bl	80066e0 <main>

080076aa <LoopForever>:

LoopForever:
    b LoopForever
 80076aa:	e7fe      	b.n	80076aa <LoopForever>
  ldr   r0, =_estack
 80076ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80076b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80076b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80076b8:	08007840 	.word	0x08007840
  ldr r2, =_sbss
 80076bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80076c0:	20000374 	.word	0x20000374

080076c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80076c4:	e7fe      	b.n	80076c4 <ADC1_2_IRQHandler>
	...

080076c8 <__libc_init_array>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4e0d      	ldr	r6, [pc, #52]	; (8007700 <__libc_init_array+0x38>)
 80076cc:	4c0d      	ldr	r4, [pc, #52]	; (8007704 <__libc_init_array+0x3c>)
 80076ce:	1ba4      	subs	r4, r4, r6
 80076d0:	10a4      	asrs	r4, r4, #2
 80076d2:	2500      	movs	r5, #0
 80076d4:	42a5      	cmp	r5, r4
 80076d6:	d109      	bne.n	80076ec <__libc_init_array+0x24>
 80076d8:	4e0b      	ldr	r6, [pc, #44]	; (8007708 <__libc_init_array+0x40>)
 80076da:	4c0c      	ldr	r4, [pc, #48]	; (800770c <__libc_init_array+0x44>)
 80076dc:	f000 f820 	bl	8007720 <_init>
 80076e0:	1ba4      	subs	r4, r4, r6
 80076e2:	10a4      	asrs	r4, r4, #2
 80076e4:	2500      	movs	r5, #0
 80076e6:	42a5      	cmp	r5, r4
 80076e8:	d105      	bne.n	80076f6 <__libc_init_array+0x2e>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076f0:	4798      	blx	r3
 80076f2:	3501      	adds	r5, #1
 80076f4:	e7ee      	b.n	80076d4 <__libc_init_array+0xc>
 80076f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076fa:	4798      	blx	r3
 80076fc:	3501      	adds	r5, #1
 80076fe:	e7f2      	b.n	80076e6 <__libc_init_array+0x1e>
 8007700:	08007838 	.word	0x08007838
 8007704:	08007838 	.word	0x08007838
 8007708:	08007838 	.word	0x08007838
 800770c:	0800783c 	.word	0x0800783c

08007710 <memset>:
 8007710:	4402      	add	r2, r0
 8007712:	4603      	mov	r3, r0
 8007714:	4293      	cmp	r3, r2
 8007716:	d100      	bne.n	800771a <memset+0xa>
 8007718:	4770      	bx	lr
 800771a:	f803 1b01 	strb.w	r1, [r3], #1
 800771e:	e7f9      	b.n	8007714 <memset+0x4>

08007720 <_init>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr

0800772c <_fini>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr
